#include "CommercialBuilding.h"
#include <string>
using namespace std;

#ifndef OFFICE_H
#define OFFICE_H

/**
 * @class Office
 * @brief Represents an office building, inheriting from the CommercialBuilding class.
 */
class Office : public CommercialBuilding {
public:
    // Pure virtual functions for building operations
    /**
     * @brief Constructor for the Office class.
     * @param bName Name of the building.
     * @param pReq Power requirement.
     * @param wReq Water requirement.
     * @param mCost Maintenance cost.
     * @param sCost Sewage cost.
     * @param waste Waste produced.
     * @param sales Sales generated.
     * @param profit Profit made.
     * @param emp Number of jobs created.
     * @param income Income generated.
     */
    Office(string bName,int pReq, int wReq, double mCost, int sCost, int waste, float sales, float profit, int emp, int income);

    /**
     * @brief Gets the type of the building.
     * @return String representing the building type.
     */
    virtual string getBuildingType();

    /**
     * @brief Gets the number of jobs created by the building.
     * @return Number of jobs created.
     */
    virtual int getJobsCreated();

    /**
     * @brief Gets the maintenance cost of the building.
     * @return Maintenance cost.
     */
    virtual double getMaintenanceCost();

    /**
     * @brief Gets the name of the building.
     * @return Name of the building.
     */
    virtual string getName();

    /**
     * @brief Gets the power requirement of the building.
     * @return Power requirement.
     */
    virtual int getPowerReq();

    /**
     * @brief Gets the sewage cost of the building.
     * @return Sewage cost.
     */
    virtual int getSewageCost();

    /**
     * @brief Gets the water requirement of the building.
     * @return Water requirement.
     */
    virtual int getWaterReq();

    /**
     * @brief Requests the current state of the building.
     */
    virtual void requestState();

    /**
     * @brief Gets the waste cost for the building.
     * @return Waste cost.
     */
    int getWasteCost();

    /**
     * @brief sets the state of the building
     */
    void setState(State* newState);
    /**
     * @brief Gets the income generated by the building.
     * @return Income.
     */
    int getIncome();

    // Additional functions
    /**
     * @brief Gets the sales generated by the building.
     * @return Sales amount.
     */
    float getSales();

    /**
     * @brief Gets the profit generated by the building.
     * @return Profit amount.
     */
    float getProfit();

    /**
     * @brief Pays a citizen associated with the building.
     * @return Amount paid to the citizen.
     */
    int payCitizen();

     /**
     * @brief gets the current income of a commercial building
     * @return the income as an integer
     */
    virtual int getCommercialIncome();

    /**
     * @brief gets the current income of a commercial building
     * @return the income as an integer
     */
    virtual double getBalance();

    /**
     * @brief gets the current income of a commercial building
     * @return the income as an integer
     */
    virtual void setBalance(double b);
/**
     * @brief Receives power for the building.
     * @return true if power was received successfully, false otherwise.
     */
    virtual bool getPower();

    /**
     * @brief Receives water for the building.
     * @return true if water was received successfully, false otherwise.
     */
    virtual bool getWater();

    /**
     * @brief Cleans the waste of the building.
     * @return true if waste cleaning was successful, false otherwise.
     */
    virtual bool cleanWaste();

    /**
     * @brief Cleans the sewage of the building.
     * @return true if sewage cleaning was successful, false otherwise.
     */
    virtual bool cleanSewage();

    /**
	 * @brief Add a building to the Building
	 * 
	 * @param building The building to add to the WaterSupply
	 */
	virtual void addBuilding();


};

#endif

