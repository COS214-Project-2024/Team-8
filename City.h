#ifndef CITY_H
#define CITY_H

#include <vector>
#include <iostream>

#include "PopulationControl.h"
#include "Buildings.h"
#include "ResourceMediator.h"
#include "Resource.h"
#include "Utility.h"
#include "CitySector.h"
#include "CityController.h"

#include "MallFactory.h"
#include "OfficeFactory.h"
#include "OfficeFactory.h"
#include "CulturalCenterFactory.h"
#include "HouseFactory.h"
#include "ApartmentFactory.h"
#include "FactoriesFactory.h"
#include "ParkFactory.h"
#include "MedicalCenterFactory.h"
#include "MonumentFactory.h"
#include "PoliceStationFactory.h"
#include "TownHouseFactory.h"
#include "WarehouseFactory.h"
#include "SchoolFactory.h"

#include "WaterFactory.h"
#include "PowerPlantFactory.h"
#include "SewageFactory.h"
#include "WasteFactory.h"

class City
{
private:
    /**
     * @brief Represents the government design or structure.
     */
    Government DesignWits;

    /**
     * @brief Controls the overall city management and operations.
     */
    CityController Controller;

    /**
     * @brief The total number of buildings in the city.
     */
    int AmountOfBuildings;

    /**
     * @brief The total number of utilities in the city.
     */
    int AmountOfUtilities;

    /**
     * @brief Pointer to an array of buildings in the city.
     */
    Buildings *buildings;

    /**
     * @brief A vector containing various resource objects used in the city.
     */
    std::vector<Resource *> resources;

    /**
     * @brief Mediator for managing interactions between resources.
     */
    ResourceMediator *resourceMediator;

    /**
     * @brief Total waste management capacity or performance indicator.
     */
    int TotalWasteManagment;

    /**
     * @brief Total sewage management capacity or performance indicator.
     */
    int TotalSewageManagment;

    /**
     * @brief Total water supply capacity or performance indicator.
     */
    int TotalWatersupply;

    /**
     * @brief Total income generated by the city.
     */
    double TotalIncome;

    /**
     * @brief Total power consumption or production in the city.
     */
    int TotalPower;

    /**
     * @brief Total waste management requirements.
     */
    int TotalWasteReq;

    /**
     * @brief Total sewage management requirements.
     */
    int TotalSewageReq;

    /**
     * @brief Total resource requirements for the city.
     */
    int TotalReq;

    /**
     * @brief Total power requirements for the city.
     */
    int TotalPowerReq;

    /**
     * @brief The income that is subject to taxation.
     */
    int TaxableIncome;

    /**
     * @brief Average satisfaction level of the city's population.
     */
    int AvgSatisfaction;

    /**
     * @brief Controls the population dynamics and management.
     */
    PopulationControl *Population;

    /**
     * @brief The total population of the city.
     */
    int AmountOfPop;

    /**
     * @brief List of utility buildings present in the city.
     */
    Utility *ListOfUtilityBuildings;

    /**
     * @brief Factory for building various types of factories.
     */
    FactoriesFactory FactoryBuilder;

    /**
     * @brief Factory for building warehouses.
     */
    WarehouseFactory WarehouseBuilder;

    /**
     * @brief Factory for building medical centers.
     */
    MedicalCenterFactory MedicalCentreBuilder;

    /**
     * @brief Factory for building schools.
     */
    SchoolFactory SchoolBuilder;

    /**
     * @brief Factory for building police stations.
     */
    PoliceStationFactory PoliceStationBuilder;

    /**
     * @brief Factory for building offices.
     */
    OfficeFactory OfficeBuilder;

    /**
     * @brief Factory for building shopping malls.
     */
    MallFactory MallBuilder;

    /**
     * @brief Factory for building parks.
     */
    ParkFactory ParkBuilder;

    /**
     * @brief Factory for building monuments.
     */
    MonumentFactory MonumentBuilder;

    /**
     * @brief Factory for building cultural centers.
     */
    CulturalCenterFactory CulturalCentreBuilder;

    /**
     * @brief Factory for building water supply facilities.
     */
    WaterFactory WaterBuilder;

    /**
     * @brief Factory for building power generation plants.
     */
    PowerPlantFactory PowerBuilder;

    /**
     * @brief Factory for building sewage treatment facilities.
     */
    SewageFactory SewageBuilder;

    /**
     * @brief Factory for building waste management facilities.
     */
    WasteFactory WasteBuilder;

public:
    City(/* args */);
    void runsimulation();

    /**
     * @brief Calculates the total waste produced by all facilities.
     * @return Total amount of waste.
     */
    int CalculateTotalWaste();

    /**
     * @brief Creates a specified number of citizens and adds them to the population.
     * @param amount The number of citizens to be created.
     */
    void createCitizens(int amount);

    /**
     * @brief Calculates the total water usage in the area.
     * @return Total amount of water used.
     */
    int CalculateTotalWater();

    /**
     * @brief Calculates the total sewage output from all sources.
     * @return Total amount of sewage produced.
     */
    int CalculateTotalSewage();

    /**
     * @brief Calculates the total power consumption of all buildings.
     * @return Total amount of power used.
     */
    int CalculateTotalPower();

    /**
     * @brief Builds a factory to produce goods.
     */
    void BuildFactory();

    /**
     * @brief Constructs a warehouse for storing goods and materials.
     */
    void BuildWarehouse();

    /**
     * @brief Establishes a medical facility for healthcare services.
     */
    void BuildMedical();

    /**
     * @brief Builds a school for educational purposes.
     */
    void BuildSchool();

    /**
     * @brief Constructs a police station for law enforcement.
     */
    void BuildPolice();

    /**
     * @brief Sets up office buildings for administrative and commercial activities.
     */
    void BuildOffice();

    /**
     * @brief Builds a shopping mall for retail and entertainment.
     */
    void BuildMall();

    /**
     * @brief Creates a park for recreational activities.
     */
    void BuildPark();

    /**
     * @brief Constructs a monument for cultural or historical significance.
     */
    void BuildMonument();

    /**
     * @brief Establishes a cultural center for community events and activities.
     */
    void BuildCulturalCenter();

    /**
     * @brief Constructs a water utility facility for managing water supply.
     */
    void BuildWaterUtility();

    /**
     * @brief Sets up a power utility for generation and distribution of electricity.
     */
    void BuildPowerUtility();

    /**
     * @brief Establishes a waste utility for managing waste disposal.
     */
    void BuildWasteUtility();

    /**
     * @brief Constructs a sewage utility for treating and managing sewage.
     */
    void BuildSewageUtility();

    /**
     * @brief Removes a utility from the management system.
     * @param U Pointer to the utility to be removed.
     */
    void remUtility(Utility *U);

    /**
     * @brief Removes a building from the management system.
     * @param B Pointer to the building to be removed.
     */
    void remBuilding(Buildings *B);

    /**
     * @brief Removes a citizen from the population.
     * @param C Pointer to the citizen to be removed.
     */
    void remCitizen(Citizen *C);

    ~City();
};

#endif