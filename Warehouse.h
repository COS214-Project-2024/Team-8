#include "IndustrialBuilding.h"
#include <string>

using namespace std;

#ifndef WAREHOUSE_H
#define WAREHOUSE_H

/**
 * @class Warehouse
 * @brief Represents a warehouse building, inheriting from IndustrialBuilding.
 */
class Warehouse : public IndustrialBuilding {
public:
    /**
     * @brief Constructor for the Warehouse class.
     * @param bName The name of the warehouse.
     * @param pReq The power requirement.
     * @param wReq The water requirement.
     * @param mCost The maintenance cost.
     * @param sCost The sewage cost.
     * @param waste The waste produced by the warehouse.
     * @param employment The number of jobs created.
     */
    Warehouse(string bName, int pReq, int wReq, double mCost, int sCost, int waste, int employment);

    virtual string getBuildingType();

    /**
     * @brief Gets the number of jobs created by the warehouse.
     * @return The number of jobs created.
     */
    virtual int getJobsCreated();

    /**
     * @brief Gets the maintenance cost of the warehouse.
     * @return The maintenance cost as a double.
     */
    virtual double getMaintenanceCost();

    /**
     * @brief Gets the name of the warehouse.
     * @return The name of the warehouse as a string.
     */
    virtual string getName();

    /**
     * @brief Gets the power requirement of the warehouse.
     * @return The power requirement as an integer.
     */
    virtual int getPowerReq();

    /**
     * @brief Gets the sewage cost of the warehouse.
     * @return The sewage cost as an integer.
     */
    virtual int getSewageCost();

    /**
     * @brief Gets the water requirement of the warehouse.
     * @return The water requirement as an integer.
     */
    virtual int getWaterReq();


    /**
     * @brief Requests the current state of the warehouse.
     */
    virtual void requestState();

    /**
     * @brief Gets the waste cost of the warehouse.
     * @return The waste cost as an integer.
     */
    int getWasteCost();

   /**
     * @brief sets the state of the building
     */
    void setState(State* newState);
    // Additional functions

    /**
     * @brief Gets the total sales made by the warehouse.
     * @return The total sales as a float.
     */
    float getSales();

    /**
     * @brief Gets the profit generated by the warehouse.
     * @return The profit as a float.
     */
    float getProfit();

    /**
     * @brief Pays a citizen associated with the warehouse.
     * @return The payment amount as an integer.
     */
    int payCitizen();

    /**
	 * @brief Add a building to the Utility resource
	 * 
	 * @param building The building to add to the WaterSupply
	 */
	virtual void addBuilding();

    /**
     * @brief Receives power for the building.
     * @return true if power was received successfully, false otherwise.
     */
    virtual bool getPower();

    /**
     * @brief Receives water for the building.
     * @return true if water was received successfully, false otherwise.
     */
    virtual bool getWater();

    /**
     * @brief Cleans the waste of the building.
     * @return true if waste cleaning was successful, false otherwise.
     */
    virtual bool cleanWaste();

    /**
     * @brief Cleans the sewage of the building.
     * @return true if sewage cleaning was successful, false otherwise.
     */
    virtual bool cleanSewage();
};

#endif

