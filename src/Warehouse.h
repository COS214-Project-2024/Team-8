/**
 * @file Warehouse.h
 * @brief Header file for the Warehouse class, a type of IndustrialBuilding.
 */

#include "IndustrialBuilding.h"
#include <string>

using namespace std;

#ifndef WAREHOUSE_H
#define WAREHOUSE_H

/**
 * @class Warehouse
 * @brief Represents a warehouse building, inheriting from IndustrialBuilding.
 */
class Warehouse : IndustrialBuilding {

protected:
    string buildingName;      /**< Name of the warehouse building */
    string buildingType;      /**< Type of the building */
    Citizen* listOfCitizens;  /**< Pointer to a list of citizens associated with the building */

    double maintenanceCost;   /**< Cost of maintenance for the building */
    int powerReq;             /**< Power requirement for the building */
    int waterReq;             /**< Water requirement for the building */
    int sewageCost;           /**< Cost associated with sewage maintenance */
	int waste;                /**< Waste level produced by the building */
    ResourceMediator* resources; /**< Resource mediator associated with the building */

    float sales;              /**< Sales generated by the building */
    float profit;             /**< Profit generated by the building */
    int employment;           /**< Number of jobs created by the building */

    State* state;             /**< Current state of the building */

public:
    /**
     * @brief Constructor for Warehouse class.
     * @param bName Name of the building
     * @param pReq Power requirement
     * @param wReq Water requirement
     * @param mCost Maintenance cost
     * @param sCost Sewage cost
     * @param waste Waste level
     * @param employment Employment level
     */
	Warehouse(string bName, int pReq, int wReq, double mCost, int sCost, int waste, int employment);

    /**
     * @brief Cleans the sewage of the building.
     * @return true if successful, otherwise false
     */
    virtual bool cleanSewage();

    /**
     * @brief Cleans the waste of the building.
     * @return true if successful, otherwise false
     */
    virtual bool cleanWaste();

    /**
     * @brief Gets the type of the building.
     * @return A string representing the building type
     */
    virtual string getBuildingType();

    /**
     * @brief Gets the number of jobs created by the building.
     * @return Number of jobs created
     */
    virtual int getJobsCreated();

    /**
     * @brief Gets the maintenance cost of the building.
     * @return Maintenance cost as a double
     */
    virtual double getMaintenanceCost();

    /**
     * @brief Gets the name of the building.
     * @return Name of the building as a string
     */
    virtual string getName();

    /**
     * @brief Gets the power requirement of the building.
     * @return Power requirement as an integer
     */
    virtual int getPowerReq();

    /**
     * @brief Gets the sewage cost of the building.
     * @return Sewage cost as an integer
     */
    virtual int getSewageCost();

    /**
     * @brief Gets the water requirement of the building.
     * @return Water requirement as an integer
     */
    virtual int getWaterReq();

    /**
     * @brief Performs an operation in the building.
     */
    virtual void operation();

    /**
     * @brief Pays the maintenance cost of the building.
     * @return true if successful, otherwise false
     */
    virtual bool payMaintenance();

    /**
     * @brief Receives power for the building.
     * @return true if successful, otherwise false
     */
    virtual bool receivePower();

    /**
     * @brief Receives water for the building.
     * @return true if successful, otherwise false
     */
    virtual bool receiveWater();

    /**
     * @brief Requests the current state of the building.
     */
    virtual void requestState();

    /**
     * @brief Gets the cost associated with waste for the building.
     * @return Waste cost as an integer
     */
	int getWasteCost();

    /**
     * @brief Sets the state of the building.
     */
	void setState();

    /**
     * @brief Gets the sales generated by the building.
     * @return Sales as a float
     */
    float getSales();

    /**
     * @brief Performs an additional operation in the building.
     */
    void operation2();

    /**
     * @brief Gets the profit generated by the building.
     * @return Profit as a float
     */
    float getProfit();
};

#endif
