#include "LandmarkBuilding.h"
#include <string>
using namespace std;

#ifndef PARK_H
#define PARK_H

/**
 * @class Park
 * @brief Represents a park as a type of landmark building.
 */
class Park : public LandmarkBuilding {

    // Basic building details
    string buildingName; ///< Name of the building
    string buildingType; ///< Type of the building
    Citizen* listOfCitizens; ///< List of citizens associated with the park

    // Resource and cost requirements
    double maintenanceCost; ///< Maintenance cost of the park
    int powerReq; ///< Power requirements for the park
    int waterReq; ///< Water requirements for the park
    int sewageCost; ///< Sewage cost associated with the park
    int waste; ///< Waste generated by the park

    // Mediator and state objects
    ResourceMediator* resources; ///< Mediator for managing resources
    State* state; ///< Current state of the park

public:
    /**
     * @brief Constructor for the Park class.
     * @param bName Name of the park.
     * @param pReq Power requirements.
     * @param wReq Water requirements.
     * @param mCost Maintenance cost.
     * @param sCost Sewage cost.
     * @param waste Waste generated.
     */
    Park(string bName, int pReq, int wReq, double mCost, int sCost, int waste);

    /**
     * @brief Cleans the sewage of the park.
     * @return true if the sewage was cleaned successfully, false otherwise.
     */
    virtual bool cleanSewage();

    /**
     * @brief Cleans the waste of the park.
     * @return true if the waste was cleaned successfully, false otherwise.
     */
    virtual bool cleanWaste();

    /**
     * @brief Gets the type of the building.
     * @return The building type as a string.
     */
    virtual string getBuildingType();

    /**
     * @brief Gets the number of jobs created by the park.
     * @return The number of jobs as an integer.
     */
    virtual int getJobsCreated();

    /**
     * @brief Gets the maintenance cost of the park.
     * @return The maintenance cost as a double.
     */
    virtual double getMaintenanceCost();

    /**
     * @brief Gets the name of the park.
     * @return The name of the park as a string.
     */
    virtual string getName();

    /**
     * @brief Gets the power requirements of the park.
     * @return The power requirements as an integer.
     */
    virtual int getPowerReq();

    /**
     * @brief Gets the sewage cost of the park.
     * @return The sewage cost as an integer.
     */
    virtual int getSewageCost();

    /**
     * @brief Gets the water requirements of the park.
     * @return The water requirements as an integer.
     */
    virtual int getWaterReq();

    /**
     * @brief Pays the maintenance fee for the park.
     * @return true if the payment was successful, false otherwise.
     */
    virtual bool payMaintenance();

    /**
     * @brief Receives power for the park.
     * @return true if power was received successfully, false otherwise.
     */
    virtual bool receivePower();

    /**
     * @brief Receives water for the park.
     * @return true if water was received successfully, false otherwise.
     */
    virtual bool receiveWater();

    /**
     * @brief Requests the current state of the park.
     */
    virtual void requestState();

    /**
     * @brief Sets the state of the park.
     */
    void setState();

    /**
     * @brief Gets the waste cost for the park.
     * @return The waste cost as an integer.
     */
    int getWasteCost();

};

#endif

