/**
 * @file PoliceStation.h
 * @brief Header file for the PoliceStation class.
 */

#include "PublicServiceBuilding.h" 
#include <string>
using namespace std;

#ifndef POLICESTATION_H
#define POLICESTATION_H

/**
 * @class PoliceStation
 * @brief Represents a police station, which serves as a public service building for law enforcement.
 */
class PoliceStation : PublicServiceBuilding {

    // Building details
    string buildingName; /**< Name of the building */
    string buildingType; /**< Type of the building */
    Citizen* listOfCitizens; /**< List of citizens associated with the police station */

    // Resource and maintenance requirements
    double maintenanceCost; /**< Cost for maintaining the building */
    int powerReq; /**< Power requirements for the building */
    int waterReq; /**< Water requirements for the building */
    int sewageCost; /**< Cost associated with sewage management */
    int waste; /**< Amount of waste generated by the building */
    int employment; /**< Number of jobs created by the police station */
    int securityCoverage; /**< Level of security coverage provided by the police station */
    
    // Resource mediator and state
    ResourceMediator* resources; /**< Mediator for managing resources */
    State* state; /**< Current state of the police station */

public:
    // Pure virtual functions for building operations
    /**
     * @brief Constructs a PoliceStation object with specified parameters.
     * @param bName Name of the building
     * @param pReq Power requirement
     * @param wReq Water requirement
     * @param mCost Maintenance cost
     * @param sCost Sewage cost
     * @param waste Amount of waste
     * @param employment Number of jobs created
     * @param sCov Security coverage
     */
    PoliceStation(string bName,int pReq, int wReq, double mCost, int sCost, int waste, int employment, float sCov);
    
    /**
     * @brief Cleans the sewage system of the building.
     * @return True if the operation was successful, false otherwise.
     */
    virtual bool cleanSewage();
    
    /**
     * @brief Cleans the waste generated by the building.
     * @return True if the operation was successful, false otherwise.
     */
    virtual bool cleanWaste();
    
    /**
     * @brief Retrieves the type of the building.
     * @return The building type as a string.
     */
    virtual string getBuildingType();
    
    /**
     * @brief Gets the water cost associated with the building.
     * @return Water cost as an integer.
     */
    virtual int getWaterCost();
    
    /**
     * @brief Gets the number of jobs created by the police station.
     * @return Number of jobs as an integer.
     */
    virtual int getJobsCreated();
    
    /**
     * @brief Gets the maintenance cost of the building.
     * @return Maintenance cost as a double.
     */
    virtual double getMaintenanceCost();
    
    /**
     * @brief Gets the name of the building.
     * @return The building name as a string.
     */
    virtual string getName();
    
    /**
     * @brief Gets the power requirements of the building.
     * @return Power requirements as an integer.
     */
    virtual int getPowerReq();
    
    /**
     * @brief Gets the sewage cost associated with the building.
     * @return Sewage cost as an integer.
     */
    virtual int getSewageCost();
    
    /**
     * @brief Gets the waste cost associated with the building.
     * @return Waste cost as an integer.
     */
    virtual int getWasteCost();
    
    /**
     * @brief Performs operational tasks for the police station.
     */
    virtual void operation();
    
    /**
     * @brief Pays the maintenance cost for the building.
     * @return True if the payment was successful, false otherwise.
     */
    virtual bool payMaintenance();
    
    /**
     * @brief Receives power for the building.
     * @return True if power was received successfully, false otherwise.
     */
    virtual bool receivePower();
    
    /**
     * @brief Receives water for the building.
     * @return True if water was received successfully, false otherwise.
     */
    virtual bool receiveWater();
    
    /**
     * @brief Requests the current state of the police station.
     */
    virtual void requestState();
    
    /**
     * @brief Gets the level of security coverage provided by the police station.
     * @return Security coverage as a float.
     */
    float getSecurityCoverage();
    
    /**
     * @brief Sets the current state of the police station.
     */
    void setState();
};

#endif
