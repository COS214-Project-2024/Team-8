/**
 * @file MedicalCenter.h
 * @brief Header file for the MedicalCenter class, which inherits from PublicServiceBuilding.
 */

#include "PublicServiceBuilding.h" 
#include <string> 
using namespace std;

#ifndef MEDICALCENTER_H
#define MEDICALCENTER_H

/**
 * @class MedicalCenter
 * @brief Represents a medical center building, inheriting from PublicServiceBuilding.
 */
class MedicalCenter : PublicServiceBuilding {

protected:
    // Building details
    string buildingName;         /**< Name of the medical center */
    string buildingType;         /**< Type of the building */
    Citizen* listOfCitizens;     /**< Pointer to a list of citizens associated with the medical center */

    // Resource and maintenance requirements
    double maintenanceCost;      /**< Cost of maintenance for the medical center */
    int powerReq;                /**< Power requirement for the medical center */
    int waterReq;                /**< Water requirement for the medical center */
    int sewageCost;              /**< Cost associated with sewage maintenance for the medical center */
    int waste;                   /**< Waste generated by the medical center */
    int employment;              /**< Number of employees at the medical center */
    int healthCoverage;          /**< Health coverage provided by the medical center */

    // Resource mediator and state
    ResourceMediator* resources; /**< Resource mediator associated with the medical center */
    State* state;                /**< Current state of the medical center */

public:
    // Pure virtual functions for building operations

    /**
     * @brief Constructor for the MedicalCenter class.
     * @param bName Name of the medical center
     * @param pReq Power requirement
     * @param wReq Water requirement
     * @param mCost Maintenance cost
     * @param sCost Sewage cost
     * @param waste Waste generated
     * @param employment Number of employees
     * @param hCov Health coverage provided
     */
    MedicalCenter(string bName, int pReq, int wReq, double mCost, int sCost, int waste, int employment, int hCov);

    /**
     * @brief Cleans the sewage of the medical center.
     * @return true if successful, otherwise false
     */
    virtual bool cleanSewage();

    /**
     * @brief Cleans the waste of the medical center.
     * @return true if successful, otherwise false
     */
    virtual bool cleanWaste();

    /**
     * @brief Gets the type of the building.
     * @return A string representing the building type
     */
    virtual string getBuildingType();

    /**
     * @brief Gets the water cost for the medical center.
     * @return Water cost as an integer
     */
    virtual int getWaterCost();

    /**
     * @brief Gets the number of jobs created by the medical center.
     * @return Number of jobs created
     */
    virtual int getJobsCreated();

    /**
     * @brief Gets the maintenance cost of the medical center.
     * @return Maintenance cost as a double
     */
    virtual double getMaintenanceCost();

    /**
     * @brief Gets the name of the medical center.
     * @return Name of the medical center as a string
     */
    virtual string getName();

    /**
     * @brief Gets the power requirement of the medical center.
     * @return Power requirement as an integer
     */
    virtual int getPowerReq();

    /**
     * @brief Gets the sewage cost for the medical center.
     * @return Sewage cost as an integer
     */
    virtual int getSewageCost();

    /**
     * @brief Gets the waste cost for the medical center.
     * @return Waste cost as an integer
     */
    virtual int getWasteCost();

    /**
     * @brief Performs an operation in the medical center.
     */
    virtual void operation();

    /**
     * @brief Pays the maintenance cost of the medical center.
     * @return true if successful, otherwise false
     */
    virtual bool payMaintenance();

    /**
     * @brief Receives power for the medical center.
     * @return true if successful, otherwise false
     */
    virtual bool receivePower();

    /**
     * @brief Receives water for the medical center.
     * @return true if successful, otherwise false
     */
    virtual bool receiveWater();

    /**
     * @brief Requests the current state of the medical center.
     */
    virtual void requestState();

    /**
     * @brief Gets the health coverage provided by the medical center.
     * @return Health coverage as an integer
     */
    int getHealthCoverage();

    /**
     * @brief Sets the state of the medical center.
     */
    void setState();
};

#endif
