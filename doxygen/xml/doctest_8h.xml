<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="doctest_8h" kind="file" language="C++">
    <compoundname>doctest.h</compoundname>
    <includes local="no">signal.h</includes>
    <includedby refid="DemoMain_8cpp" local="yes">/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/DemoMain.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>signal.h</label>
      </node>
      <node id="1">
        <label>/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h</label>
        <link refid="doctest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h</label>
        <link refid="doctest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/DemoMain.cpp</label>
        <link refid="DemoMain_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classdoctest_1_1String" prot="public">doctest::String</innerclass>
    <innerclass refid="structdoctest_1_1String_1_1view" prot="private">doctest::String::view</innerclass>
    <innerclass refid="classdoctest_1_1Contains" prot="public">doctest::Contains</innerclass>
    <innerclass refid="structdoctest_1_1TestCaseData" prot="public">doctest::TestCaseData</innerclass>
    <innerclass refid="structdoctest_1_1AssertData" prot="public">doctest::AssertData</innerclass>
    <innerclass refid="classdoctest_1_1AssertData_1_1StringContains" prot="public">doctest::AssertData::StringContains</innerclass>
    <innerclass refid="structdoctest_1_1MessageData" prot="public">doctest::MessageData</innerclass>
    <innerclass refid="structdoctest_1_1SubcaseSignature" prot="public">doctest::SubcaseSignature</innerclass>
    <innerclass refid="structdoctest_1_1IContextScope" prot="public">doctest::IContextScope</innerclass>
    <innerclass refid="structdoctest_1_1ContextOptions" prot="public">doctest::ContextOptions</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1enable__if" prot="public">doctest::detail::types::enable_if</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1enable__if_3_01true_00_01T_01_4" prot="public">doctest::detail::types::enable_if&lt; true, T &gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1true__type" prot="public">doctest::detail::types::true_type</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1false__type" prot="public">doctest::detail::types::false_type</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1remove__reference" prot="public">doctest::detail::types::remove_reference</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1remove__reference_3_01T_01_6_01_4" prot="public">doctest::detail::types::remove_reference&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1remove__reference_3_01T_01_6_6_01_4" prot="public">doctest::detail::types::remove_reference&lt; T &amp;&amp; &gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1is__rvalue__reference" prot="public">doctest::detail::types::is_rvalue_reference</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1is__rvalue__reference_3_01T_01_6_6_01_4" prot="public">doctest::detail::types::is_rvalue_reference&lt; T &amp;&amp; &gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1remove__const" prot="public">doctest::detail::types::remove_const</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1remove__const_3_01const_01T_01_4" prot="public">doctest::detail::types::remove_const&lt; const T &gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1is__enum" prot="public">doctest::detail::types::is_enum</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1underlying__type" prot="public">doctest::detail::types::underlying_type</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1is__pointer" prot="public">doctest::detail::types::is_pointer</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1is__pointer_3_01T_01_5_01_4" prot="public">doctest::detail::types::is_pointer&lt; T * &gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1is__array" prot="public">doctest::detail::types::is_array</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1types_1_1is__array_3_01T_0fSIZE_0e_4" prot="public">doctest::detail::types::is_array&lt; T[SIZE]&gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1deferred__false" prot="public">doctest::detail::deferred_false</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1has__insertion__operator" prot="public">doctest::detail::has_insertion_operator</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1has__insertion__operator_3_01T_00_01decltype_07operator_3_3_07declvald5a5a279653bbfeef238ad5c984744e2" prot="public">doctest::detail::has_insertion_operator&lt; T, decltype(operator&lt;&lt;(declval&lt; std::ostream &amp; &gt;(), declval&lt; const T &amp; &gt;()), void())&gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1should__stringify__as__underlying__type" prot="public">doctest::detail::should_stringify_as_underlying_type</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1StringMakerBase" prot="public">doctest::detail::StringMakerBase</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1StringMakerBase_3_01true_01_4" prot="public">doctest::detail::StringMakerBase&lt; true &gt;</innerclass>
    <innerclass refid="structdoctest_1_1StringMaker" prot="public">doctest::StringMaker</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1filldata" prot="public">doctest::detail::filldata</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1filldata_3_01T_0fN_0e_4" prot="public">doctest::detail::filldata&lt; T[N]&gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1filldata_3_01const_01char_0fN_0e_4" prot="public">doctest::detail::filldata&lt; const char[N]&gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1filldata_3_01const_01void_01_5_01_4" prot="public">doctest::detail::filldata&lt; const void * &gt;</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1filldata_3_01T_01_5_01_4" prot="public">doctest::detail::filldata&lt; T * &gt;</innerclass>
    <innerclass refid="structdoctest_1_1Approx" prot="public">doctest::Approx</innerclass>
    <innerclass refid="structdoctest_1_1IsNaN" prot="public">doctest::IsNaN</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1TestFailureException" prot="public">doctest::detail::TestFailureException</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1Subcase" prot="public">doctest::detail::Subcase</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1Result" prot="public">doctest::detail::Result</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1ExpressionDecomposer" prot="public">doctest::detail::ExpressionDecomposer</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1TestSuite" prot="public">doctest::detail::TestSuite</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1TestCase" prot="public">doctest::detail::TestCase</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1RelationalComparator" prot="public">doctest::detail::RelationalComparator</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1ResultBuilder" prot="public">doctest::detail::ResultBuilder</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1IExceptionTranslator" prot="public">doctest::detail::IExceptionTranslator</innerclass>
    <innerclass refid="classdoctest_1_1detail_1_1ExceptionTranslator" prot="public">doctest::detail::ExceptionTranslator</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1ContextScopeBase" prot="public">doctest::detail::ContextScopeBase</innerclass>
    <innerclass refid="classdoctest_1_1detail_1_1ContextScope" prot="public">doctest::detail::ContextScope</innerclass>
    <innerclass refid="structdoctest_1_1detail_1_1MessageBuilder" prot="public">doctest::detail::MessageBuilder</innerclass>
    <innerclass refid="classdoctest_1_1Context" prot="public">doctest::Context</innerclass>
    <innerclass refid="structdoctest_1_1CurrentTestCaseStats" prot="public">doctest::CurrentTestCaseStats</innerclass>
    <innerclass refid="structdoctest_1_1TestCaseException" prot="public">doctest::TestCaseException</innerclass>
    <innerclass refid="structdoctest_1_1TestRunStats" prot="public">doctest::TestRunStats</innerclass>
    <innerclass refid="structdoctest_1_1QueryData" prot="public">doctest::QueryData</innerclass>
    <innerclass refid="structdoctest_1_1IReporter" prot="public">doctest::IReporter</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
    <innernamespace refid="namespacedoctest">doctest</innernamespace>
    <innernamespace refid="namespacedoctest_1_1Color">doctest::Color</innernamespace>
    <innernamespace refid="namespacedoctest_1_1assertType">doctest::assertType</innernamespace>
    <innernamespace refid="namespacedoctest_1_1detail">doctest::detail</innernamespace>
    <innernamespace refid="namespacedoctest_1_1detail_1_1types">doctest::detail::types</innernamespace>
    <innernamespace refid="namespacedoctest_1_1detail_1_1binaryAssertComparison">doctest::detail::binaryAssertComparison</innernamespace>
    <innernamespace refid="namespacedoctest_1_1detail_1_1assertAction">doctest::detail::assertAction</innernamespace>
    <innernamespace refid="namespacedoctest__detail__test__suite__ns">doctest_detail_test_suite_ns</innernamespace>
    <innernamespace refid="namespacedoctest_1_1TestCaseFailureReason">doctest::TestCaseFailureReason</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="doctest_8h_1abdf99655d65d9241c5d7c9f2d06e5e30" prot="public" static="no">
        <name>DOCTEST_VERSION_MAJOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="49" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a70d4541211eec8116bdedd0e210b1e14" prot="public" static="no">
        <name>DOCTEST_VERSION_MINOR</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="50" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a38cca3b310e7460ee3da69d6a18989e9" prot="public" static="no">
        <name>DOCTEST_VERSION_PATCH</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="51" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a13cc455313165e0ba57d07849d8926c6" prot="public" static="no">
        <name>DOCTEST_TOSTR_IMPL</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="54" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa928e63972e4bc49fcf27641202f2f38" prot="public" static="no">
        <name>DOCTEST_TOSTR</name>
        <param><defname>x</defname></param>
        <initializer>DOCTEST_TOSTR_IMPL(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="55" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a253eba2b38340341a13e1111d66b2e83" prot="public" static="no">
        <name>DOCTEST_VERSION_STR</name>
        <initializer>    DOCTEST_TOSTR(DOCTEST_VERSION_MAJOR) &quot;.&quot;                                                       \
    DOCTEST_TOSTR(DOCTEST_VERSION_MINOR) &quot;.&quot;                                                       \
    DOCTEST_TOSTR(DOCTEST_VERSION_PATCH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="57" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a6402112d77ca243a4052cac07a383d78" prot="public" static="no">
        <name>DOCTEST_VERSION</name>
        <initializer>    (DOCTEST_VERSION_MAJOR * 10000 + DOCTEST_VERSION_MINOR * 100 + DOCTEST_VERSION_PATCH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="62" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a08215680b28a710ff8d74233176166a0" prot="public" static="no">
        <name>DOCTEST_CPLUSPLUS</name>
        <initializer>__cplusplus</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="74" column="10" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a04223c76a58ee7c4f865afb6d57d048f" prot="public" static="no">
        <name>DOCTEST_COMPILER</name>
        <param><defname>MAJOR</defname></param>
        <param><defname>MINOR</defname></param>
        <param><defname>PATCH</defname></param>
        <initializer>((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="77" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac15060779a07a8f5ffc6af7543283a6a" prot="public" static="no">
        <name>DOCTEST_MSVC</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="99" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa8185dcb93ad97061498679342d1e683" prot="public" static="no">
        <name>DOCTEST_CLANG</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="102" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a219d4642ee4e9c1bfc047a3a785db450" prot="public" static="no">
        <name>DOCTEST_GCC</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="105" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afeba86b09ef84ba9f239a21aa91e393c" prot="public" static="no">
        <name>DOCTEST_ICC</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="108" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a628491cf2971a026350d5401986bf6d3" prot="public" static="no">
        <name>DOCTEST_CLANG_SUPPRESS_WARNING_PUSH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="123" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c" prot="public" static="no">
        <name>DOCTEST_CLANG_SUPPRESS_WARNING</name>
        <param><defname>w</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="124" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4" prot="public" static="no">
        <name>DOCTEST_CLANG_SUPPRESS_WARNING_POP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="125" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aeffeb8afb2053d165c856f4ee520b62b" prot="public" static="no">
        <name>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH</name>
        <param><defname>w</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="126" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8015d10af2883db80a955ce0d523886d" prot="public" static="no">
        <name>DOCTEST_GCC_SUPPRESS_WARNING_PUSH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="137" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983" prot="public" static="no">
        <name>DOCTEST_GCC_SUPPRESS_WARNING</name>
        <param><defname>w</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="138" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a656f7b58766e5e82f1799da962ebc17c" prot="public" static="no">
        <name>DOCTEST_GCC_SUPPRESS_WARNING_POP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="139" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a93a351e10b8ce997502f34e89a755b6e" prot="public" static="no">
        <name>DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH</name>
        <param><defname>w</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="140" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aec6d713a9dde361b8e68afe78c5bf3cf" prot="public" static="no">
        <name>DOCTEST_MSVC_SUPPRESS_WARNING_PUSH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="150" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88" prot="public" static="no">
        <name>DOCTEST_MSVC_SUPPRESS_WARNING</name>
        <param><defname>w</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="151" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a540e6314c4b71317f3459f0117e14bc8" prot="public" static="no">
        <name>DOCTEST_MSVC_SUPPRESS_WARNING_POP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="152" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a2199aafb8016ab6daca23c2cc6170428" prot="public" static="no">
        <name>DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH</name>
        <param><defname>w</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="153" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aaa68efffb0caa0ca168f1caecaba0f55" prot="public" static="no">
        <name>DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="162" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a2484e01b68cc6e0fd707064a36b4be14" prot="public" static="no">
        <name>DOCTEST_SUPPRESS_COMMON_WARNINGS_POP</name>
        <initializer>    DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                             \
    DOCTEST_GCC_SUPPRESS_WARNING_POP                                                               \
    DOCTEST_MSVC_SUPPRESS_WARNING_POP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="209" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad3e5c37dc8bd7b0f9346c99c6aab2d1d" prot="public" static="no">
        <name>DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN</name>
        <initializer>    DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \
    DOCTEST_MSVC_SUPPRESS_WARNING(4548) /* before comma no effect; expected side - effect */       \
    DOCTEST_MSVC_SUPPRESS_WARNING(4265) /* virtual functions, but destructor is not virtual */     \
    DOCTEST_MSVC_SUPPRESS_WARNING(4986) /* exception specification does not match previous */      \
    DOCTEST_MSVC_SUPPRESS_WARNING(4350) /* &apos;member1&apos; called instead of &apos;member2&apos; */                \
    DOCTEST_MSVC_SUPPRESS_WARNING(4668) /* not defined as a preprocessor macro */                  \
    DOCTEST_MSVC_SUPPRESS_WARNING(4365) /* signed/unsigned mismatch */                             \
    DOCTEST_MSVC_SUPPRESS_WARNING(4774) /* format string not a string literal */                   \
    DOCTEST_MSVC_SUPPRESS_WARNING(4820) /* padding */                                              \
    DOCTEST_MSVC_SUPPRESS_WARNING(4625) /* copy constructor was implicitly deleted */              \
    DOCTEST_MSVC_SUPPRESS_WARNING(4626) /* assignment operator was implicitly deleted */           \
    DOCTEST_MSVC_SUPPRESS_WARNING(5027) /* move assignment operator implicitly deleted */          \
    DOCTEST_MSVC_SUPPRESS_WARNING(5026) /* move constructor was implicitly deleted */              \
    DOCTEST_MSVC_SUPPRESS_WARNING(4623) /* default constructor was implicitly deleted */           \
    DOCTEST_MSVC_SUPPRESS_WARNING(5039) /* pointer to pot. throwing function passed to extern C */ \
    DOCTEST_MSVC_SUPPRESS_WARNING(5045) /* Spectre mitigation for memory load */                   \
    DOCTEST_MSVC_SUPPRESS_WARNING(5105) /* macro producing &apos;defined&apos; has undefined behavior */     \
    DOCTEST_MSVC_SUPPRESS_WARNING(4738) /* storing float result in memory, loss of performance */  \
    DOCTEST_MSVC_SUPPRESS_WARNING(5262) /* implicit fall-through */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="228" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1acca96650713994a51c3deb8e4bdec43d" prot="public" static="no">
        <name>DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END</name>
        <initializer>DOCTEST_MSVC_SUPPRESS_WARNING_POP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="249" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a03d1f35ae32484c0778dc0130e41de35" prot="public" static="no">
        <name>DOCTEST_CONFIG_POSIX_SIGNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="283" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8d99d050db88cb183c1d02bba4e798b0" prot="public" static="no">
        <name>DOCTEST_CONFIG_NO_EXCEPTIONS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="292" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a631e7295c7abd3a071464fae6be07250" prot="public" static="no">
        <name>DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="303" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a73d94c36ae63bc0a9e3ec982e38fd7b7" prot="public" static="no">
        <name>DOCTEST_SYMBOL_EXPORT</name>
        <initializer>__attribute__((visibility(&quot;default&quot;)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="323" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4fd9f1ce2de2fad78a45972c2ee216d4" prot="public" static="no">
        <name>DOCTEST_SYMBOL_IMPORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="324" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5" prot="public" static="no">
        <name>DOCTEST_INTERFACE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="334" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a423c7e3dc94b0f49db2d45be8c65c921" prot="public" static="no">
        <name>DOCTEST_INTERFACE_DECL</name>
        <initializer>DOCTEST_INTERFACE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="343" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad3b64ecd309457f7f06c5240b9619ee4" prot="public" static="no">
        <name>DOCTEST_INTERFACE_DEF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="344" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab46a6d1a6d00f0bda5fcf8b93966a20a" prot="public" static="no">
        <name>DOCTEST_EMPTY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="347" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a47e9d3609dfcc90b9a630ff33b9524d6" prot="public" static="no">
        <name>DOCTEST_NOINLINE</name>
        <initializer>__attribute__((noinline))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="358" column="10"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a478c7f3eb127a7edbcc8577154deebba" prot="public" static="no">
        <name>DOCTEST_UNUSED</name>
        <initializer>__attribute__((unused))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="359" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a74415dda5235fab1484227e6e6d8e7f4" prot="public" static="no">
        <name>DOCTEST_ALIGNMENT</name>
        <param><defname>x</defname></param>
        <initializer>__attribute__((aligned(x)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="360" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a747b5dff90ae60f6f1636ebbe065a9da" prot="public" static="no">
        <name>DOCTEST_INLINE_NOINLINE</name>
        <initializer>inline DOCTEST_NOINLINE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="366" column="10"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4ef00bd4c0653f31a2e60e5e5f2fcf10" prot="public" static="no">
        <name>DOCTEST_NORETURN</name>
        <initializer>[[noreturn]]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="373" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0a3c492342c533baad7b21af7903e6b4" prot="public" static="no">
        <name>DOCTEST_NOEXCEPT</name>
        <initializer>noexcept</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="381" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab684ad408ff2382098779e3cd58bd549" prot="public" static="no">
        <name>DOCTEST_CONSTEXPR</name>
        <initializer>constexpr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="390" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aee641471649bcbf309630a54063b4e0d" prot="public" static="no">
        <name>DOCTEST_CONSTEXPR_FUNC</name>
        <initializer>constexpr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="391" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1abfa9e97ae5aee0082afcc462c62cb36a" prot="public" static="no">
        <name>DOCTEST_NO_SANITIZE_INTEGER</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="399" column="10"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa8cf27df6766dc9d9f1b8b990203c265" prot="public" static="no">
        <name>DOCTEST_DECLARE_INTERFACE</name>
        <param><defname>name</defname></param>
        <initializer>    virtual ~name();                                                                               \
    name() = default;                                                                              \
    name(const name&amp;) = delete;                                                                    \
    name(name&amp;&amp;) = delete;                                                                         \
    name&amp; operator=(const name&amp;) = delete;                                                         \
    name&amp; operator=(name&amp;&amp;) = delete;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="407" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4a76c2cf20cc8c6a5fb4ce3c3689a104" prot="public" static="no">
        <name>DOCTEST_DEFINE_INTERFACE</name>
        <param><defname>name</defname></param>
        <initializer>    name::~name() = default;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="415" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a3e1308af156afd15b2abde1ebe778421" prot="public" static="no">
        <name>DOCTEST_CAT_IMPL</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>s1##s2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="419" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa13d3659f8aef0e4de7eab8eb5a70888" prot="public" static="no">
        <name>DOCTEST_CAT</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>DOCTEST_CAT_IMPL(s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="420" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac2799231daab4b10ca221f997ef94981" prot="public" static="no">
        <name>DOCTEST_ANONYMOUS</name>
        <param><defname>x</defname></param>
        <initializer>DOCTEST_CAT(x, __LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="424" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb" prot="public" static="no">
        <name>DOCTEST_REF_WRAP</name>
        <param><defname>x</defname></param>
        <initializer>x&amp;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="428" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab406f77503c1d83ed403a310ccc1cd15" prot="public" static="no">
        <name>DOCTEST_PLATFORM_LINUX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="443" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a14d41f3ce8df5419a66ac0c8bdf33b0d" prot="public" static="no">
        <name>DOCTEST_GLOBAL_NO_WARNINGS</name>
        <param><defname>var</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wglobal-constructors&quot;)                                \
    static const int var = doctest::detail::consume(&amp;var, __VA_ARGS__);                              \
    DOCTEST_CLANG_SUPPRESS_WARNING_POP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="450" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a156f7857b0e423d51c56ea8398d0cb94" prot="public" static="no">
        <name>DOCTEST_BREAK_INTO_DEBUGGER</name>
        <param></param>
        <initializer>raise(SIGTRAP)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="463" column="11" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa32aa864d1d9c8d04ec8b27a202f679a" prot="public" static="no">
        <name>DOCTEST_CONFIG_STRING_SIZE_TYPE</name>
        <initializer>unsigned</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="565" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0feffec655cbb5c12c8c9ddfcfd31b21" prot="public" static="no">
        <name>DOCTEST_STRINGIFY</name>
        <param><defname>...</defname></param>
        <initializer>toString(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1088" column="10" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="1088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad668a8259af64e2e74d56358fd57253a" prot="public" static="no">
        <name>SFINAE_OP</name>
        <param><defname>ret</defname></param>
        <param><defname>op</defname></param>
        <initializer>decltype((void)(doctest::detail::declval&lt;L&gt;() op doctest::detail::declval&lt;R&gt;()),ret{})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1370" column="10" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="1370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a924a81d1115ba1ad170b51800e46d3cf" prot="public" static="no">
        <name>DOCTEST_DO_BINARY_EXPRESSION_COMPARISON</name>
        <param><defname>op</defname></param>
        <param><defname>op_str</defname></param>
        <param><defname>op_macro</defname></param>
        <initializer>    template &lt;typename R&gt;                                                                          \
    DOCTEST_NOINLINE SFINAE_OP(Result,op) operator op(R&amp;&amp; rhs) {                                   \
    bool res = op_macro(doctest::detail::forward&lt;const L&gt;(lhs), doctest::detail::forward&lt;R&gt;(rhs)); \
        if(m_at &amp; assertType::is_false)                                                            \
            res = !res;                                                                            \
        if(!res || doctest::getContextOptions()-&gt;success)                                          \
            return Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \
        return Result(res);                                                                        \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1373" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="1373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8" prot="public" static="no">
        <name>DOCTEST_FORBIT_EXPRESSION</name>
        <param><defname>rt</defname></param>
        <param><defname>op</defname></param>
        <initializer>    template &lt;typename R&gt;                                                                          \
    rt&amp; operator op(const R&amp;) {                                                                    \
        static_assert(deferred_false&lt;R&gt;::value,                                                    \
                      &quot;Expression Too Complex Please Rewrite As Binary Comparison!&quot;);              \
        return *this;                                                                              \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1387" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="1387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4a746a6cb24ff5b89c7b9a86a20335e8" prot="public" static="no">
        <name>DOCTEST_COMPARISON_RETURN_TYPE</name>
        <initializer>bool</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1455" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a2fb9073f4525cca30d5a8bb5d32f62c4" prot="public" static="no">
        <name>DOCTEST_RELATIONAL_OP</name>
        <param><defname>name</defname></param>
        <param><defname>op</defname></param>
        <initializer>    template &lt;typename L, typename R&gt;                                                              \
    DOCTEST_COMPARISON_RETURN_TYPE name(const DOCTEST_REF_WRAP(L) lhs,                             \
                                        const DOCTEST_REF_WRAP(R) rhs) {                           \
        return lhs op rhs;                                                                         \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1467" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1affded31d2dc937d95785e3d17332765b" prot="public" static="no">
        <name>DOCTEST_CMP_EQ</name>
        <param><defname>l</defname></param>
        <param><defname>r</defname></param>
        <initializer>l == r</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1482" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4848f1d467fb5ef1dae4f31d56b8760a" prot="public" static="no">
        <name>DOCTEST_CMP_NE</name>
        <param><defname>l</defname></param>
        <param><defname>r</defname></param>
        <initializer>l != r</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1483" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a6cd6ec78f910453372adbdca54d28e96" prot="public" static="no">
        <name>DOCTEST_CMP_GT</name>
        <param><defname>l</defname></param>
        <param><defname>r</defname></param>
        <initializer>l &gt; r</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1484" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad17ac1cc3242c45a461b1364c13cde55" prot="public" static="no">
        <name>DOCTEST_CMP_LT</name>
        <param><defname>l</defname></param>
        <param><defname>r</defname></param>
        <initializer>l &lt; r</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1485" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8d05cc6960a068bd84bc215d98112973" prot="public" static="no">
        <name>DOCTEST_CMP_GE</name>
        <param><defname>l</defname></param>
        <param><defname>r</defname></param>
        <initializer>l &gt;= r</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1486" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a324adcbcbb7e31481c2f619a5a0d5a56" prot="public" static="no">
        <name>DOCTEST_CMP_LE</name>
        <param><defname>l</defname></param>
        <param><defname>r</defname></param>
        <initializer>l &lt;= r</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1487" column="9"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a709ccd44cac02b9af890e6e1880e406e" prot="public" static="no">
        <name>DOCTEST_BINARY_RELATIONAL_OP</name>
        <param><defname>n</defname></param>
        <param><defname>op</defname></param>
        <initializer>    template &lt;class L, class R&gt; struct RelationalComparator&lt;n, L, R&gt; { bool operator()(const DOCTEST_REF_WRAP(L) lhs, const DOCTEST_REF_WRAP(R) rhs) const { return op(lhs, rhs); } };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1670" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="1670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab4f2e4a4e2bbb1ea221db5cdf117a014" prot="public" static="no">
        <name>DOCTEST_ASSERT_OUT_OF_TESTS</name>
        <param><defname>decomp</defname></param>
        <initializer>    do {                                                                                           \
        if(!is_running_in_test) {                                                                  \
            if(failed) {                                                                           \
                ResultBuilder rb(at, file, line, expr);                                            \
                rb.m_failed = failed;                                                              \
                rb.m_decomp = decomp;                                                              \
                failed_out_of_a_testing_context(rb);                                               \
                if(isDebuggerActive() &amp;&amp; !getContextOptions()-&gt;no_breaks)                          \
                    DOCTEST_BREAK_INTO_DEBUGGER();                                                 \
                if(checkIfShouldThrow(at))                                                         \
                    throwException();                                                              \
            }                                                                                      \
            return !failed;                                                                        \
        }                                                                                          \
    } while(false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1736" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="1736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a91330bd2fb42d1fac4aa07e425a20f2e" prot="public" static="no">
        <name>DOCTEST_ASSERT_IN_TESTS</name>
        <param><defname>decomp</defname></param>
        <initializer>    ResultBuilder rb(at, file, line, expr);                                                        \
    rb.m_failed = failed;                                                                          \
    if(rb.m_failed || getContextOptions()-&gt;success)                                                \
        rb.m_decomp = decomp;                                                                      \
    if(rb.log())                                                                                   \
        DOCTEST_BREAK_INTO_DEBUGGER();                                                             \
    if(rb.m_failed &amp;&amp; checkIfShouldThrow(at))                                                      \
    throwException()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1753" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="1753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a70e5d466aeb2ec395124cd6366b08499" prot="public" static="no">
        <name>DOCTEST_DEFINE_DECORATOR</name>
        <param><defname>name</defname></param>
        <param><defname>type</defname></param>
        <param><defname>def</defname></param>
        <initializer>    struct name                                                                                    \
    {                                                                                              \
        type data;                                                                                 \
        name(type in = def)                                                                        \
                : data(in) {}                                                                      \
        void fill(detail::TestCase&amp; state) const { state.DOCTEST_CAT(m_, name) = data; }           \
        void fill(detail::TestSuite&amp; state) const { state.DOCTEST_CAT(m_, name) = data; }          \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="1914" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="1914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a603780e42501c6ff0b473441bad15d6b" prot="public" static="no">
        <name>DOCTEST_FUNC_EMPTY</name>
        <initializer>(void)0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2119" column="10" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a47607a8545f31ff4f31cfd2dead9968e" prot="public" static="no">
        <name>DOCTEST_FUNC_SCOPE_BEGIN</name>
        <initializer>do</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2130" column="10" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8fa2d7abcfac78747644c15be723034e" prot="public" static="no">
        <name>DOCTEST_FUNC_SCOPE_END</name>
        <initializer>while(false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2131" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a2a64a0481632aae40da8b582fa71434d" prot="public" static="no">
        <name>DOCTEST_FUNC_SCOPE_RET</name>
        <param><defname>v</defname></param>
        <initializer>(void)0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2132" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad31c2aa879e58c92080f1b6c180bd029" prot="public" static="no">
        <name>DOCTEST_ASSERT_LOG_REACT_RETURN</name>
        <param><defname>b</defname></param>
        <initializer>    if(b.log()) DOCTEST_BREAK_INTO_DEBUGGER();                                                     \
    b.react();                                                                                     \
    DOCTEST_FUNC_SCOPE_RET(!b.m_failed)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2136" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1a2d400bbc1f72aa743406f7cf3c82d2" prot="public" static="no">
        <name>DOCTEST_WRAP_IN_TRY</name>
        <param><defname>x</defname></param>
        <initializer>x;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2142" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a70f4ca15fe554a44bb0e2b8109e45822" prot="public" static="no">
        <name>DOCTEST_CAST_TO_VOID</name>
        <param><defname>...</defname></param>
        <initializer>__VA_ARGS__;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2156" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4013e1a0072df7e0451eea33cabd543b" prot="public" static="no">
        <name>DOCTEST_REGISTER_FUNCTION</name>
        <param><defname>global_prefix</defname></param>
        <param><defname>f</defname></param>
        <param><defname>decorators</defname></param>
        <initializer>    global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), /* NOLINT */    \
            doctest::detail::regTest(                                                              \
                    <ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">doctest::detail::TestCase</ref>(                                                     \
                            f, __FILE__, __LINE__,                                                 \
                            doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \
                    decorators))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2160" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa8af5c48ea69801e9405f3c126535ced" prot="public" static="no">
        <name>DOCTEST_IMPLEMENT_FIXTURE</name>
        <param><defname>der</defname></param>
        <param><defname>base</defname></param>
        <param><defname>func</defname></param>
        <param><defname>decorators</defname></param>
        <initializer>    namespace { /* NOLINT */                                                                       \
        struct der : public base                                                                   \
        {                                                                                          \
            void f();                                                                              \
        };                                                                                         \
        static DOCTEST_INLINE_NOINLINE void func() {                                               \
            der v;                                                                                 \
            v.f();                                                                                 \
        }                                                                                          \
        DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, func, decorators)                                 \
    }                                                                                              \
    DOCTEST_INLINE_NOINLINE void der::f()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2168" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1acc08da2add47137024ca50062129be4b" prot="public" static="no">
        <name>DOCTEST_CREATE_AND_REGISTER_FUNCTION</name>
        <param><defname>f</defname></param>
        <param><defname>decorators</defname></param>
        <initializer>    static void f();                                                                               \
    DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators)                                        \
    static void f()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2182" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4e084d2cf8ff31bcd011a8291a3d2afd" prot="public" static="no">
        <name>DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS</name>
        <param><defname>f</defname></param>
        <param><defname>proxy</defname></param>
        <param><defname>decorators</defname></param>
        <initializer>    static doctest::detail::funcType proxy() { return f; }                                         \
    DOCTEST_REGISTER_FUNCTION(inline, proxy(), decorators)                                         \
    static void f()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2187" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac1216c5a9ba44f5af8b7115a3badaae2" prot="public" static="no">
        <name>DOCTEST_TEST_CASE</name>
        <param><defname>decorators</defname></param>
        <initializer>    DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2193" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a41431265482f363020f93a13e4af4c6a" prot="public" static="no">
        <name>DOCTEST_TEST_CASE_CLASS</name>
        <param><defname>...</defname></param>
        <initializer>    TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2203" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a22130c0eff96eac3ed682b7d8854e0f6" prot="public" static="no">
        <name>DOCTEST_TEST_CASE_FIXTURE</name>
        <param><defname>c</defname></param>
        <param><defname>decorators</defname></param>
        <initializer>    DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), c,                           \
                              DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2208" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a627358c438261595ea89911683ff367c" prot="public" static="no">
        <name>DOCTEST_TYPE_TO_STRING_AS</name>
        <param><defname>str</defname></param>
        <param><defname>...</defname></param>
        <initializer>    namespace doctest {                                                                            \
        template &lt;&gt;                                                                                \
        inline String toString&lt;__VA_ARGS__&gt;() {                                                    \
            return str;                                                                            \
        }                                                                                          \
    }                                                                                              \
    static_assert(true, &quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2213" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a568e1d22f39724c8d3eb8addf4bf8e72" prot="public" static="no">
        <name>DOCTEST_TYPE_TO_STRING</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_TYPE_TO_STRING_AS(#__VA_ARGS__, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2222" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1e7dceba02e92851f643bb02f1d11323" prot="public" static="no">
        <name>DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL</name>
        <param><defname>dec</defname></param>
        <param><defname>T</defname></param>
        <param><defname>iter</defname></param>
        <param><defname>func</defname></param>
        <initializer>    template &lt;typename T&gt;                                                                          \
    static void func();                                                                            \
    namespace { /* NOLINT */                                                                       \
        template &lt;typename Tuple&gt;                                                                  \
        struct iter;                                                                               \
        template &lt;typename Type, typename... Rest&gt;                                                 \
        struct iter&lt;<ref refid="classstd_1_1tuple" kindref="compound">std::tuple</ref>&lt;Type, Rest...&gt;&gt;                                                     \
        {                                                                                          \
            iter(const char* file, unsigned line, int index) {                                     \
                doctest::detail::regTest(<ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">doctest::detail::TestCase</ref>(func&lt;Type&gt;, file, line,         \
                                            doctest_detail_test_suite_ns::getCurrentTestSuite(),   \
                                            doctest::toString&lt;Type&gt;(),                             \
                                            int(line) * 1000 + index)                              \
                                         * dec);                                                   \
                iter&lt;<ref refid="classstd_1_1tuple" kindref="compound">std::tuple</ref>&lt;Rest...&gt;&gt;(file, line, index + 1);                                  \
            }                                                                                      \
        };                                                                                         \
        template &lt;&gt;                                                                                \
        struct iter&lt;<ref refid="classstd_1_1tuple" kindref="compound">std::tuple</ref>&lt;&gt;&gt;                                                                  \
        {                                                                                          \
            iter(const char*, unsigned, int) {}                                                    \
        };                                                                                         \
    }                                                                                              \
    template &lt;typename T&gt;                                                                          \
    static void func()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2224" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a7c264a83f95bfae9a0e5d86c9d4c8fe3" prot="public" static="no">
        <name>DOCTEST_TEST_CASE_TEMPLATE_DEFINE</name>
        <param><defname>dec</defname></param>
        <param><defname>T</defname></param>
        <param><defname>id</defname></param>
        <initializer>    DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(id, ITERATOR),                      \
                                           DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2251" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1adbeb741905468853f543135077e78a91" prot="public" static="no">
        <name>DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL</name>
        <param><defname>id</defname></param>
        <param><defname>anon</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon, DUMMY), /* NOLINT(cert-err58-cpp, fuchsia-statically-constructed-objects) */ \
        doctest::detail::instantiationHelper(                                                      \
            DOCTEST_CAT(id, ITERATOR)&lt;__VA_ARGS__&gt;(__FILE__, __LINE__, 0)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2255" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac36f9261802a5321792358196104f4e6" prot="public" static="no">
        <name>DOCTEST_TEST_CASE_TEMPLATE_INVOKE</name>
        <param><defname>id</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), <ref refid="classstd_1_1tuple" kindref="compound">std::tuple</ref>&lt;__VA_ARGS__&gt;) \
    static_assert(true, &quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2260" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8722d97b6087d098bbd796801a347767" prot="public" static="no">
        <name>DOCTEST_TEST_CASE_TEMPLATE_APPLY</name>
        <param><defname>id</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__) \
    static_assert(true, &quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2264" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8c38d979f3976eef812acf150d1d13bd" prot="public" static="no">
        <name>DOCTEST_TEST_CASE_TEMPLATE_IMPL</name>
        <param><defname>dec</defname></param>
        <param><defname>T</defname></param>
        <param><defname>anon</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(anon, ITERATOR), anon);             \
    DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon, anon, <ref refid="classstd_1_1tuple" kindref="compound">std::tuple</ref>&lt;__VA_ARGS__&gt;)               \
    template &lt;typename T&gt;                                                                          \
    static void anon()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2268" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab84667702ff8411d0444261796972374" prot="public" static="no">
        <name>DOCTEST_TEST_CASE_TEMPLATE</name>
        <param><defname>dec</defname></param>
        <param><defname>T</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2274" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a5acad2b6cef499ee884b8027ef41fbf6" prot="public" static="no">
        <name>DOCTEST_SUBCASE</name>
        <param><defname>name</defname></param>
        <initializer>    if(const <ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">doctest::detail::Subcase</ref> &amp; DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED =  \
               <ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">doctest::detail::Subcase</ref>(name, __FILE__, __LINE__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2278" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a5440333d43133ec8d0206bfcfbbe84ca" prot="public" static="no">
        <name>DOCTEST_TEST_SUITE_IMPL</name>
        <param><defname>decorators</defname></param>
        <param><defname>ns_name</defname></param>
        <initializer>    namespace ns_name { namespace doctest_detail_test_suite_ns {                                   \
            static DOCTEST_NOINLINE <ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">doctest::detail::TestSuite</ref>&amp; getCurrentTestSuite() noexcept {   \
                DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \
                DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wexit-time-destructors&quot;)                \
                DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wmissing-field-initializers&quot;)             \
                static <ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">doctest::detail::TestSuite</ref> data{};                                          \
                static bool                       inited = false;                                  \
                DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \
                DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \
                DOCTEST_GCC_SUPPRESS_WARNING_POP                                                   \
                if(!inited) {                                                                      \
                    data* decorators;                                                              \
                    inited = true;                                                                 \
                }                                                                                  \
                return data;                                                                       \
            }                                                                                      \
        }                                                                                          \
    }                                                                                              \
    namespace ns_name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2283" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa64ce392f41c8ba1d22cfb5b83847f55" prot="public" static="no">
        <name>DOCTEST_TEST_SUITE</name>
        <param><defname>decorators</defname></param>
        <initializer>    DOCTEST_TEST_SUITE_IMPL(decorators, DOCTEST_ANONYMOUS(DOCTEST_ANON_SUITE_))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2304" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a64f9649162581c1c24a78e65cf01492f" prot="public" static="no">
        <name>DOCTEST_TEST_SUITE_BEGIN</name>
        <param><defname>decorators</defname></param>
        <initializer>    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), /* NOLINT(cert-err58-cpp) */  \
            doctest::detail::setTestSuite(<ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">doctest::detail::TestSuite</ref>() * decorators))              \
    static_assert(true, &quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2308" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a3ca1fc8ae12659768e3226db19a2c7ee" prot="public" static="no">
        <name>DOCTEST_TEST_SUITE_END</name>
        <initializer>    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), /* NOLINT(cert-err58-cpp) */  \
            doctest::detail::setTestSuite(<ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">doctest::detail::TestSuite</ref>() * &quot;&quot;))                      \
    using DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2314" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2314" bodyend="-1" declfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" declline="3075" declcolumn="1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1462272403885d4f5749449535a7897e" prot="public" static="no">
        <name>DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL</name>
        <param><defname>translatorName</defname></param>
        <param><defname>signature</defname></param>
        <initializer>    inline <ref refid="classdoctest_1_1String" kindref="compound">doctest::String</ref> translatorName(signature);                                              \
    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_), /* NOLINT(cert-err58-cpp) */ \
            doctest::registerExceptionTranslator(translatorName))                                  \
    <ref refid="classdoctest_1_1String" kindref="compound">doctest::String</ref> translatorName(signature)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2320" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac61710def0b8698d89bce297532d0017" prot="public" static="no">
        <name>DOCTEST_REGISTER_EXCEPTION_TRANSLATOR</name>
        <param><defname>signature</defname></param>
        <initializer>    DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_),        \
                                               signature)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2326" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a97757bf089f108cf8842727213bf3299" prot="public" static="no">
        <name>DOCTEST_REGISTER_REPORTER</name>
        <param><defname>name</defname></param>
        <param><defname>priority</defname></param>
        <param><defname>reporter</defname></param>
        <initializer>    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), /* NOLINT(cert-err58-cpp) */ \
            doctest::registerReporter&lt;reporter&gt;(name, priority, true))                             \
    static_assert(true, &quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2331" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a03161a703cc44e07384c4a0981a13c86" prot="public" static="no">
        <name>DOCTEST_REGISTER_LISTENER</name>
        <param><defname>name</defname></param>
        <param><defname>priority</defname></param>
        <param><defname>reporter</defname></param>
        <initializer>    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), /* NOLINT(cert-err58-cpp) */ \
            doctest::registerReporter&lt;reporter&gt;(name, priority, false))                            \
    static_assert(true, &quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2337" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1abaa42cd51b4d27384c51ef5d957b888a" prot="public" static="no">
        <name>DOCTEST_INFO</name>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_),                                         \
                      DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_OTHER_),                                   \
                      __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2344" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8276ab10adaeea48c75edebac611e763" prot="public" static="no">
        <name>DOCTEST_INFO_IMPL</name>
        <param><defname>mb_name</defname></param>
        <param><defname>s_name</defname></param>
        <param><defname>...</defname></param>
        <initializer>    auto DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_) = doctest::detail::MakeContextScope(                  \
        [&amp;](<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>* s_name) {                                                                \
        <ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">doctest::detail::MessageBuilder</ref> mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \
        mb_name.m_stream = s_name;                                                                 \
        mb_name * __VA_ARGS__;                                                                     \
    })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2350" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a5a8ade28d558f5fcb66f8493d0596e6c" prot="public" static="no">
        <name>DOCTEST_CAPTURE</name>
        <param><defname>x</defname></param>
        <initializer>DOCTEST_INFO(#x &quot; := &quot;, x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2358" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab70c0e91885a1f48ff582a67b61f6771" prot="public" static="no">
        <name>DOCTEST_ADD_AT_IMPL</name>
        <param><defname>type</defname></param>
        <param><defname>file</defname></param>
        <param><defname>line</defname></param>
        <param><defname>mb</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        <ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">doctest::detail::MessageBuilder</ref> mb(file, line, doctest::assertType::type);                 \
        mb * __VA_ARGS__;                                                                          \
        if(mb.log())                                                                               \
            DOCTEST_BREAK_INTO_DEBUGGER();                                                         \
        mb.react();                                                                                \
    } DOCTEST_FUNC_SCOPE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2360" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac89750ba2aa929667cd6c813dc5d0b0e" prot="public" static="no">
        <name>DOCTEST_ADD_MESSAGE_AT</name>
        <param><defname>file</defname></param>
        <param><defname>line</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ADD_AT_IMPL(is_warn, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2370" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a903e2a8556f8177e0015df1425a47de0" prot="public" static="no">
        <name>DOCTEST_ADD_FAIL_CHECK_AT</name>
        <param><defname>file</defname></param>
        <param><defname>line</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ADD_AT_IMPL(is_check, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2371" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab9997c8323295559d5bd9275a59d3873" prot="public" static="no">
        <name>DOCTEST_ADD_FAIL_AT</name>
        <param><defname>file</defname></param>
        <param><defname>line</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ADD_AT_IMPL(is_require, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2372" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afa3b17d470c8d4714f35ca30a563353d" prot="public" static="no">
        <name>DOCTEST_MESSAGE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ADD_MESSAGE_AT(__FILE__, __LINE__, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2375" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a90bd92692a93b4e8c7c32e91d5078212" prot="public" static="no">
        <name>DOCTEST_FAIL_CHECK</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ADD_FAIL_CHECK_AT(__FILE__, __LINE__, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2376" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a992b3865a0604856760b211fa5ba57c9" prot="public" static="no">
        <name>DOCTEST_FAIL</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ADD_FAIL_AT(__FILE__, __LINE__, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2377" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a474989d096480fd5c52ca9f346cdd23c" prot="public" static="no">
        <name>DOCTEST_TO_LVALUE</name>
        <param><defname>...</defname></param>
        <initializer>__VA_ARGS__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2379" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ae0ef8a67578eac1dcda25d35d11df981" prot="public" static="no">
        <name>DOCTEST_ASSERT_IMPLEMENT_2</name>
        <param><defname>assert_type</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Woverloaded-shift-op-parentheses&quot;)                  \
    /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */                                  \
    <ref refid="structdoctest_1_1detail_1_1ResultBuilder" kindref="compound">doctest::detail::ResultBuilder</ref> DOCTEST_RB(doctest::assertType::assert_type, __FILE__,          \
                                               __LINE__, #__VA_ARGS__);                            \
    DOCTEST_WRAP_IN_TRY(DOCTEST_RB.setResult(                                                      \
            <ref refid="structdoctest_1_1detail_1_1ExpressionDecomposer" kindref="compound">doctest::detail::ExpressionDecomposer</ref>(doctest::assertType::assert_type)                \
            &lt;&lt; __VA_ARGS__)) /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */         \
    DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB)                                                    \
    DOCTEST_CLANG_SUPPRESS_WARNING_POP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2383" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a6f0e0a277346b049dd3812f801d0c9cc" prot="public" static="no">
        <name>DOCTEST_ASSERT_IMPLEMENT_1</name>
        <param><defname>assert_type</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        DOCTEST_ASSERT_IMPLEMENT_2(assert_type, __VA_ARGS__);                                      \
    } DOCTEST_FUNC_SCOPE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2394" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a60862298c47edf3eaeb30b3cac4d62d8" prot="public" static="no">
        <name>DOCTEST_BINARY_ASSERT</name>
        <param><defname>assert_type</defname></param>
        <param><defname>comp</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        <ref refid="structdoctest_1_1detail_1_1ResultBuilder" kindref="compound">doctest::detail::ResultBuilder</ref> DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \
                                                   __LINE__, #__VA_ARGS__);                        \
        DOCTEST_WRAP_IN_TRY(                                                                       \
                DOCTEST_RB.binary_assert&lt;doctest::detail::binaryAssertComparison::comp&gt;(           \
                        __VA_ARGS__))                                                              \
        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \
    } DOCTEST_FUNC_SCOPE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2399" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac80cb844919d4d049c456446354c1b58" prot="public" static="no">
        <name>DOCTEST_UNARY_ASSERT</name>
        <param><defname>assert_type</defname></param>
        <param><defname>...</defname></param>
        <initializer>    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        <ref refid="structdoctest_1_1detail_1_1ResultBuilder" kindref="compound">doctest::detail::ResultBuilder</ref> DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \
                                                   __LINE__, #__VA_ARGS__);                        \
        DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))                                  \
        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \
    } DOCTEST_FUNC_SCOPE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2409" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a5543bf17193d5cf77558fabbd9cfb02f" prot="public" static="no">
        <name>DOCTEST_WARN</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2439" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8f40c4072e85f02a3e58c5f67a182297" prot="public" static="no">
        <name>DOCTEST_CHECK</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2440" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a35b7bf4bf062cc1359ab36c4119d680a" prot="public" static="no">
        <name>DOCTEST_REQUIRE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2441" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a207c474577961221a4003351186b5378" prot="public" static="no">
        <name>DOCTEST_WARN_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN_FALSE, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2442" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a7ecf2c25ffc2fad220a251af0ab37ff8" prot="public" static="no">
        <name>DOCTEST_CHECK_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK_FALSE, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2443" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0567e21b7ebdae9dbe84e4e46b230e12" prot="public" static="no">
        <name>DOCTEST_REQUIRE_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE_FALSE, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2444" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a16eae48f5771e18608a7c0ffe18a6518" prot="public" static="no">
        <name>DOCTEST_WARN_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN, cond); } DOCTEST_FUNC_SCOPE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2447" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a786fe34d54658c61956b291befcb2bcb" prot="public" static="no">
        <name>DOCTEST_CHECK_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK, cond); } DOCTEST_FUNC_SCOPE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2448" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a91aa0e2b12b52ed6da663e7071783f85" prot="public" static="no">
        <name>DOCTEST_REQUIRE_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE, cond); } DOCTEST_FUNC_SCOPE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2449" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a291550c45d92ce44e8466c184fb6fa2e" prot="public" static="no">
        <name>DOCTEST_WARN_FALSE_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN_FALSE, cond); } DOCTEST_FUNC_SCOPE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2450" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afce21f03a310657b5bafd6e98b4442de" prot="public" static="no">
        <name>DOCTEST_CHECK_FALSE_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK_FALSE, cond); } DOCTEST_FUNC_SCOPE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2451" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8a42992ed33f111d14968000d9b428a5" prot="public" static="no">
        <name>DOCTEST_REQUIRE_FALSE_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE_FALSE, cond); } DOCTEST_FUNC_SCOPE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2452" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1db08e05a079662153c7702e10dcdbde" prot="public" static="no">
        <name>DOCTEST_WARN_EQ</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_WARN_EQ, eq, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2455" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a2ac8b5624c3b8d9520c75a68634cb8c1" prot="public" static="no">
        <name>DOCTEST_CHECK_EQ</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_CHECK_EQ, eq, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2456" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8820dcb94345362c2fd94aea26a3eabc" prot="public" static="no">
        <name>DOCTEST_REQUIRE_EQ</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_REQUIRE_EQ, eq, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2457" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aaa8ef6ed223cba8e86d0bc0676aeb50e" prot="public" static="no">
        <name>DOCTEST_WARN_NE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_WARN_NE, ne, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2458" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afe1e20e7078d65704c6b2f4e55bbfc03" prot="public" static="no">
        <name>DOCTEST_CHECK_NE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_CHECK_NE, ne, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2459" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa34e39b7d59335760ffa1b9fce45cc4b" prot="public" static="no">
        <name>DOCTEST_REQUIRE_NE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_REQUIRE_NE, ne, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2460" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad814c5db21e9ac7eca4b3e87aec0ef3b" prot="public" static="no">
        <name>DOCTEST_WARN_GT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_WARN_GT, gt, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2461" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8d3a9781fd7a67021ec12e0aea024ed6" prot="public" static="no">
        <name>DOCTEST_CHECK_GT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_CHECK_GT, gt, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2462" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a87d30bb902d1bfca7427a9eb51d130eb" prot="public" static="no">
        <name>DOCTEST_REQUIRE_GT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_REQUIRE_GT, gt, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2463" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa0e1bebf090f015583da8decb0ee3e5c" prot="public" static="no">
        <name>DOCTEST_WARN_LT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_WARN_LT, lt, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2464" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4e1d83dffb779a2829552c4fefbb516a" prot="public" static="no">
        <name>DOCTEST_CHECK_LT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_CHECK_LT, lt, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2465" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab88925759665843f59b14f097213351c" prot="public" static="no">
        <name>DOCTEST_REQUIRE_LT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_REQUIRE_LT, lt, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2466" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aae5060834af3dd90c806b087368d010c" prot="public" static="no">
        <name>DOCTEST_WARN_GE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_WARN_GE, ge, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2467" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a296f8caf3497fbc9433d2e77691b0b3e" prot="public" static="no">
        <name>DOCTEST_CHECK_GE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_CHECK_GE, ge, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2468" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad75b722f83eb3f81662af7fccae74732" prot="public" static="no">
        <name>DOCTEST_REQUIRE_GE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_REQUIRE_GE, ge, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2469" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aaed576a70b191ac93a4a4e4052b31f4f" prot="public" static="no">
        <name>DOCTEST_WARN_LE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_WARN_LE, le, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2470" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a25823108f6fed8787303bbad7c619f35" prot="public" static="no">
        <name>DOCTEST_CHECK_LE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_CHECK_LE, le, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2471" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a9101f25bfe135de1e306e3ed342e248a" prot="public" static="no">
        <name>DOCTEST_REQUIRE_LE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_BINARY_ASSERT(DT_REQUIRE_LE, le, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2472" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a41e14871f960ec76113197ad929d18c8" prot="public" static="no">
        <name>DOCTEST_WARN_UNARY</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_UNARY_ASSERT(DT_WARN_UNARY, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2474" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a660ce2901f42d4d2a82327204a6a3602" prot="public" static="no">
        <name>DOCTEST_CHECK_UNARY</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2475" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a77558db4dc0f1758c756da740b64413a" prot="public" static="no">
        <name>DOCTEST_REQUIRE_UNARY</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2476" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a24e0cd6aa574d457374825c7d61f2038" prot="public" static="no">
        <name>DOCTEST_WARN_UNARY_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_UNARY_ASSERT(DT_WARN_UNARY_FALSE, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2477" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a9ff04e98b0891f79528c180a4e7d6d36" prot="public" static="no">
        <name>DOCTEST_CHECK_UNARY_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY_FALSE, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2478" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a37703a3eac1f8332d970808340abf56e" prot="public" static="no">
        <name>DOCTEST_REQUIRE_UNARY_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2479" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a86568ae69b9d2ed69a30b271d1949c19" prot="public" static="no">
        <name>DOCTEST_EXCEPTION_EMPTY_FUNC</name>
        <initializer>    [] { static_assert(false, &quot;Exceptions are disabled! &quot; \
    &quot;Use DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS if you want to compile with exceptions disabled.&quot;); return false; }()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2823" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2823" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1b96906f646efa8e46967cd0a1a23d07" prot="public" static="no">
        <name>DOCTEST_REQUIRE</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2839" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a9c3cc990c455b92a6742eb862a414edd" prot="public" static="no">
        <name>DOCTEST_REQUIRE_FALSE</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2840" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1abb922ea645a55598f8750ab9116ba816" prot="public" static="no">
        <name>DOCTEST_REQUIRE_MESSAGE</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2841" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac16b9d5de343829eb1890e375a6fc86b" prot="public" static="no">
        <name>DOCTEST_REQUIRE_FALSE_MESSAGE</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2842" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a516df529756fec8cb1af61611a8c52ea" prot="public" static="no">
        <name>DOCTEST_REQUIRE_EQ</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2843" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a977c86a416bded3083ce5c954186bb05" prot="public" static="no">
        <name>DOCTEST_REQUIRE_NE</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2844" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aef6d6ba512f359d284d74ecaf2dda6cb" prot="public" static="no">
        <name>DOCTEST_REQUIRE_GT</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2845" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a58aea3214fb4858e7f3c6c00781c60b8" prot="public" static="no">
        <name>DOCTEST_REQUIRE_LT</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2846" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac0438b353a7f306b19f4f5f0892c2ad0" prot="public" static="no">
        <name>DOCTEST_REQUIRE_GE</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2847" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a342323f516702076ff1f9b34400346c5" prot="public" static="no">
        <name>DOCTEST_REQUIRE_LE</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2848" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a94fbd36f2be41e2a4ca8f391c6aa09e6" prot="public" static="no">
        <name>DOCTEST_REQUIRE_UNARY</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2849" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0189b84819a119cf95fe3b7bffdd1951" prot="public" static="no">
        <name>DOCTEST_REQUIRE_UNARY_FALSE</name>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2850" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad969cd19e5751fd38d2429ce8049065e" prot="public" static="no">
        <name>DOCTEST_WARN_THROWS</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2854" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2854" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4390850609b0f465bc8a4e7355f91177" prot="public" static="no">
        <name>DOCTEST_CHECK_THROWS</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2855" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2855" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a00ac74412c24337acdb25b2f0587f6a5" prot="public" static="no">
        <name>DOCTEST_REQUIRE_THROWS</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2856" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2856" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0c61debdc225c16793ce21792448bdd2" prot="public" static="no">
        <name>DOCTEST_WARN_THROWS_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2857" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a84f4eb0aeb37b27b3cad5f3e44c08195" prot="public" static="no">
        <name>DOCTEST_CHECK_THROWS_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2858" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0a5e62cddee11560955d5213caac78a4" prot="public" static="no">
        <name>DOCTEST_REQUIRE_THROWS_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2859" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0d30b4e4f2a0e5b7e845efe285bf270f" prot="public" static="no">
        <name>DOCTEST_WARN_THROWS_WITH</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2860" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a141ab91ff9697fa7d978989d56ce42d5" prot="public" static="no">
        <name>DOCTEST_CHECK_THROWS_WITH</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2861" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a50f4ffd81384eda6103b9aba1e4fca60" prot="public" static="no">
        <name>DOCTEST_REQUIRE_THROWS_WITH</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2862" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0711b66575a446e61e62af15cd75e722" prot="public" static="no">
        <name>DOCTEST_WARN_THROWS_WITH_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2863" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a98242dd36b26e9dc0dfe28f38f8a7a4a" prot="public" static="no">
        <name>DOCTEST_CHECK_THROWS_WITH_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2864" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2864" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a966aa4ef8832dd35152a11e273ae01af" prot="public" static="no">
        <name>DOCTEST_REQUIRE_THROWS_WITH_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2865" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a2de5ec015a9fbf92197a289b11db462c" prot="public" static="no">
        <name>DOCTEST_WARN_NOTHROW</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2866" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aac7b7640f3d6611423a2c5a18d905069" prot="public" static="no">
        <name>DOCTEST_CHECK_NOTHROW</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2867" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1af736ab1a8a0779fa8df23e8177a52abb" prot="public" static="no">
        <name>DOCTEST_REQUIRE_NOTHROW</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2868" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ae71b19f842d84007696c792e34d29130" prot="public" static="no">
        <name>DOCTEST_WARN_THROWS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2870" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad989f89d414af6c3472b22ad2d6bfe54" prot="public" static="no">
        <name>DOCTEST_CHECK_THROWS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2871" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aac5e74a66ac689e41b96e6f9ba94f00a" prot="public" static="no">
        <name>DOCTEST_REQUIRE_THROWS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2872" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac8763f6a8cc42aa90a537875f7fd980f" prot="public" static="no">
        <name>DOCTEST_WARN_THROWS_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2873" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2873" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a72345d4052cc19f881c5adf40226155d" prot="public" static="no">
        <name>DOCTEST_CHECK_THROWS_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2874" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2874" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aaac97c3bca62c6e5dd7fe6e2acff3e8a" prot="public" static="no">
        <name>DOCTEST_REQUIRE_THROWS_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2875" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1b69422f225b9b374a23b60c12f6e947" prot="public" static="no">
        <name>DOCTEST_WARN_THROWS_WITH_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2876" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab989b8025f31020a0f172ec67cf06a76" prot="public" static="no">
        <name>DOCTEST_CHECK_THROWS_WITH_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2877" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2877" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a5c4823f1abe370a6690ad6025691a348" prot="public" static="no">
        <name>DOCTEST_REQUIRE_THROWS_WITH_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2878" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a3adea56419a63e7bbdf8d1b522015092" prot="public" static="no">
        <name>DOCTEST_WARN_THROWS_WITH_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2879" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2879" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ae08de7161897c76ce0a87767fc171f4f" prot="public" static="no">
        <name>DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2880" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2880" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4db5108396a8fd7dfc43b5198efc7ad8" prot="public" static="no">
        <name>DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2881" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ada39f04d458d5661c40a8dc27cfaec27" prot="public" static="no">
        <name>DOCTEST_WARN_NOTHROW_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2882" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8b75d37da2864af17a65dd436038614b" prot="public" static="no">
        <name>DOCTEST_CHECK_NOTHROW_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2883" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2883" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aadc3c3e83fd4e9c66ec44ec0d5328c08" prot="public" static="no">
        <name>DOCTEST_REQUIRE_NOTHROW_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_EXCEPTION_EMPTY_FUNC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2884" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a307c7c41ebfa40b60def448d2190772d" prot="public" static="no">
        <name>DOCTEST_FAST_WARN_EQ</name>
        <initializer>DOCTEST_WARN_EQ</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2890" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab4a30ae5781ec52a8651c7cb695fb266" prot="public" static="no">
        <name>DOCTEST_FAST_CHECK_EQ</name>
        <initializer>DOCTEST_CHECK_EQ</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2891" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2891" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa25a354bc0f83e31ec1184eff29ec0d9" prot="public" static="no">
        <name>DOCTEST_FAST_REQUIRE_EQ</name>
        <initializer>DOCTEST_REQUIRE_EQ</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2892" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a7f6c8720c02eef2319ffb32de1f10233" prot="public" static="no">
        <name>DOCTEST_FAST_WARN_NE</name>
        <initializer>DOCTEST_WARN_NE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2893" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2893" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aef35956b9f6316059552577b28b63b76" prot="public" static="no">
        <name>DOCTEST_FAST_CHECK_NE</name>
        <initializer>DOCTEST_CHECK_NE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2894" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a181b3b01fecc87de85f3ce2647f05e9b" prot="public" static="no">
        <name>DOCTEST_FAST_REQUIRE_NE</name>
        <initializer>DOCTEST_REQUIRE_NE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2895" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2895" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a5937efa19ce061357efe0b8a8f5be061" prot="public" static="no">
        <name>DOCTEST_FAST_WARN_GT</name>
        <initializer>DOCTEST_WARN_GT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2896" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2896" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aad48a1ad33a37268303363fe3285bb2c" prot="public" static="no">
        <name>DOCTEST_FAST_CHECK_GT</name>
        <initializer>DOCTEST_CHECK_GT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2897" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a74a2b5ebb76b33c7124bf3d5bc200cc6" prot="public" static="no">
        <name>DOCTEST_FAST_REQUIRE_GT</name>
        <initializer>DOCTEST_REQUIRE_GT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2898" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2898" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1c5270c3e5ed27308bcdcb2e439f5049" prot="public" static="no">
        <name>DOCTEST_FAST_WARN_LT</name>
        <initializer>DOCTEST_WARN_LT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2899" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a2b5cbb281f86f22f30ca08e453ecb7f3" prot="public" static="no">
        <name>DOCTEST_FAST_CHECK_LT</name>
        <initializer>DOCTEST_CHECK_LT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2900" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2900" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a17c6c39d376b0b97b0d883e7ec3fa728" prot="public" static="no">
        <name>DOCTEST_FAST_REQUIRE_LT</name>
        <initializer>DOCTEST_REQUIRE_LT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2901" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2901" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a7851a92cfdd7ec5b60ae070ee21b1ff4" prot="public" static="no">
        <name>DOCTEST_FAST_WARN_GE</name>
        <initializer>DOCTEST_WARN_GE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2902" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2902" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1ae0024144fb0081522e3778e2f3fe77" prot="public" static="no">
        <name>DOCTEST_FAST_CHECK_GE</name>
        <initializer>DOCTEST_CHECK_GE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2903" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2903" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a2b6364c039a90a1b8519af193027c3a4" prot="public" static="no">
        <name>DOCTEST_FAST_REQUIRE_GE</name>
        <initializer>DOCTEST_REQUIRE_GE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2904" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2904" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac9a00a428fc5d856edac7d642f9d218a" prot="public" static="no">
        <name>DOCTEST_FAST_WARN_LE</name>
        <initializer>DOCTEST_WARN_LE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2905" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2905" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4eaef3b35d06f2cd9a1b38ef4b8aa137" prot="public" static="no">
        <name>DOCTEST_FAST_CHECK_LE</name>
        <initializer>DOCTEST_CHECK_LE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2906" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab9fe58a6ab535c836df028567aa68693" prot="public" static="no">
        <name>DOCTEST_FAST_REQUIRE_LE</name>
        <initializer>DOCTEST_REQUIRE_LE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2907" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2907" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aad3a987ea3505b2ade023959bec1dbff" prot="public" static="no">
        <name>DOCTEST_FAST_WARN_UNARY</name>
        <initializer>DOCTEST_WARN_UNARY</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2909" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2909" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aef39710e57f05a74423ef552b9756a29" prot="public" static="no">
        <name>DOCTEST_FAST_CHECK_UNARY</name>
        <initializer>DOCTEST_CHECK_UNARY</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2910" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2910" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a028cfc971ad12bc510b303622b9bc35f" prot="public" static="no">
        <name>DOCTEST_FAST_REQUIRE_UNARY</name>
        <initializer>DOCTEST_REQUIRE_UNARY</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2911" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2911" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a85bdb241d41e64ec124f96d2efba9443" prot="public" static="no">
        <name>DOCTEST_FAST_WARN_UNARY_FALSE</name>
        <initializer>DOCTEST_WARN_UNARY_FALSE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2912" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4d91d1f535ad191f829bc3cf81b967eb" prot="public" static="no">
        <name>DOCTEST_FAST_CHECK_UNARY_FALSE</name>
        <initializer>DOCTEST_CHECK_UNARY_FALSE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2913" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a3c0e9e0c03a62a810aae8e282b807938" prot="public" static="no">
        <name>DOCTEST_FAST_REQUIRE_UNARY_FALSE</name>
        <initializer>DOCTEST_REQUIRE_UNARY_FALSE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2914" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a13cade21e6ce5fe0d5bf7af820e203d8" prot="public" static="no">
        <name>DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE</name>
        <param><defname>id</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2916" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2916" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab990e5952d346329356aeb62a261386a" prot="public" static="no">
        <name>DOCTEST_SCENARIO</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_TEST_CASE(&quot;  Scenario: &quot; name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2921" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2921" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a397e2591ec795895eb61e15309fa0634" prot="public" static="no">
        <name>DOCTEST_SCENARIO_CLASS</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_TEST_CASE_CLASS(&quot;  Scenario: &quot; name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2922" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1abbf51631942e053be12a31bf2299fe28" prot="public" static="no">
        <name>DOCTEST_SCENARIO_TEMPLATE</name>
        <param><defname>name</defname></param>
        <param><defname>T</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_TEST_CASE_TEMPLATE(&quot;  Scenario: &quot; name, T, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2923" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2923" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aadcf3b288d0506988896ff62d6b5ec5a" prot="public" static="no">
        <name>DOCTEST_SCENARIO_TEMPLATE_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>T</defname></param>
        <param><defname>id</defname></param>
        <initializer>DOCTEST_TEST_CASE_TEMPLATE_DEFINE(&quot;  Scenario: &quot; name, T, id)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2924" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2924" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a391063a35ec9bea4c600c15b0a27cb54" prot="public" static="no">
        <name>DOCTEST_GIVEN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_SUBCASE(&quot;   Given: &quot; name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2926" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a570ec2864c36b1b5c8ccfd94c6b8b629" prot="public" static="no">
        <name>DOCTEST_WHEN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_SUBCASE(&quot;    When: &quot; name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2927" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a9e696b9f04c18580c871e07653affcbf" prot="public" static="no">
        <name>DOCTEST_AND_WHEN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_SUBCASE(&quot;And when: &quot; name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2928" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aab2f195b2c866cd010123c1d5b70217f" prot="public" static="no">
        <name>DOCTEST_THEN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_SUBCASE(&quot;    Then: &quot; name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2929" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2929" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a98336975a3b162f382cad2ae2c058276" prot="public" static="no">
        <name>DOCTEST_AND_THEN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_SUBCASE(&quot;     And: &quot; name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2930" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8bc255ff55721571e878568d2b5dcb35" prot="public" static="no">
        <name>TEST_CASE</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_TEST_CASE(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2936" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afbb012c604e265d1e1e7b5279180d691" prot="public" static="no">
        <name>TEST_CASE_CLASS</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_TEST_CASE_CLASS(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2937" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a2225e7c2d9587e1e3cfc5f7ab5f0b27d" prot="public" static="no">
        <name>TEST_CASE_FIXTURE</name>
        <param><defname>x</defname></param>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_TEST_CASE_FIXTURE(x, name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2938" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa771c8cbf9b94916a2307c77676cd9ff" prot="public" static="no">
        <name>TYPE_TO_STRING_AS</name>
        <param><defname>str</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_TYPE_TO_STRING_AS(str, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2939" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2939" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8245b61f7381307d76a1472436d35ebe" prot="public" static="no">
        <name>TYPE_TO_STRING</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_TYPE_TO_STRING(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2940" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2940" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8ab7703bbaae3e25e7e5f5eb9fbe3642" prot="public" static="no">
        <name>TEST_CASE_TEMPLATE</name>
        <param><defname>name</defname></param>
        <param><defname>T</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_TEST_CASE_TEMPLATE(name, T, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2941" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a39cb44ec5ab4ae7457e06cc734b57286" prot="public" static="no">
        <name>TEST_CASE_TEMPLATE_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>T</defname></param>
        <param><defname>id</defname></param>
        <initializer>DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name, T, id)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2942" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2942" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a6d6b09ad857bf02d03049faf3235ed55" prot="public" static="no">
        <name>TEST_CASE_TEMPLATE_INVOKE</name>
        <param><defname>id</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2943" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a19d32dc25683908b43c4503dc6698a87" prot="public" static="no">
        <name>TEST_CASE_TEMPLATE_APPLY</name>
        <param><defname>id</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2944" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2944" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4147381e5cb6f68c1a315a852c63bf70" prot="public" static="no">
        <name>SUBCASE</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_SUBCASE(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2945" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2945" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1af640e6ea35d0c6511986d40ce36e2afc" prot="public" static="no">
        <name>TEST_SUITE</name>
        <param><defname>decorators</defname></param>
        <initializer>DOCTEST_TEST_SUITE(decorators)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2946" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a771cd576e69a29d09b6695c9b8631b33" prot="public" static="no">
        <name>TEST_SUITE_BEGIN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_TEST_SUITE_BEGIN(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2947" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a3b41014a9f6a32210a8eecbe8fea3c76" prot="public" static="no">
        <name>TEST_SUITE_END</name>
        <initializer>DOCTEST_TEST_SUITE_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2948" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2948" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4f7616cc57079fbcd459e73d64ce52e3" prot="public" static="no">
        <name>REGISTER_EXCEPTION_TRANSLATOR</name>
        <param><defname>signature</defname></param>
        <initializer>DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2949" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1add8ee38907c3536a7c422f79260311fd" prot="public" static="no">
        <name>REGISTER_REPORTER</name>
        <param><defname>name</defname></param>
        <param><defname>priority</defname></param>
        <param><defname>reporter</defname></param>
        <initializer>DOCTEST_REGISTER_REPORTER(name, priority, reporter)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2950" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2950" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a06f7a7f359730adaa75271f0668ea917" prot="public" static="no">
        <name>REGISTER_LISTENER</name>
        <param><defname>name</defname></param>
        <param><defname>priority</defname></param>
        <param><defname>reporter</defname></param>
        <initializer>DOCTEST_REGISTER_LISTENER(name, priority, reporter)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2951" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aedf01192151e10a6620567952711ff69" prot="public" static="no">
        <name>INFO</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_INFO(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2952" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2952" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0cd84d289552018d72489c085df0a9ca" prot="public" static="no">
        <name>CAPTURE</name>
        <param><defname>x</defname></param>
        <initializer>DOCTEST_CAPTURE(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2953" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2953" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1adb66a4c291609d4a1c554ad0a23f0662" prot="public" static="no">
        <name>ADD_MESSAGE_AT</name>
        <param><defname>file</defname></param>
        <param><defname>line</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ADD_MESSAGE_AT(file, line, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2954" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4608a06d7117332c14b21b93f9655653" prot="public" static="no">
        <name>ADD_FAIL_CHECK_AT</name>
        <param><defname>file</defname></param>
        <param><defname>line</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ADD_FAIL_CHECK_AT(file, line, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2955" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1937649cc9503739c20b3c81b97b5e5d" prot="public" static="no">
        <name>ADD_FAIL_AT</name>
        <param><defname>file</defname></param>
        <param><defname>line</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_ADD_FAIL_AT(file, line, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2956" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2956" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad655b38a678a6c69f4555b7737d4b7d3" prot="public" static="no">
        <name>MESSAGE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_MESSAGE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2957" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a3c2341a3238242fdc02d33a1968bd1d2" prot="public" static="no">
        <name>FAIL_CHECK</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAIL_CHECK(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2958" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2958" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac8d1eaf65528f86b445cf6e45b2d72c9" prot="public" static="no">
        <name>FAIL</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAIL(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2959" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a70211d4e9a6027791aae1d1c1a3de87b" prot="public" static="no">
        <name>TO_LVALUE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_TO_LVALUE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2960" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8f75b971030a39ef811d3526a62b36b8" prot="public" static="no">
        <name>WARN</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2962" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a979829ac5bbd33c84dc4ef35d8534d2f" prot="public" static="no">
        <name>WARN_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_FALSE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2963" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2963" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afd8c2dee8b319a42e57911afd77a9679" prot="public" static="no">
        <name>WARN_THROWS</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_THROWS(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2964" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2964" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a87a93bc2968fe287440090b6f978f71b" prot="public" static="no">
        <name>WARN_THROWS_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_THROWS_AS(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2965" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0c23d535a58373adb949e23d6b7bd578" prot="public" static="no">
        <name>WARN_THROWS_WITH</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_THROWS_WITH(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2966" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2966" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a2333c0597b4d562649628c89538f1ce2" prot="public" static="no">
        <name>WARN_THROWS_WITH_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_THROWS_WITH_AS(expr, with, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2967" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2967" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac351a6579fbcf881bc2b9f682fa074ce" prot="public" static="no">
        <name>WARN_NOTHROW</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_NOTHROW(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2968" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2968" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a836cca6b6ed3a1706353f6d1bca0935f" prot="public" static="no">
        <name>CHECK</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2969" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2969" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a7bf095d8512cb180f8ff3a2258a6eaac" prot="public" static="no">
        <name>CHECK_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_FALSE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2970" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2970" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a5c646dfe831e596b59073014c1c8b9e5" prot="public" static="no">
        <name>CHECK_THROWS</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_THROWS(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2971" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aabaaa591d46f29cf307dbed1a5abba83" prot="public" static="no">
        <name>CHECK_THROWS_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_THROWS_AS(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2972" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2972" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab692b033f5869d5a0def84b3a65e092b" prot="public" static="no">
        <name>CHECK_THROWS_WITH</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_THROWS_WITH(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2973" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2973" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a60213e8e60022a5ec9ca8eaca4e8c61f" prot="public" static="no">
        <name>CHECK_THROWS_WITH_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_THROWS_WITH_AS(expr, with, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2974" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a78e70f011f20c4ade1d1ac2b8fd33626" prot="public" static="no">
        <name>CHECK_NOTHROW</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_NOTHROW(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2975" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad57835ba8f1bb419a865ada6bd011a85" prot="public" static="no">
        <name>REQUIRE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2976" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ada5065594bafc152162761ace47c1dcb" prot="public" static="no">
        <name>REQUIRE_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_FALSE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2977" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ae3c33faa1d31a2bb0811dac74b994e3e" prot="public" static="no">
        <name>REQUIRE_THROWS</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_THROWS(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2978" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2978" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1af9a96b90be2ecd563cf2d9b6f299042d" prot="public" static="no">
        <name>REQUIRE_THROWS_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_THROWS_AS(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2979" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1acc9e700fe563dbe4d9406dd36dbf1fc1" prot="public" static="no">
        <name>REQUIRE_THROWS_WITH</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_THROWS_WITH(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2980" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afa2574c40fccb542361e0a95ac6c1ea5" prot="public" static="no">
        <name>REQUIRE_THROWS_WITH_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2981" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab0148f0dfca438f7aa01974e9c33216a" prot="public" static="no">
        <name>REQUIRE_NOTHROW</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_NOTHROW(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2982" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1acca340b75fc1e95fc1f7346d5f9a5e9c" prot="public" static="no">
        <name>WARN_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_MESSAGE(cond, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2984" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2984" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1adb6deedd89058b5e9b9affae889e2ee0" prot="public" static="no">
        <name>WARN_FALSE_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_FALSE_MESSAGE(cond, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2985" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a910ada624386c32bebd20aa474a5d30d" prot="public" static="no">
        <name>WARN_THROWS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_THROWS_MESSAGE(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2986" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aaa613662fab37f1115fa3241a779cf47" prot="public" static="no">
        <name>WARN_THROWS_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2987" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a73c691e36423baec205b6cb6e96d7eee" prot="public" static="no">
        <name>WARN_THROWS_WITH_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2988" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2988" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afb795965c0728873d4426b60b6bb71a5" prot="public" static="no">
        <name>WARN_THROWS_WITH_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2989" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afe5de1e85b32864bb51ef94f56d30e6a" prot="public" static="no">
        <name>WARN_NOTHROW_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_NOTHROW_MESSAGE(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2990" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a73e7aad74289b7337329539f44cd9a97" prot="public" static="no">
        <name>CHECK_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_MESSAGE(cond, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2991" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8b06db4f03a3ddfbd641ab2fe31c5f1c" prot="public" static="no">
        <name>CHECK_FALSE_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_FALSE_MESSAGE(cond, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2992" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a9a0787ef037d0d3b59ef15db7558105e" prot="public" static="no">
        <name>CHECK_THROWS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_THROWS_MESSAGE(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2993" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2993" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a75a03e5bbd28410e78d318d3788396d9" prot="public" static="no">
        <name>CHECK_THROWS_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2994" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2994" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ae3425ab2dc96a8ded456ce4dc7c30d15" prot="public" static="no">
        <name>CHECK_THROWS_WITH_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2995" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a6aae9c5bc6386274308d27eb4bffa7c8" prot="public" static="no">
        <name>CHECK_THROWS_WITH_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2996" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2996" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a9350021e018cf7d05158c211ca5bc4b8" prot="public" static="no">
        <name>CHECK_NOTHROW_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_NOTHROW_MESSAGE(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2997" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2997" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a51bab8b6c9010ab9e65e6b2d9a781138" prot="public" static="no">
        <name>REQUIRE_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_MESSAGE(cond, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2998" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2998" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa987d466906afbba13ef7f9e883c665f" prot="public" static="no">
        <name>REQUIRE_FALSE_MESSAGE</name>
        <param><defname>cond</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_FALSE_MESSAGE(cond, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="2999" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="2999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aec647ccc1d8d3cf3ad367cfac8ae7f38" prot="public" static="no">
        <name>REQUIRE_THROWS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_THROWS_MESSAGE(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3000" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a3107f364c442e90a71bb083dbda254ce" prot="public" static="no">
        <name>REQUIRE_THROWS_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3001" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3001" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afafefd04c20691a9be44026da809e5c6" prot="public" static="no">
        <name>REQUIRE_THROWS_WITH_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3002" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ace08755bdf4594fa703db402641a685f" prot="public" static="no">
        <name>REQUIRE_THROWS_WITH_AS_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>with</defname></param>
        <param><defname>ex</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3003" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ae1d6bb0ce720ae46a1e82452b033d7b1" prot="public" static="no">
        <name>REQUIRE_NOTHROW_MESSAGE</name>
        <param><defname>expr</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3004" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab4c177fdb253ca3e283476b498fb744d" prot="public" static="no">
        <name>SCENARIO</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_SCENARIO(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3006" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a57fcc8ad4046e5f05751c11f17cf423f" prot="public" static="no">
        <name>SCENARIO_CLASS</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_SCENARIO_CLASS(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3007" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3007" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a64973e83321982373bce2f5e3ba1ab69" prot="public" static="no">
        <name>SCENARIO_TEMPLATE</name>
        <param><defname>name</defname></param>
        <param><defname>T</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_SCENARIO_TEMPLATE(name, T, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3008" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3008" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a7ad18dfad1ad344ae1abfc2c65c00130" prot="public" static="no">
        <name>SCENARIO_TEMPLATE_DEFINE</name>
        <param><defname>name</defname></param>
        <param><defname>T</defname></param>
        <param><defname>id</defname></param>
        <initializer>DOCTEST_SCENARIO_TEMPLATE_DEFINE(name, T, id)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3009" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a6fdd23caff3293146ba6929b2d77465a" prot="public" static="no">
        <name>GIVEN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_GIVEN(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3010" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3010" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a99e503d975635996314bccde232b0a60" prot="public" static="no">
        <name>WHEN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_WHEN(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3011" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3011" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a49fd020eb5d05b1e021d84558ef297a5" prot="public" static="no">
        <name>AND_WHEN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_AND_WHEN(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3012" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a34adb14b9194a16ac5ef135dc57169d4" prot="public" static="no">
        <name>THEN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_THEN(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3013" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3013" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aff5ab767c4b4b5f02218e9060d09e826" prot="public" static="no">
        <name>AND_THEN</name>
        <param><defname>name</defname></param>
        <initializer>DOCTEST_AND_THEN(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3014" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afd5266548919a1c51998461c31af8bba" prot="public" static="no">
        <name>WARN_EQ</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_EQ(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3016" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3016" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1acab009b596160e614aec1ace5aa8560b" prot="public" static="no">
        <name>CHECK_EQ</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_EQ(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3017" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3017" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a77569c2162609127f477ca10c64af12a" prot="public" static="no">
        <name>REQUIRE_EQ</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_EQ(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3018" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3018" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a040f0bbbae294f07df3a42d531c16c72" prot="public" static="no">
        <name>WARN_NE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_NE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3019" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3019" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a7402f391d8e0b60455c52e88612b920e" prot="public" static="no">
        <name>CHECK_NE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_NE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3020" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3020" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1afa35d3126ad91dfec4b448f862279df2" prot="public" static="no">
        <name>REQUIRE_NE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_NE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3021" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3021" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1adf2ffefc41656e280c088541a9ffcece" prot="public" static="no">
        <name>WARN_GT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_GT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3022" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3022" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab5d3af75a2193b292ec73d1c5e9aa3b8" prot="public" static="no">
        <name>CHECK_GT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_GT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3023" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3023" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1751d937f9894f72c330d4f69876d345" prot="public" static="no">
        <name>REQUIRE_GT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_GT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3024" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3024" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa122abf9afd608e65b329e15e436da7d" prot="public" static="no">
        <name>WARN_LT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_LT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3025" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3025" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a5016b178adeb924d156f914b97d50c22" prot="public" static="no">
        <name>CHECK_LT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_LT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3026" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3026" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a6c42c25001b1f2397b5824f4b1e2aa67" prot="public" static="no">
        <name>REQUIRE_LT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_LT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3027" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa4629385fc990ced38966cd27d0e949e" prot="public" static="no">
        <name>WARN_GE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_GE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3028" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3028" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a09d1acce35b0cf75630ee57cbbcfb8ec" prot="public" static="no">
        <name>CHECK_GE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_GE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3029" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3029" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa0f1acb5eb8c0a536189f54afe8185c6" prot="public" static="no">
        <name>REQUIRE_GE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_GE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3030" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3030" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aa1809c66cb75c89b5c07afba26f1bf46" prot="public" static="no">
        <name>WARN_LE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_LE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3031" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3031" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a123814e11f856f998a4a46abeffa033b" prot="public" static="no">
        <name>CHECK_LE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_LE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3032" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3032" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1624a83ce6c90ed75065e22e25e1f157" prot="public" static="no">
        <name>REQUIRE_LE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_LE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3033" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3033" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1abbeec03d05bb5360ac985e6e2b29ab6b" prot="public" static="no">
        <name>WARN_UNARY</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_UNARY(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3034" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3034" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1abcf94ba403b7c0d3a652a7c8da342858" prot="public" static="no">
        <name>CHECK_UNARY</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_UNARY(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3035" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3035" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a83daebae3fda51f918a5624574db9beb" prot="public" static="no">
        <name>REQUIRE_UNARY</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_UNARY(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3036" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3036" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a871927e4d93df140d96dfbac9852810f" prot="public" static="no">
        <name>WARN_UNARY_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_WARN_UNARY_FALSE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3037" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3037" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab6e15c04937a22c57a3222e8436d4fac" prot="public" static="no">
        <name>CHECK_UNARY_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_CHECK_UNARY_FALSE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3038" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3038" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1abeeedde24675295715ea07fa2f9ed875" prot="public" static="no">
        <name>REQUIRE_UNARY_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_REQUIRE_UNARY_FALSE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3039" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a7bd00d421dfce21589cb2460f3d05349" prot="public" static="no">
        <name>FAST_WARN_EQ</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_WARN_EQ(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3042" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3042" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a08be8a1f0d74ce1eb588e46a6b89b170" prot="public" static="no">
        <name>FAST_CHECK_EQ</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_CHECK_EQ(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3043" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3043" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a17cf1dd3cc76f721884b781d79ca6fa1" prot="public" static="no">
        <name>FAST_REQUIRE_EQ</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_REQUIRE_EQ(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3044" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3044" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aad55f75353d3345f4c43353edb170229" prot="public" static="no">
        <name>FAST_WARN_NE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_WARN_NE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3045" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3045" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4421c22609cbdce3ff36ad2d536daf5f" prot="public" static="no">
        <name>FAST_CHECK_NE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_CHECK_NE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3046" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1add92617980cc95f31f1f00d8ec264073" prot="public" static="no">
        <name>FAST_REQUIRE_NE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_REQUIRE_NE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3047" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3047" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac9d9fae4ba51e82962cc86c530c5c785" prot="public" static="no">
        <name>FAST_WARN_GT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_WARN_GT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3048" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ab097b7e0129aab3be28162807e7a1d30" prot="public" static="no">
        <name>FAST_CHECK_GT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_CHECK_GT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3049" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1af6630d64e5f5831f49b6096c525528fd" prot="public" static="no">
        <name>FAST_REQUIRE_GT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_REQUIRE_GT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3050" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3050" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ae19f1dcaf3888f356deb3193d04cb094" prot="public" static="no">
        <name>FAST_WARN_LT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_WARN_LT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3051" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3051" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a0ace87924d893053ca09196f0db9d6bc" prot="public" static="no">
        <name>FAST_CHECK_LT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_CHECK_LT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3052" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3052" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a3e4fea4166b5decb632d30f6160baef3" prot="public" static="no">
        <name>FAST_REQUIRE_LT</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_REQUIRE_LT(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3053" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a8c5fb66b4d6312994878be37d866937e" prot="public" static="no">
        <name>FAST_WARN_GE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_WARN_GE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3054" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4fd20c081dcfa6a3379ed713c9d706e1" prot="public" static="no">
        <name>FAST_CHECK_GE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_CHECK_GE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3055" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3055" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1aeed99b43a19d381bc0d12e41cc661c80" prot="public" static="no">
        <name>FAST_REQUIRE_GE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_REQUIRE_GE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3056" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3056" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1af57e29c5db323c79d2e726525e4715cd" prot="public" static="no">
        <name>FAST_WARN_LE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_WARN_LE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3057" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3057" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ad75dcf90106a8c319c6bc74df579d5c2" prot="public" static="no">
        <name>FAST_CHECK_LE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_CHECK_LE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3058" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3058" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ae04afb74fe3cdf3919744ca91e9c70d4" prot="public" static="no">
        <name>FAST_REQUIRE_LE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_REQUIRE_LE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3059" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3059" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a4a98b76ec685d380c263683c2c444185" prot="public" static="no">
        <name>FAST_WARN_UNARY</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_WARN_UNARY(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3061" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3061" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a36b25bccece2cb68947c092c30706e12" prot="public" static="no">
        <name>FAST_CHECK_UNARY</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_CHECK_UNARY(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3062" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a12c93237e40de2faacf5ac7b468382f8" prot="public" static="no">
        <name>FAST_REQUIRE_UNARY</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_REQUIRE_UNARY(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3063" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3063" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a58390550ade298b468b6f8c0229e7149" prot="public" static="no">
        <name>FAST_WARN_UNARY_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_WARN_UNARY_FALSE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3064" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1ac7d3f8192ba0306ad04b63dfbc8be75b" prot="public" static="no">
        <name>FAST_CHECK_UNARY_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_CHECK_UNARY_FALSE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3065" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a6ee9d94ec3cecc7160790c80d4642878" prot="public" static="no">
        <name>FAST_REQUIRE_UNARY_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_FAST_REQUIRE_UNARY_FALSE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3066" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3066" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a1588bbb4c9c4f222f4edbb3422e0c430" prot="public" static="no">
        <name>TEST_CASE_TEMPLATE_INSTANTIATE</name>
        <param><defname>id</defname></param>
        <param><defname>...</defname></param>
        <initializer>DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3068" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3068" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="doctest_8h_1a3a7ef56c20fd24da92633816765eae59" prot="public" static="no">
        <name>DOCTEST_SINGLE_HEADER</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="3088" column="9" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="3088" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="doctest_8h_1a5bada44bccc9e60dcd57ef2b75430546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH DOCTEST_CLANG_SUPPRESS_WARNING_PUSH DOCTEST_GCC_SUPPRESS_WARNING_PUSH DOCTEST_MSVC_SUPPRESS_WARNING_PUSH</type>
        <definition>DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH DOCTEST_CLANG_SUPPRESS_WARNING_PUSH DOCTEST_GCC_SUPPRESS_WARNING_PUSH DOCTEST_MSVC_SUPPRESS_WARNING_PUSH DOCTEST_MSVC_SUPPRESS_WARNING</definition>
        <argsstring>(4623) namespace doctest</argsstring>
        <name>DOCTEST_MSVC_SUPPRESS_WARNING</name>
        <param>
          <type>4623</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" line="226" column="1" bodyfile="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h" bodystart="226" bodyend="448"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>======================================================================<sp/>lgtm<sp/>[cpp/missing-header-guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==<sp/>DO<sp/>NOT<sp/>MODIFY<sp/>THIS<sp/>FILE<sp/>BY<sp/>HAND<sp/>-<sp/>IT<sp/>IS<sp/>AUTO<sp/>GENERATED<sp/>BY<sp/>CMAKE!<sp/>==</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doctest.h<sp/>-<sp/>the<sp/>lightest<sp/>feature-rich<sp/>C++<sp/>single-header<sp/>testing<sp/>framework<sp/>for<sp/>unit<sp/>tests<sp/>and<sp/>TDD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2016-2023<sp/>Viktor<sp/>Kirilov</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>Software<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>accompanying<sp/>file<sp/>LICENSE.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>documentation<sp/>can<sp/>be<sp/>found<sp/>at<sp/>the<sp/>library&apos;s<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/doctest/doctest/blob/master/doc/markdown/readme.md</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>library<sp/>is<sp/>heavily<sp/>influenced<sp/>by<sp/>Catch<sp/>-<sp/>https://github.com/catchorg/Catch2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>uses<sp/>the<sp/>Boost<sp/>Software<sp/>License<sp/>-<sp/>Version<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>here<sp/>-<sp/>https://github.com/catchorg/Catch2/blob/master/LICENSE.txt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>concept<sp/>of<sp/>subcases<sp/>(sections<sp/>in<sp/>Catch)<sp/>and<sp/>expression<sp/>decomposition<sp/>are<sp/>from<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>parts<sp/>of<sp/>the<sp/>code<sp/>are<sp/>taken<sp/>directly:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>stringification<sp/>-<sp/>the<sp/>detection<sp/>of<sp/>&quot;ostream&amp;<sp/>operator&lt;&lt;(ostream&amp;,<sp/>const<sp/>T&amp;)&quot;<sp/>and<sp/>StringMaker&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>the<sp/>Approx()<sp/>helper<sp/>class<sp/>for<sp/>floating<sp/>point<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>colors<sp/>in<sp/>the<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>breaking<sp/>into<sp/>a<sp/>debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>signal<sp/>/<sp/>SEH<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>XmlWriter<sp/>class<sp/>-<sp/>thanks<sp/>to<sp/>Phil<sp/>Nash<sp/>for<sp/>allowing<sp/>the<sp/>direct<sp/>reuse<sp/>(AKA<sp/>copy/paste)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>expression<sp/>decomposing<sp/>templates<sp/>are<sp/>taken<sp/>from<sp/>lest<sp/>-<sp/>https://github.com/martinmoene/lest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>uses<sp/>the<sp/>Boost<sp/>Software<sp/>License<sp/>-<sp/>Version<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>here<sp/>-<sp/>https://github.com/martinmoene/lest/blob/master/LICENSE.txt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_LIBRARY_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_LIBRARY_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==<sp/>VERSION<sp/>======================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_VERSION_MAJOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_VERSION_MINOR<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_VERSION_PATCH<sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>util<sp/>we<sp/>need<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TOSTR_IMPL(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TOSTR(x)<sp/>DOCTEST_TOSTR_IMPL(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_VERSION_STR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_TOSTR(DOCTEST_VERSION_MAJOR)<sp/>&quot;.&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_TOSTR(DOCTEST_VERSION_MINOR)<sp/>&quot;.&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_TOSTR(DOCTEST_VERSION_PATCH)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(DOCTEST_VERSION_MAJOR<sp/>*<sp/>10000<sp/>+<sp/>DOCTEST_VERSION_MINOR<sp/>*<sp/>100<sp/>+<sp/>DOCTEST_VERSION_PATCH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==<sp/>COMPILER<sp/>VERSION<sp/>=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ideas<sp/>for<sp/>the<sp/>version<sp/>stuff<sp/>are<sp/>taken<sp/>from<sp/>here:<sp/>https://github.com/cxxstuff/cxx_detect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CPLUSPLUS<sp/>_MSVC_LANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CPLUSPLUS<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_COMPILER(MAJOR,<sp/>MINOR,<sp/>PATCH)<sp/>((MAJOR)*10000000<sp/>+<sp/>(MINOR)*100000<sp/>+<sp/>(PATCH))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GCC/Clang<sp/>and<sp/>GCC/MSVC<sp/>are<sp/>mutually<sp/>exclusive,<sp/>but<sp/>Clang/MSVC<sp/>are<sp/>not<sp/>because<sp/>of<sp/>clang-cl...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>defined(_MSC_FULL_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_MSC_VER<sp/>==<sp/>_MSC_FULL_VER<sp/>/<sp/>10000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC<sp/>DOCTEST_COMPILER(_MSC_VER<sp/>/<sp/>100,<sp/>_MSC_VER<sp/>%<sp/>100,<sp/>_MSC_FULL_VER<sp/>%<sp/>10000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_COMPILER(_MSC_VER<sp/>/<sp/>100,<sp/>(_MSC_FULL_VER<sp/>/<sp/>100000)<sp/>%<sp/>100,<sp/>_MSC_FULL_VER<sp/>%<sp/>100000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>&amp;&amp;<sp/>defined(__clang_minor__)<sp/>&amp;&amp;<sp/>defined(__clang_patchlevel__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CLANG<sp/>DOCTEST_COMPILER(__clang_major__,<sp/>__clang_minor__,<sp/>__clang_patchlevel__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>defined(__GNUC_MINOR__)<sp/>&amp;&amp;<sp/>defined(__GNUC_PATCHLEVEL__)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GCC<sp/>DOCTEST_COMPILER(__GNUC__,<sp/>__GNUC_MINOR__,<sp/>__GNUC_PATCHLEVEL__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ICC<sp/>DOCTEST_COMPILER(__INTEL_COMPILER<sp/>/<sp/>100,<sp/>__INTEL_COMPILER<sp/>%<sp/>100,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>ICC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CLANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CLANG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CLANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GCC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_ICC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ICC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_ICC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==<sp/>COMPILER<sp/>WARNINGS<sp/>HELPERS<sp/>====================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_CLANG<sp/>&amp;&amp;<sp/>!DOCTEST_ICC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_PRAGMA_TO_STR(x)<sp/>_Pragma(#x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CLANG_SUPPRESS_WARNING_PUSH<sp/>_Pragma(&quot;clang<sp/>diagnostic<sp/>push&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CLANG_SUPPRESS_WARNING(w)<sp/>DOCTEST_PRAGMA_TO_STR(clang<sp/>diagnostic<sp/>ignored<sp/>w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP<sp/>_Pragma(&quot;clang<sp/>diagnostic<sp/>pop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_PUSH<sp/>DOCTEST_CLANG_SUPPRESS_WARNING(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CLANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CLANG_SUPPRESS_WARNING_PUSH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CLANG_SUPPRESS_WARNING(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CLANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_PRAGMA_TO_STR(x)<sp/>_Pragma(#x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GCC_SUPPRESS_WARNING_PUSH<sp/>_Pragma(&quot;GCC<sp/>diagnostic<sp/>push&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GCC_SUPPRESS_WARNING(w)<sp/>DOCTEST_PRAGMA_TO_STR(GCC<sp/>diagnostic<sp/>ignored<sp/>w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GCC_SUPPRESS_WARNING_POP<sp/>_Pragma(&quot;GCC<sp/>diagnostic<sp/>pop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_PUSH<sp/>DOCTEST_GCC_SUPPRESS_WARNING(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GCC_SUPPRESS_WARNING_PUSH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GCC_SUPPRESS_WARNING(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC_SUPPRESS_WARNING_PUSH<sp/>__pragma(warning(push))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC_SUPPRESS_WARNING(w)<sp/>__pragma(warning(disable<sp/>:<sp/>w))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP<sp/>__pragma(warning(pop))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_PUSH<sp/>DOCTEST_MSVC_SUPPRESS_WARNING(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC_SUPPRESS_WARNING_PUSH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC_SUPPRESS_WARNING(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==<sp/>COMPILER<sp/>WARNINGS<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>both<sp/>the<sp/>header<sp/>and<sp/>the<sp/>implementation<sp/>suppress<sp/>all<sp/>of<sp/>these,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>it<sp/>only<sp/>makes<sp/>sense<sp/>to<sp/>aggregate<sp/>them<sp/>like<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_PUSH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wunknown-pragmas&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wweak-vtables&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wpadded&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wmissing-prototypes&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wc++98-compat&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wc++98-compat-pedantic&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_PUSH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wunknown-pragmas&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wpragmas&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Weffc++&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wstrict-overflow&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wstrict-aliasing&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wmissing-declarations&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wuseless-cast&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wnoexcept&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_PUSH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>these<sp/>4<sp/>also<sp/>disabled<sp/>globally<sp/>via<sp/>cmake:<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4514)<sp/></highlight><highlight class="comment">/*<sp/>unreferenced<sp/>inline<sp/>function<sp/>has<sp/>been<sp/>removed<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4571)<sp/></highlight><highlight class="comment">/*<sp/>SEH<sp/>related<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4710)<sp/></highlight><highlight class="comment">/*<sp/>function<sp/>not<sp/>inlined<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4711)<sp/></highlight><highlight class="comment">/*<sp/>function<sp/>selected<sp/>for<sp/>inline<sp/>expansion*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>common<sp/>ones<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4616)<sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>compiler<sp/>warning<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4619)<sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>compiler<sp/>warning<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4996)<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>compiler<sp/>encountered<sp/>a<sp/>deprecated<sp/>declaration<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4706)<sp/></highlight><highlight class="comment">/*<sp/>assignment<sp/>within<sp/>conditional<sp/>expression<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4512)<sp/></highlight><highlight class="comment">/*<sp/>&apos;class&apos;<sp/>:<sp/>assignment<sp/>operator<sp/>could<sp/>not<sp/>be<sp/>generated<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4127)<sp/></highlight><highlight class="comment">/*<sp/>conditional<sp/>expression<sp/>is<sp/>constant<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4820)<sp/></highlight><highlight class="comment">/*<sp/>padding<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4625)<sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>constructor<sp/>was<sp/>implicitly<sp/>deleted<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4626)<sp/></highlight><highlight class="comment">/*<sp/>assignment<sp/>operator<sp/>was<sp/>implicitly<sp/>deleted<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(5027)<sp/></highlight><highlight class="comment">/*<sp/>move<sp/>assignment<sp/>operator<sp/>implicitly<sp/>deleted<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(5026)<sp/></highlight><highlight class="comment">/*<sp/>move<sp/>constructor<sp/>was<sp/>implicitly<sp/>deleted<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4640)<sp/></highlight><highlight class="comment">/*<sp/>construction<sp/>of<sp/>local<sp/>static<sp/>object<sp/>not<sp/>thread-safe<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(5045)<sp/></highlight><highlight class="comment">/*<sp/>Spectre<sp/>mitigation<sp/>for<sp/>memory<sp/>load<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(5264)<sp/></highlight><highlight class="comment">/*<sp/>&apos;variable-name&apos;:<sp/>&apos;const&apos;<sp/>variable<sp/>is<sp/>not<sp/>used<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>static<sp/>analysis<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(26439)<sp/></highlight><highlight class="comment">/*<sp/>Function<sp/>may<sp/>not<sp/>throw.<sp/>Declare<sp/>it<sp/>&apos;noexcept&apos;<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(26495)<sp/></highlight><highlight class="comment">/*<sp/>Always<sp/>initialize<sp/>a<sp/>member<sp/>variable<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(26451)<sp/></highlight><highlight class="comment">/*<sp/>Arithmetic<sp/>overflow<sp/>...<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(26444)<sp/></highlight><highlight class="comment">/*<sp/>Avoid<sp/>unnamed<sp/>objects<sp/>with<sp/>custom<sp/>ctor<sp/>and<sp/>dtor...<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(26812)<sp/></highlight><highlight class="comment">/*<sp/>Prefer<sp/>&apos;enum<sp/>class&apos;<sp/>over<sp/>&apos;enum&apos;<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SUPPRESS_COMMON_WARNINGS_POP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_POP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_PUSH</highlight></codeline>
<codeline lineno="217"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(</highlight><highlight class="stringliteral">&quot;-Wnon-virtual-dtor&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wdeprecated&quot;)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING_PUSH</highlight></codeline>
<codeline lineno="221"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wctor-dtor-privacy&quot;)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wnon-virtual-dtor&quot;)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wsign-promo&quot;)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_PUSH</highlight></codeline>
<codeline lineno="226"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING(4623)<sp/></highlight><highlight class="comment">//<sp/>default<sp/>constructor<sp/>was<sp/>implicitly<sp/>defined<sp/>as<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_PUSH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4548)<sp/></highlight><highlight class="comment">/*<sp/>before<sp/>comma<sp/>no<sp/>effect;<sp/>expected<sp/>side<sp/>-<sp/>effect<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4265)<sp/></highlight><highlight class="comment">/*<sp/>virtual<sp/>functions,<sp/>but<sp/>destructor<sp/>is<sp/>not<sp/>virtual<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4986)<sp/></highlight><highlight class="comment">/*<sp/>exception<sp/>specification<sp/>does<sp/>not<sp/>match<sp/>previous<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4350)<sp/></highlight><highlight class="comment">/*<sp/>&apos;member1&apos;<sp/>called<sp/>instead<sp/>of<sp/>&apos;member2&apos;<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4668)<sp/></highlight><highlight class="comment">/*<sp/>not<sp/>defined<sp/>as<sp/>a<sp/>preprocessor<sp/>macro<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4365)<sp/></highlight><highlight class="comment">/*<sp/>signed/unsigned<sp/>mismatch<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4774)<sp/></highlight><highlight class="comment">/*<sp/>format<sp/>string<sp/>not<sp/>a<sp/>string<sp/>literal<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4820)<sp/></highlight><highlight class="comment">/*<sp/>padding<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4625)<sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>constructor<sp/>was<sp/>implicitly<sp/>deleted<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4626)<sp/></highlight><highlight class="comment">/*<sp/>assignment<sp/>operator<sp/>was<sp/>implicitly<sp/>deleted<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(5027)<sp/></highlight><highlight class="comment">/*<sp/>move<sp/>assignment<sp/>operator<sp/>implicitly<sp/>deleted<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(5026)<sp/></highlight><highlight class="comment">/*<sp/>move<sp/>constructor<sp/>was<sp/>implicitly<sp/>deleted<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4623)<sp/></highlight><highlight class="comment">/*<sp/>default<sp/>constructor<sp/>was<sp/>implicitly<sp/>deleted<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(5039)<sp/></highlight><highlight class="comment">/*<sp/>pointer<sp/>to<sp/>pot.<sp/>throwing<sp/>function<sp/>passed<sp/>to<sp/>extern<sp/>C<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(5045)<sp/></highlight><highlight class="comment">/*<sp/>Spectre<sp/>mitigation<sp/>for<sp/>memory<sp/>load<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(5105)<sp/></highlight><highlight class="comment">/*<sp/>macro<sp/>producing<sp/>&apos;defined&apos;<sp/>has<sp/>undefined<sp/>behavior<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4738)<sp/></highlight><highlight class="comment">/*<sp/>storing<sp/>float<sp/>result<sp/>in<sp/>memory,<sp/>loss<sp/>of<sp/>performance<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(5262)<sp/></highlight><highlight class="comment">/*<sp/>implicit<sp/>fall-through<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END<sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==<sp/>FEATURE<sp/>DETECTION<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>general<sp/>compiler<sp/>feature<sp/>support<sp/>table:<sp/>https://en.cppreference.com/w/cpp/compiler_support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>C++11<sp/>feature<sp/>support<sp/>table:<sp/>https://msdn.microsoft.com/en-us/library/hh567368.aspx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GCC<sp/>C++11<sp/>feature<sp/>support<sp/>table:<sp/>https://gcc.gnu.org/projects/cxx-status.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>version<sp/>table:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.3<sp/>(17)<sp/>_MSC_VER<sp/>==<sp/>1930<sp/>(Visual<sp/>Studio<sp/>2022)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.2<sp/>(16)<sp/>_MSC_VER<sp/>==<sp/>1920<sp/>(Visual<sp/>Studio<sp/>2019)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.1<sp/>(15)<sp/>_MSC_VER<sp/>==<sp/>1910<sp/>(Visual<sp/>Studio<sp/>2017)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.0<sp/><sp/><sp/><sp/><sp/><sp/>_MSC_VER<sp/>==<sp/>1900<sp/>(Visual<sp/>Studio<sp/>2015)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>12.0<sp/><sp/><sp/><sp/><sp/><sp/>_MSC_VER<sp/>==<sp/>1800<sp/>(Visual<sp/>Studio<sp/>2013)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>11.0<sp/><sp/><sp/><sp/><sp/><sp/>_MSC_VER<sp/>==<sp/>1700<sp/>(Visual<sp/>Studio<sp/>2012)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>10.0<sp/><sp/><sp/><sp/><sp/><sp/>_MSC_VER<sp/>==<sp/>1600<sp/>(Visual<sp/>Studio<sp/>2010)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>9.0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>_MSC_VER<sp/>==<sp/>1500<sp/>(Visual<sp/>Studio<sp/>2008)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>8.0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>_MSC_VER<sp/>==<sp/>1400<sp/>(Visual<sp/>Studio<sp/>2005)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Universal<sp/>Windows<sp/>Platform<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WINAPI_FAMILY)<sp/>&amp;&amp;<sp/>(WINAPI_FAMILY<sp/>==<sp/>WINAPI_FAMILY_APP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_NO_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>WINAPI_FAMILY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC<sp/>&amp;&amp;<sp/>!defined(DOCTEST_CONFIG_WINDOWS_SEH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DOCTEST_CONFIG_NO_WINDOWS_SEH)<sp/>&amp;&amp;<sp/>defined(DOCTEST_CONFIG_WINDOWS_SEH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_CONFIG_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_WIN32)<sp/>&amp;&amp;<sp/>!defined(__QNX__)<sp/>&amp;&amp;<sp/>!defined(DOCTEST_CONFIG_POSIX_SIGNALS)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!defined(__EMSCRIPTEN__)<sp/>&amp;&amp;<sp/>!defined(__wasi__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DOCTEST_CONFIG_NO_POSIX_SIGNALS)<sp/>&amp;&amp;<sp/>defined(DOCTEST_CONFIG_POSIX_SIGNALS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_CONFIG_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(__cpp_exceptions)<sp/>&amp;&amp;<sp/>!defined(__EXCEPTIONS)<sp/>&amp;&amp;<sp/>!defined(_CPPUNWIND)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>defined(__wasi__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>no<sp/>exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DOCTEST_CONFIG_NO_EXCEPTIONS)<sp/>&amp;&amp;<sp/>!defined(DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS<sp/>&amp;&amp;<sp/>!DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__wasi__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_NO_MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN)<sp/>&amp;&amp;<sp/>!defined(DOCTEST_CONFIG_IMPLEMENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_IMPLEMENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(__CYGWIN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SYMBOL_EXPORT<sp/>__declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SYMBOL_IMPORT<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SYMBOL_EXPORT<sp/>__attribute__((dllexport))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SYMBOL_IMPORT<sp/>__attribute__((dllimport))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SYMBOL_EXPORT<sp/>__attribute__((visibility(&quot;default&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SYMBOL_IMPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_IMPLEMENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INTERFACE<sp/>DOCTEST_SYMBOL_EXPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_IMPLEMENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INTERFACE<sp/>DOCTEST_SYMBOL_IMPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_IMPLEMENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INTERFACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>needed<sp/>for<sp/>extern<sp/>template<sp/>instantiations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>https://github.com/fmtlib/fmt/issues/2228</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INTERFACE_DECL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INTERFACE_DEF<sp/>DOCTEST_INTERFACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INTERFACE_DECL<sp/>DOCTEST_INTERFACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INTERFACE_DEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_NOINLINE<sp/>__declspec(noinline)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ALIGNMENT(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>DOCTEST_CLANG<sp/>&amp;&amp;<sp/>DOCTEST_CLANG<sp/>&lt;<sp/>DOCTEST_COMPILER(3,<sp/>5,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_NOINLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ALIGNMENT(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_NOINLINE<sp/>__attribute__((noinline))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_UNUSED<sp/>__attribute__((unused))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ALIGNMENT(x)<sp/>__attribute__((aligned(x)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_NO_CONTRADICTING_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INLINE_NOINLINE<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INLINE_NOINLINE<sp/>inline<sp/>DOCTEST_NOINLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_NORETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC<sp/>&amp;&amp;<sp/>(DOCTEST_MSVC<sp/>&lt;<sp/>DOCTEST_COMPILER(19,<sp/>0,<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_NORETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_NORETURN<sp/>[[noreturn]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_NORETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC<sp/>&amp;&amp;<sp/>(DOCTEST_MSVC<sp/>&lt;<sp/>DOCTEST_COMPILER(19,<sp/>0,<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_NOEXCEPT<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONSTEXPR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC<sp/>&amp;&amp;<sp/>(DOCTEST_MSVC<sp/>&lt;<sp/>DOCTEST_COMPILER(19,<sp/>0,<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONSTEXPR<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONSTEXPR_FUNC<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONSTEXPR<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONSTEXPR_FUNC<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONSTEXPR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_NO_SANITIZE_INTEGER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_CLANG<sp/>&gt;=<sp/>DOCTEST_COMPILER(3,<sp/>7,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_NO_SANITIZE_INTEGER<sp/>__attribute__((no_sanitize(&quot;integer&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_NO_SANITIZE_INTEGER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_NO_SANITIZE_INTEGER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==<sp/>FEATURE<sp/>DETECTION<sp/>END<sp/>========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_DECLARE_INTERFACE(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="408"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>virtual<sp/>~name();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name()<sp/>=<sp/>default;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name(const<sp/>name&amp;)<sp/>=<sp/>delete;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name(name&amp;&amp;)<sp/>=<sp/>delete;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="412"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name&amp;<sp/>operator=(const<sp/>name&amp;)<sp/>=<sp/>delete;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name&amp;<sp/>operator=(name&amp;&amp;)<sp/>=<sp/>delete;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_DEFINE_INTERFACE(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name::~name()<sp/>=<sp/>default;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internal<sp/>macros<sp/>for<sp/>string<sp/>concatenation<sp/>and<sp/>anonymous<sp/>variable<sp/>name<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CAT_IMPL(s1,<sp/>s2)<sp/>s1##s2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CAT(s1,<sp/>s2)<sp/>DOCTEST_CAT_IMPL(s1,<sp/>s2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__COUNTER__<sp/></highlight><highlight class="comment">//<sp/>not<sp/>standard<sp/>and<sp/>may<sp/>be<sp/>missing<sp/>for<sp/>some<sp/>compilers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ANONYMOUS(x)<sp/>DOCTEST_CAT(x,<sp/>__COUNTER__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>__COUNTER__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ANONYMOUS(x)<sp/>DOCTEST_CAT(x,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__COUNTER__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REF_WRAP(x)<sp/>x&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REF_WRAP(x)<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>using<sp/>__APPLE__<sp/>because...<sp/>this<sp/>is<sp/>how<sp/>Catch<sp/>does<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__MAC_OS_X_VERSION_MIN_REQUIRED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_PLATFORM_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__IPHONE_OS_VERSION_MIN_REQUIRED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_PLATFORM_IPHONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__wasi__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_PLATFORM_WASI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_PLATFORM_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">doctest<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>consume(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GLOBAL_NO_WARNINGS(var,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wglobal-constructors&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>int<sp/>var<sp/>=<sp/>doctest::detail::consume(&amp;var,<sp/>__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_BREAK_INTO_DEBUGGER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>probably<sp/>take<sp/>a<sp/>look<sp/>at<sp/>https://github.com/scottt/debugbreak</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(defined(__i386)<sp/>||<sp/>defined(__x86_64))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Break<sp/>at<sp/>the<sp/>location<sp/>of<sp/>the<sp/>failing<sp/>check<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BREAK_INTO_DEBUGGER()<sp/>__asm__(&quot;int<sp/>$3\n&quot;</highlight><highlight class="normal"><sp/>:<sp/>:)<sp/></highlight><highlight class="comment">//<sp/>NOLINT(hicpp-no-assembler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BREAK_INTO_DEBUGGER()<sp/>raise(SIGTRAP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(DOCTEST_PLATFORM_MAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__x86_64)<sp/>||<sp/>defined(__x86_64__)<sp/>||<sp/>defined(__amd64__)<sp/>||<sp/>defined(__i386)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BREAK_INTO_DEBUGGER()<sp/>__asm__(&quot;int<sp/>$3\n&quot;</highlight><highlight class="normal"><sp/>:<sp/>:)<sp/></highlight><highlight class="comment">//<sp/>NOLINT(hicpp-no-assembler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__ppc__)<sp/>||<sp/>defined(__ppc64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://www.cocoawithlove.com/2008/03/break-into-debugger.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BREAK_INTO_DEBUGGER()<sp/>__asm__(&quot;li<sp/>r0,<sp/>20\nsc\nnop\nli<sp/>r0,<sp/>37\nli<sp/>r4,<sp/>2\nsc\nnop\n&quot;</highlight><highlight class="normal">:<sp/>:<sp/>:<sp/>&quot;memory&quot;,&quot;r0&quot;,&quot;r3&quot;,&quot;r4&quot;)<sp/></highlight><highlight class="comment">//<sp/>NOLINT(hicpp-no-assembler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BREAK_INTO_DEBUGGER()<sp/>__asm__(&quot;brk<sp/>#0&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>NOLINT(hicpp-no-assembler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BREAK_INTO_DEBUGGER()<sp/>__debugbreak()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__MINGW32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(</highlight><highlight class="stringliteral">&quot;-Wredundant-decls&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="478"><highlight class="normal">extern<sp/>&quot;C&quot;<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>DebugBreak();</highlight></codeline>
<codeline lineno="479"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BREAK_INTO_DEBUGGER()<sp/>::DebugBreak()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BREAK_INTO_DEBUGGER()<sp/>(static_cast&lt;void&gt;(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_BREAK_INTO_DEBUGGER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>kept<sp/>here<sp/>for<sp/>backwards<sp/>compatibility<sp/>since<sp/>the<sp/>config<sp/>option<sp/>was<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_USE_IOSFWD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_USE_STD_HEADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_USE_STD_HEADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_USE_IOSFWD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>clang<sp/>-<sp/>always<sp/>include<sp/>ciso646<sp/>(which<sp/>drags<sp/>some<sp/>std<sp/>stuff)<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>want<sp/>to<sp/>check<sp/>if<sp/>we<sp/>are<sp/>using<sp/>libc++<sp/>with<sp/>the<sp/>_LIBCPP_VERSION<sp/>macro<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>case<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>forward<sp/>declare<sp/>stuff<sp/>from<sp/>std<sp/>-<sp/>for<sp/>reference:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/doctest/doctest/issues/126</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/doctest/doctest/issues/356</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_CLANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ciso646&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>clang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_LIBCPP_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_USE_STD_HEADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_USE_STD_HEADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_LIBCPP_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_USE_STD_HEADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal">DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;istream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_USE_STD_HEADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declaring<sp/>&apos;X&apos;<sp/>in<sp/>namespace<sp/>std<sp/>is<sp/>not<sp/>permitted<sp/>by<sp/>the<sp/>C++<sp/>Standard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4643)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">namespace<sp/>std<sp/>{<sp/></highlight><highlight class="comment">//<sp/>NOLINT(cert-dcl58-cpp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>decltype(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>nullptr_t;<sp/></highlight><highlight class="comment">//<sp/>NOLINT(modernize-use-using)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">typedef<sp/>decltype(sizeof(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*))<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>NOLINT(modernize-use-using)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal">template<sp/>&lt;class<sp/>charT&gt;</highlight></codeline>
<codeline lineno="526" refid="structstd_1_1char__traits" refkind="compound"><highlight class="normal">struct<sp/><ref refid="structstd_1_1char__traits" kindref="compound">char_traits</ref>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="528"><highlight class="normal">struct<sp/><ref refid="structstd_1_1char__traits" kindref="compound">char_traits</ref>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">template<sp/>&lt;class<sp/>charT,<sp/>class<sp/>traits&gt;</highlight></codeline>
<codeline lineno="530" refid="classstd_1_1basic__ostream" refkind="compound"><highlight class="normal">class<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">basic_ostream</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT(fuchsia-virtual-inheritance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">typedef<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">basic_ostream</ref>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/><ref refid="structstd_1_1char__traits" kindref="compound">char_traits</ref>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;&gt;<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">ostream</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT(modernize-use-using)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">template&lt;class<sp/>traits&gt;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><ref refid="classstd_1_1basic__ostream" kindref="compound">basic_ostream</ref>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>traits&gt;&amp;<sp/>operator&lt;&lt;(<ref refid="classstd_1_1basic__ostream" kindref="compound">basic_ostream</ref>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>traits&gt;&amp;,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="535"><highlight class="normal">template<sp/>&lt;class<sp/>charT,<sp/>class<sp/>traits&gt;</highlight></codeline>
<codeline lineno="536" refid="classstd_1_1basic__istream" refkind="compound"><highlight class="normal">class<sp/><ref refid="classstd_1_1basic__istream" kindref="compound">basic_istream</ref>;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">typedef<sp/><ref refid="classstd_1_1basic__istream" kindref="compound">basic_istream</ref>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/><ref refid="structstd_1_1char__traits" kindref="compound">char_traits</ref>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;&gt;<sp/><ref refid="classstd_1_1basic__istream" kindref="compound">istream</ref>;<sp/></highlight><highlight class="comment">//<sp/>NOLINT(modernize-use-using)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">template<sp/>&lt;class...<sp/>Types&gt;</highlight></codeline>
<codeline lineno="539" refid="classstd_1_1tuple" refkind="compound"><highlight class="normal">class<sp/><ref refid="classstd_1_1tuple" kindref="compound">tuple</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC<sp/>&gt;=<sp/>DOCTEST_COMPILER(19,<sp/>20,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>this<sp/>issue<sp/>on<sp/>why<sp/>this<sp/>is<sp/>needed:<sp/>https://github.com/doctest/doctest/issues/183</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Ty&gt;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">allocator;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Elem,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">basic_string;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/>basic_string&lt;char,<sp/>char_traits&lt;char&gt;,<sp/>allocator&lt;char&gt;&gt;;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>VS<sp/>2019</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_USE_STD_HEADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">doctest<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::size_t;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_running_in_test;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_STRING_SIZE_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_STRING_SIZE_TYPE<sp/>unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>24<sp/>byte<sp/>string<sp/>class<sp/>(can<sp/>be<sp/>as<sp/>small<sp/>as<sp/>17<sp/>for<sp/>x64<sp/>and<sp/>13<sp/>for<sp/>x86)<sp/>that<sp/>can<sp/>hold<sp/>strings<sp/>with<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>up<sp/>to<sp/>23<sp/>chars<sp/>on<sp/>the<sp/>stack<sp/>before<sp/>going<sp/>on<sp/>the<sp/>heap<sp/>-<sp/>the<sp/>last<sp/>byte<sp/>of<sp/>the<sp/>buffer<sp/>is<sp/>used<sp/>for:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>&quot;is<sp/>small&quot;<sp/>bit<sp/>-<sp/>the<sp/>highest<sp/>bit<sp/>-<sp/>if<sp/>&quot;0&quot;<sp/>then<sp/>it<sp/>is<sp/>small<sp/>-<sp/>otherwise<sp/>its<sp/>&quot;1&quot;<sp/>(128)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>if<sp/>small<sp/>-<sp/>capacity<sp/>left<sp/>before<sp/>going<sp/>on<sp/>the<sp/>heap<sp/>-<sp/>using<sp/>the<sp/>lowest<sp/>5<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>if<sp/>small<sp/>-<sp/>2<sp/>bits<sp/>are<sp/>left<sp/>unused<sp/>-<sp/>the<sp/>second<sp/>and<sp/>third<sp/>highest<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>if<sp/>small<sp/>-<sp/>acts<sp/>as<sp/>a<sp/>null<sp/>terminator<sp/>if<sp/>strlen()<sp/>is<sp/>23<sp/>(24<sp/>including<sp/>the<sp/>null<sp/>terminator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>the<sp/>&quot;is<sp/>small&quot;<sp/>bit<sp/>remains<sp/>&quot;0&quot;<sp/>(&quot;as<sp/>well<sp/>as<sp/>the<sp/>capacity<sp/>left&quot;)<sp/>so<sp/>its<sp/>OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Idea<sp/>taken<sp/>from<sp/>this<sp/>lecture<sp/>about<sp/>the<sp/>string<sp/>implementation<sp/>of<sp/>facebook/folly<sp/>-<sp/>fbstring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://www.youtube.com/watch?v=kPR8h4-qZdk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>optimizations<sp/>-<sp/>like<sp/>not<sp/>deleting<sp/>memory<sp/>unnecessarily<sp/>in<sp/>operator=<sp/>and<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>resize/reserve/clear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>replace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>back/front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>iterator<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>find<sp/>&amp;<sp/>friends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>push_back/pop_back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>assign/insert/erase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>relational<sp/>operators<sp/>as<sp/>free<sp/>functions<sp/>-<sp/>taking<sp/>const<sp/>char*<sp/>as<sp/>one<sp/>of<sp/>the<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587" refid="classdoctest_1_1String" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref></highlight></codeline>
<codeline lineno="588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>size_type<sp/>=<sp/>DOCTEST_CONFIG_STRING_SIZE_TYPE;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/>size_type<sp/>len<sp/><sp/>=<sp/>24;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/>size_type<sp/>last<sp/>=<sp/>len<sp/>-<sp/>1;<sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">view<sp/></highlight><highlight class="comment">//<sp/>len<sp/>should<sp/>be<sp/>more<sp/>than<sp/>sizeof(view)<sp/>-<sp/>because<sp/>of<sp/>the<sp/>final<sp/>byte<sp/>for<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/>ptr;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>size;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>capacity;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[len];<sp/></highlight><highlight class="comment">//<sp/>NOLINT(*-avoid-c-arrays)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view<sp/>data;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>allocate(size_type<sp/>sz);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOnStack()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(buf[last]<sp/>&amp;<sp/>128)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOnHeap()<sp/>noexcept;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLast(size_type<sp/>in<sp/>=<sp/>last)<sp/>noexcept;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSize(size_type<sp/>sz)<sp/>noexcept;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/>size_type<sp/>npos<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">size_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classdoctest_1_1String" kindref="compound">String</ref>();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>noExplicitConstructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/>size_type<sp/>in_size);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(<ref refid="classstd_1_1basic__istream" kindref="compound">std::istream</ref>&amp;<sp/>in,<sp/>size_type<sp/>in_size);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(<ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;&amp;<sp/>other)<sp/>noexcept;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>operator=(<ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;&amp;<sp/>other)<sp/>noexcept;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>operator[](size_type<sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>operator[](size_type<sp/>i);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>only<sp/>functions<sp/>I&apos;m<sp/>willing<sp/>to<sp/>leave<sp/>in<sp/>the<sp/>interface<sp/>-<sp/>available<sp/>for<sp/>inlining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c_str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classdoctest_1_1String" kindref="compound">String</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;c_str();<sp/>}<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_str()<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isOnStack())<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buf);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data.ptr;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>capacity()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>substr(size_type<sp/>pos,<sp/>size_type<sp/>cnt<sp/>=<sp/>npos)<sp/>&amp;&amp;;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>substr(size_type<sp/>pos,<sp/>size_type<sp/>cnt<sp/>=<sp/>npos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>find(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch,<sp/>size_type<sp/>pos<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>rfind(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch,<sp/>size_type<sp/>pos<sp/>=<sp/>npos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_case<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_case<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>DOCTEST_INTERFACE<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>operator&lt;&lt;(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>in);</highlight></codeline>
<codeline lineno="663"><highlight class="normal">};</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="668"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="669"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="670"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="671"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="672"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674" refid="classdoctest_1_1Contains" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkWith(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>string;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">};</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref>&amp;<sp/>in);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="686"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="687"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="688"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Color<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Enum</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>None<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>White,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Red,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Green,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Blue,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cyan,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yellow,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grey,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bright<sp/>=<sp/>0x10,</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BrightRed<sp/><sp/><sp/>=<sp/>Bright<sp/>|<sp/>Red,</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BrightGreen<sp/>=<sp/>Bright<sp/>|<sp/>Green,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LightGrey<sp/><sp/><sp/>=<sp/>Bright<sp/>|<sp/>Grey,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BrightWhite<sp/>=<sp/>Bright<sp/>|<sp/>White</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>operator&lt;&lt;(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>s,<sp/>Color::Enum<sp/>code);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">assertType<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Enum</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>macro<sp/>traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_warn<sp/><sp/><sp/><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_check<sp/><sp/><sp/>=<sp/>2<sp/>*<sp/>is_warn,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_require<sp/>=<sp/>2<sp/>*<sp/>is_check,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_normal<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2<sp/>*<sp/>is_require,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_throws<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2<sp/>*<sp/>is_normal,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_throws_as<sp/><sp/><sp/>=<sp/>2<sp/>*<sp/>is_throws,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_throws_with<sp/>=<sp/>2<sp/>*<sp/>is_throws_as,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_nothrow<sp/><sp/><sp/><sp/><sp/>=<sp/>2<sp/>*<sp/>is_throws_with,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_false<sp/>=<sp/>2<sp/>*<sp/>is_nothrow,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_unary<sp/>=<sp/>2<sp/>*<sp/>is_false,<sp/></highlight><highlight class="comment">//<sp/>not<sp/>checked<sp/>anywhere<sp/>-<sp/>used<sp/>just<sp/>to<sp/>distinguish<sp/>the<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_eq<sp/>=<sp/>2<sp/>*<sp/>is_unary,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ne<sp/>=<sp/>2<sp/>*<sp/>is_eq,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_lt<sp/>=<sp/>2<sp/>*<sp/>is_ne,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_gt<sp/>=<sp/>2<sp/>*<sp/>is_lt,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ge<sp/>=<sp/>2<sp/>*<sp/>is_gt,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_le<sp/>=<sp/>2<sp/>*<sp/>is_ge,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>macro<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN<sp/><sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK<sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE<sp/>=<sp/>is_normal<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_FALSE<sp/><sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_false<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_FALSE<sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_false<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_FALSE<sp/>=<sp/>is_normal<sp/>|<sp/>is_false<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_THROWS<sp/><sp/><sp/><sp/>=<sp/>is_throws<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_THROWS<sp/><sp/><sp/>=<sp/>is_throws<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_THROWS<sp/>=<sp/>is_throws<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_THROWS_AS<sp/><sp/><sp/><sp/>=<sp/>is_throws_as<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_THROWS_AS<sp/><sp/><sp/>=<sp/>is_throws_as<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_THROWS_AS<sp/>=<sp/>is_throws_as<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_THROWS_WITH<sp/><sp/><sp/><sp/>=<sp/>is_throws_with<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_THROWS_WITH<sp/><sp/><sp/>=<sp/>is_throws_with<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_THROWS_WITH<sp/>=<sp/>is_throws_with<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_THROWS_WITH_AS<sp/><sp/><sp/><sp/>=<sp/>is_throws_with<sp/>|<sp/>is_throws_as<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_THROWS_WITH_AS<sp/><sp/><sp/>=<sp/>is_throws_with<sp/>|<sp/>is_throws_as<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_THROWS_WITH_AS<sp/>=<sp/>is_throws_with<sp/>|<sp/>is_throws_as<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_NOTHROW<sp/><sp/><sp/><sp/>=<sp/>is_nothrow<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_NOTHROW<sp/><sp/><sp/>=<sp/>is_nothrow<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_NOTHROW<sp/>=<sp/>is_nothrow<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_EQ<sp/><sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_eq<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_EQ<sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_eq<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_EQ<sp/>=<sp/>is_normal<sp/>|<sp/>is_eq<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_NE<sp/><sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_ne<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_NE<sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_ne<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_NE<sp/>=<sp/>is_normal<sp/>|<sp/>is_ne<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_GT<sp/><sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_gt<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_GT<sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_gt<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_GT<sp/>=<sp/>is_normal<sp/>|<sp/>is_gt<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_LT<sp/><sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_lt<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_LT<sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_lt<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_LT<sp/>=<sp/>is_normal<sp/>|<sp/>is_lt<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_GE<sp/><sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_ge<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_GE<sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_ge<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_GE<sp/>=<sp/>is_normal<sp/>|<sp/>is_ge<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_LE<sp/><sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_le<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_LE<sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_le<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_LE<sp/>=<sp/>is_normal<sp/>|<sp/>is_le<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_UNARY<sp/><sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_unary<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_UNARY<sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_unary<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_UNARY<sp/>=<sp/>is_normal<sp/>|<sp/>is_unary<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_WARN_UNARY_FALSE<sp/><sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_false<sp/>|<sp/>is_unary<sp/>|<sp/>is_warn,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_CHECK_UNARY_FALSE<sp/><sp/><sp/>=<sp/>is_normal<sp/>|<sp/>is_false<sp/>|<sp/>is_unary<sp/>|<sp/>is_check,</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DT_REQUIRE_UNARY_FALSE<sp/>=<sp/>is_normal<sp/>|<sp/>is_false<sp/>|<sp/>is_unary<sp/>|<sp/>is_require,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>assertType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>assertString(assertType::Enum<sp/>at);</highlight></codeline>
<codeline lineno="805"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>failureString(assertType::Enum<sp/>at);</highlight></codeline>
<codeline lineno="806"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>skipPathFromFilename(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808" refid="structdoctest_1_1TestCaseData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1TestCaseData" kindref="compound">TestCaseData</ref></highlight></codeline>
<codeline lineno="809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/><sp/><sp/><sp/><sp/><sp/>m_file;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>file<sp/>in<sp/>which<sp/>the<sp/>test<sp/>was<sp/>registered<sp/>(using<sp/>String<sp/>-<sp/>see<sp/>#350)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>m_line;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>line<sp/>where<sp/>the<sp/>test<sp/>was<sp/>registered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>m_name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>m_test_suite;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>test<sp/>suite<sp/>in<sp/>which<sp/>the<sp/>test<sp/>was<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>m_description;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_skip;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_no_breaks;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_no_output;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_may_fail;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_should_fail;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_expected_failures;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_timeout;</highlight></codeline>
<codeline lineno="822"><highlight class="normal">};</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824" refid="structdoctest_1_1AssertData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1AssertData" kindref="compound">AssertData</ref></highlight></codeline>
<codeline lineno="825"><highlight class="normal">{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>common<sp/>-<sp/>for<sp/>all<sp/>asserts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1TestCaseData" kindref="compound">TestCaseData</ref>*<sp/>m_test_case;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>assertType::Enum<sp/><sp/><sp/><sp/>m_at;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_file;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_line;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_expr;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_failed;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception-related<sp/>-<sp/>for<sp/>all<sp/>asserts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/>m_threw;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>m_exception;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>normal<sp/>asserts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>m_decomp;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>specific<sp/>exception-related<sp/>asserts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_threw_as;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/>m_exception_type;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845" refid="classdoctest_1_1AssertData_1_1StringContains" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1AssertData_1_1StringContains" kindref="compound">StringContains</ref><sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref><sp/>content;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isContains;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1AssertData_1_1StringContains" kindref="compound">StringContains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>str)<sp/>:<sp/>content(str),<sp/>isContains(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1AssertData_1_1StringContains" kindref="compound">StringContains</ref>(<ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref><sp/>cntn)<sp/>:<sp/>content(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref>&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cntn)),<sp/>isContains(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>str)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isContains<sp/>?<sp/>(content<sp/>==<sp/>str)<sp/>:<sp/>(content.string<sp/>==<sp/>str);<sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>content.string;<sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c_str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>content.string.c_str();<sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>m_exception_string;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1AssertData" kindref="compound">AssertData</ref>(assertType::Enum<sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>exception_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1AssertData_1_1StringContains" kindref="compound">StringContains</ref>&amp;<sp/>exception_string);</highlight></codeline>
<codeline lineno="863"><highlight class="normal">};</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865" refid="structdoctest_1_1MessageData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1MessageData" kindref="compound">MessageData</ref></highlight></codeline>
<codeline lineno="866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_string;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>m_file;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_line;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>assertType::Enum<sp/>m_severity;</highlight></codeline>
<codeline lineno="871"><highlight class="normal">};</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873" refid="structdoctest_1_1SubcaseSignature" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1SubcaseSignature" kindref="compound">SubcaseSignature</ref></highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/><sp/><sp/><sp/><sp/><sp/>m_name;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>m_file;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_line;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1SubcaseSignature" kindref="compound">SubcaseSignature</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1SubcaseSignature" kindref="compound">SubcaseSignature</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="881"><highlight class="normal">};</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883" refid="structdoctest_1_1IContextScope" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1IContextScope" kindref="compound">IContextScope</ref></highlight></codeline>
<codeline lineno="884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_DECLARE_INTERFACE(<ref refid="structdoctest_1_1IContextScope" kindref="compound">IContextScope</ref>)</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stringify(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="887"><highlight class="normal">};</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/>TestCase;</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893" refid="structdoctest_1_1ContextOptions" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1ContextOptions" kindref="compound">ContextOptions</ref><sp/></highlight></codeline>
<codeline lineno="894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>cout<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>stdout<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binary_name;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>test<sp/>binary<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">detail::TestCase</ref>*<sp/>currentTest<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>==<sp/>parameters<sp/>from<sp/>the<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/><sp/><sp/>out;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>filename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/><sp/><sp/>order_by;<sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>tests<sp/>should<sp/>be<sp/>ordered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rand_seed;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>seed<sp/>for<sp/>rand<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>first;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>(matching)<sp/>test<sp/>to<sp/>be<sp/>executed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>last;<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>(matching)<sp/>test<sp/>to<sp/>be<sp/>executed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abort_after;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>tests<sp/>after<sp/>this<sp/>many<sp/>failed<sp/>assertions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subcase_filter_levels;<sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>subcase<sp/>filters<sp/>for<sp/>the<sp/>first<sp/>N<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>include<sp/>successful<sp/>assertions<sp/>in<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>case_sensitive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>filtering<sp/>should<sp/>be<sp/>case<sp/>sensitive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exit;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>program<sp/>should<sp/>be<sp/>exited<sp/>after<sp/>the<sp/>tests<sp/>are<sp/>ran/whatever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>duration;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>time<sp/>duration<sp/>of<sp/>each<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>minimal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimal<sp/>console<sp/>output<sp/>(only<sp/>test<sp/>failures)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>quiet;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>console<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_throw;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>skip<sp/>exceptions-related<sp/>assertion<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_exitcode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>framework<sp/>should<sp/>return<sp/>0<sp/>as<sp/>the<sp/>exitcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_run;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>not<sp/>run<sp/>the<sp/>tests<sp/>at<sp/>all<sp/>(can<sp/>be<sp/>done<sp/>with<sp/>an<sp/>&quot;*&quot;<sp/>exclude)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_intro;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>not<sp/>print<sp/>the<sp/>intro<sp/>of<sp/>the<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_version;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>not<sp/>print<sp/>the<sp/>version<sp/>of<sp/>the<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_colors;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>output<sp/>to<sp/>the<sp/>console<sp/>should<sp/>be<sp/>colorized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force_colors;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>forces<sp/>the<sp/>use<sp/>of<sp/>colors<sp/>even<sp/>when<sp/>a<sp/>tty<sp/>cannot<sp/>be<sp/>detected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_breaks;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>not<sp/>break<sp/>into<sp/>the<sp/>debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_skip;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>skip<sp/>test<sp/>cases<sp/>which<sp/>are<sp/>marked<sp/>to<sp/>be<sp/>skipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gnu_file_line;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>line<sp/>numbers<sp/>should<sp/>be<sp/>surrounded<sp/>with<sp/>:x:<sp/>and<sp/>not<sp/>(x):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_path_in_filenames;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>path<sp/>to<sp/>files<sp/>should<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_line_numbers;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>source<sp/>code<sp/>line<sp/>numbers<sp/>should<sp/>be<sp/>omitted<sp/>from<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_debug_output;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>output<sp/>in<sp/>the<sp/>debug<sp/>console<sp/>when<sp/>a<sp/>debugger<sp/>is<sp/>attached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_skipped_summary;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>print<sp/>&quot;skipped&quot;<sp/>in<sp/>the<sp/>summary<sp/>!!!<sp/>UNDOCUMENTED<sp/>!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_time_in_output;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>omit<sp/>any<sp/>time/timestamps<sp/>from<sp/>output<sp/>!!!<sp/>UNDOCUMENTED<sp/>!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>help;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>print<sp/>the<sp/>help</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>version;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>print<sp/>the<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>only<sp/>the<sp/>count<sp/>of<sp/>matching<sp/>tests<sp/>is<sp/>to<sp/>be<sp/>retrieved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>list_test_cases;<sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>list<sp/>all<sp/>tests<sp/>matching<sp/>the<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>list_test_suites;<sp/></highlight><highlight class="comment">//<sp/>to<sp/>list<sp/>all<sp/>suites<sp/>matching<sp/>the<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>list_reporters;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lists<sp/>all<sp/>registered<sp/>reporters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal">};</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">types<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>COND,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="947" refid="structdoctest_1_1detail_1_1types_1_1enable__if" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1enable__if" kindref="compound">enable_if</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="950" refid="structdoctest_1_1detail_1_1types_1_1enable__if_3_01true_00_01T_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1enable__if" kindref="compound">enable_if</ref>&lt;true,<sp/>T&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952" refid="structdoctest_1_1detail_1_1types_1_1true__type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1true__type" kindref="compound">true_type</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="953" refid="structdoctest_1_1detail_1_1types_1_1false__type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1false__type" kindref="compound">false_type</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955" refid="structdoctest_1_1detail_1_1types_1_1remove__reference" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1remove__reference" kindref="compound">remove_reference</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="956" refid="structdoctest_1_1detail_1_1types_1_1remove__reference_3_01T_01_6_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1remove__reference" kindref="compound">remove_reference</ref>&lt;T&amp;&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="957" refid="structdoctest_1_1detail_1_1types_1_1remove__reference_3_01T_01_6_6_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1remove__reference" kindref="compound">remove_reference</ref>&lt;T&amp;&amp;&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959" refid="structdoctest_1_1detail_1_1types_1_1is__rvalue__reference" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1is__rvalue__reference" kindref="compound">is_rvalue_reference</ref><sp/>:<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1false__type" kindref="compound">false_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="960" refid="structdoctest_1_1detail_1_1types_1_1is__rvalue__reference_3_01T_01_6_6_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1is__rvalue__reference" kindref="compound">is_rvalue_reference</ref>&lt;T&amp;&amp;&gt;<sp/>:<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1true__type" kindref="compound">true_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962" refid="structdoctest_1_1detail_1_1types_1_1remove__const" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1remove__const" kindref="compound">remove_const</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="963" refid="structdoctest_1_1detail_1_1types_1_1remove__const_3_01const_01T_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1remove__const" kindref="compound">remove_const</ref>&lt;const<sp/>T&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compiler<sp/>intrinsics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966" refid="structdoctest_1_1detail_1_1types_1_1is__enum" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1is__enum" kindref="compound">is_enum</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>__is_enum(T);<sp/>};</highlight></codeline>
<codeline lineno="967" refid="structdoctest_1_1detail_1_1types_1_1underlying__type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1underlying__type" kindref="compound">underlying_type</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>__underlying_type(T);<sp/>};</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969" refid="structdoctest_1_1detail_1_1types_1_1is__pointer" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1is__pointer" kindref="compound">is_pointer</ref><sp/>:<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1false__type" kindref="compound">false_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="970" refid="structdoctest_1_1detail_1_1types_1_1is__pointer_3_01T_01_5_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1is__pointer" kindref="compound">is_pointer</ref>&lt;T*&gt;<sp/>:<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1true__type" kindref="compound">true_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972" refid="structdoctest_1_1detail_1_1types_1_1is__array" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1is__array" kindref="compound">is_array</ref><sp/>:<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1false__type" kindref="compound">false_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(*-avoid-c-arrays)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974" refid="structdoctest_1_1detail_1_1types_1_1is__array_3_01T_0fSIZE_0e_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1types_1_1is__array" kindref="compound">is_array</ref>&lt;T[SIZE]&gt;<sp/>:<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1true__type" kindref="compound">true_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>T&amp;&amp;<sp/>declval();</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CONSTEXPR_FUNC<sp/>T&amp;&amp;<sp/>forward(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>types::remove_reference&lt;T&gt;::type&amp;<sp/>t)<sp/>DOCTEST_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CONSTEXPR_FUNC<sp/>T&amp;&amp;<sp/>forward(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>types::remove_reference&lt;T&gt;::type&amp;&amp;<sp/>t)<sp/>DOCTEST_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="993" refid="structdoctest_1_1detail_1_1deferred__false" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1deferred__false" kindref="compound">deferred_false</ref><sp/>:<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1false__type" kindref="compound">types::false_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVS<sp/>2015<sp/>:(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!DOCTEST_CLANG<sp/>&amp;&amp;<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&lt;=<sp/>1900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_global_insertion_operator<sp/>:<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1false__type" kindref="compound">types::false_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_global_insertion_operator&lt;T,<sp/>decltype(::operator&lt;&lt;(declval&lt;std::ostream&amp;&gt;(),<sp/>declval&lt;const<sp/>T&amp;&gt;()),<sp/>void())&gt;<sp/>:<sp/>types::true_type<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_insertion_operator<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>has_global_insertion_operator&lt;T&gt;::value;<sp/>};</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>global&gt;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">insert_hack;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">insert_hack&lt;T,<sp/>true&gt;<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insert(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)<sp/>{<sp/>::operator&lt;&lt;(os,<sp/>t);<sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">insert_hack&lt;T,<sp/>false&gt;<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insert(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)<sp/>{<sp/>operator&lt;&lt;(os,<sp/>t);<sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>insert_hack_t<sp/>=<sp/>insert_hack&lt;T,<sp/>has_global_insertion_operator&lt;T&gt;::value&gt;;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1023" refid="structdoctest_1_1detail_1_1has__insertion__operator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1has__insertion__operator" kindref="compound">has_insertion_operator</ref><sp/>:<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1false__type" kindref="compound">types::false_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1027" refid="structdoctest_1_1detail_1_1has__insertion__operator_3_01T_00_01decltype_07operator_3_3_07declvald5a5a279653bbfeef238ad5c984744e2" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1has__insertion__operator" kindref="compound">has_insertion_operator</ref>&lt;T,<sp/>decltype(operator&lt;&lt;(declval&lt;std::<ref refid="classstd_1_1basic__ostream" kindref="compound">ostream</ref>&amp;&gt;(),<sp/>declval&lt;const<sp/>T&amp;&gt;()),<sp/>void())&gt;<sp/>:<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1true__type" kindref="compound">types::true_type</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1030" refid="structdoctest_1_1detail_1_1should__stringify__as__underlying__type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1should__stringify__as__underlying__type" kindref="compound">should_stringify_as_underlying_type</ref><sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="structdoctest_1_1detail_1_1types_1_1is__enum" kindref="compound">detail::types::is_enum&lt;T&gt;::value</ref><sp/>&amp;&amp;<sp/>!<ref refid="structdoctest_1_1detail_1_1has__insertion__operator" kindref="compound">doctest::detail::has_insertion_operator&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>tlssPush();</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>tlssPop();</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="1038" refid="structdoctest_1_1detail_1_1StringMakerBase" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1StringMakerBase" kindref="compound">StringMakerBase</ref><sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(T))<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_REQUIRE_STRINGIFICATION_FOR_ALL_USED_TYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(<ref refid="structdoctest_1_1detail_1_1deferred__false" kindref="compound">deferred_false&lt;T&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>stringification<sp/>detected<sp/>for<sp/>type<sp/>T.<sp/>See<sp/>string<sp/>conversion<sp/>manual&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;{?}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1filldata" kindref="compound">filldata</ref>;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>filloss(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1filldata" kindref="compound">filldata&lt;T&gt;::fill</ref>(stream,<sp/>in);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>filloss(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;in)[N])<sp/>{<sp/></highlight><highlight class="comment">//<sp/>NOLINT(*-avoid-c-arrays)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T[N],<sp/>T(&amp;)[N],<sp/>T(&amp;&amp;)[N]<sp/>have<sp/>same<sp/>behaviour.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hence<sp/>remove<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filloss&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>types::remove_reference&lt;decltype(in)&gt;::type&gt;(stream,<sp/>in);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>toStream(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>stream<sp/>=<sp/>tlssPush();</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filloss(stream,<sp/>in);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tlssPop();</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1071" refid="structdoctest_1_1detail_1_1StringMakerBase_3_01true_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1StringMakerBase" kindref="compound">StringMakerBase</ref>&lt;true&gt;<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(T)<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStream(in);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1080" refid="structdoctest_1_1StringMaker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1StringMaker" kindref="compound">StringMaker</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1StringMakerBase" kindref="compound">detail::StringMakerBase</ref>&lt;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::has_insertion_operator&lt;T&gt;::value<sp/>||<sp/>detail::types::is_pointer&lt;T&gt;::value<sp/>||<sp/>detail::types::is_array&lt;T&gt;::value&gt;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_STRINGIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_DOUBLE_STRINGIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_STRINGIFY(...)<sp/>toString(toString(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_STRINGIFY(...)<sp/>toString(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>toString()<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_CLANG<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>DOCTEST_GCC<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>DOCTEST_ICC<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>ret<sp/>=<sp/>__FUNCSIG__;<sp/></highlight><highlight class="comment">//<sp/>class<sp/>doctest::String<sp/>__cdecl<sp/>doctest::toString&lt;TYPE&gt;(void)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>String::size_type<sp/>beginPos<sp/>=<sp/>ret.find(</highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret.substr(beginPos<sp/>+<sp/>1,<sp/>ret.size()<sp/>-<sp/>beginPos<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">String::size_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;&gt;(void)&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>ret<sp/>=<sp/>__PRETTY_FUNCTION__;<sp/></highlight><highlight class="comment">//<sp/>doctest::String<sp/>toString()<sp/>[with<sp/>T<sp/>=<sp/>TYPE]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>String::size_type<sp/>begin<sp/>=<sp/>ret.find(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">)<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret.substr(begin,<sp/>ret.size()<sp/>-<sp/>begin<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>detail::types::enable_if&lt;!detail::should_stringify_as_underlying_type&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(T)<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StringMaker&lt;T&gt;::convert(value);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC<sp/>&gt;=<sp/>DOCTEST_COMPILER(19,<sp/>20,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>this<sp/>issue<sp/>on<sp/>why<sp/>this<sp/>is<sp/>needed:<sp/>https://github.com/doctest/doctest/issues/183</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>in);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>VS<sp/>2019</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(String<sp/>in);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(std::nullptr_t);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">DOCTEST_INTERFACE<sp/>String<sp/>toString(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>detail::types::enable_if&lt;detail::should_stringify_as_underlying_type&lt;T&gt;::value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;::type<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(T)<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>UT<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::types::underlying_type&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(DOCTEST_STRINGIFY(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UT</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value)));</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1149" refid="structdoctest_1_1detail_1_1filldata" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1filldata" kindref="compound">filldata</ref></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&lt;=<sp/>1900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_hack_t&lt;T&gt;::insert(*stream,<sp/>in);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator&lt;&lt;(*stream,<sp/>in);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4866)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOLINTBEGIN(*-avoid-c-arrays)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1163" refid="structdoctest_1_1detail_1_1filldata_3_01T_0fN_0e_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/><ref refid="structdoctest_1_1detail_1_1filldata" kindref="compound">filldata</ref>&lt;T[N]&gt;<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T(&amp;in)[N])<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>{<sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/>(DOCTEST_STRINGIFY(in[i]));</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOLINTEND(*-avoid-c-arrays)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Specialized<sp/>since<sp/>we<sp/>don&apos;t<sp/>want<sp/>the<sp/>terminating<sp/>null<sp/>byte!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOLINTBEGIN(*-avoid-c-arrays)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1179" refid="structdoctest_1_1detail_1_1filldata_3_01const_01char_0fN_0e_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1filldata" kindref="compound">filldata</ref>&lt;const<sp/>char[N]&gt;<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>(&amp;in)[N])<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stream<sp/>&lt;&lt;<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(in,<sp/>in[N<sp/>-<sp/>1]<sp/>?<sp/>N<sp/>:<sp/>N<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOLINTEND(*-avoid-c-arrays)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1187" refid="structdoctest_1_1detail_1_1filldata_3_01const_01void_01_5_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1filldata" kindref="compound">filldata</ref>&lt;const<sp/>void*&gt;<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>in);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1192" refid="structdoctest_1_1detail_1_1filldata_3_01T_01_5_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1filldata" kindref="compound">filldata</ref>&lt;T*&gt;<sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4180)</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(</highlight><highlight class="stringliteral">&quot;-Wmicrosoft-cast&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1filldata" kindref="compound">filldata&lt;const void*&gt;::fill</ref>(stream,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>DOCTEST_GCC<sp/>==<sp/>0<sp/>||<sp/>DOCTEST_GCC<sp/>&gt;=<sp/>DOCTEST_COMPILER(4,<sp/>9,<sp/>0)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(in)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;in)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209" refid="structdoctest_1_1Approx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref></highlight></codeline>
<codeline lineno="1210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>operator()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1types_1_1enable__if" kindref="compound">detail::types::enable_if</ref>&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type*<sp/>=</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>epsilon(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newEpsilon);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value,<sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;&gt;::type<sp/>epsilon(</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>newEpsilon)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_epsilon<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newEpsilon);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/><sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>scale(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newScale);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value,<sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;&gt;::type<sp/>scale(</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>newScale)<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_scale<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newScale);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref><sp/>&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_APPROX_PREFIX<sp/>\</highlight></codeline>
<codeline lineno="1262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/>friend<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value,<sp/>bool&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs),<sp/>rhs);<sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator==(rhs,<sp/>lhs);<sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!operator==(lhs,<sp/>rhs);<sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!operator==(rhs,<sp/>lhs);<sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>&lt;<sp/>rhs.m_value<sp/>||<sp/>lhs<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_value<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs)<sp/>||<sp/>lhs<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>&gt;<sp/>rhs.m_value<sp/>||<sp/>lhs<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_value<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs)<sp/>||<sp/>lhs<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator&lt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>&lt;<sp/>rhs.m_value<sp/>&amp;&amp;<sp/>lhs<sp/>!=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator&lt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_value<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs)<sp/>&amp;&amp;<sp/>lhs<sp/>!=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator&gt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>&gt;<sp/>rhs.m_value<sp/>&amp;&amp;<sp/>lhs<sp/>!=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_APPROX_PREFIX<sp/>operator&gt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_value<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs)<sp/>&amp;&amp;<sp/>lhs<sp/>!=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_APPROX_PREFIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_epsilon;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_scale;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_value;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1Approx" kindref="compound">Approx</ref>&amp;<sp/>in);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal">DOCTEST_INTERFACE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1ContextOptions" kindref="compound">ContextOptions</ref>*<sp/>getContextOptions();</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1291" refid="structdoctest_1_1IsNaN" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE_DECL<sp/><ref refid="structdoctest_1_1IsNaN" kindref="compound">IsNaN</ref></highlight></codeline>
<codeline lineno="1292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>F<sp/>value;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flipped;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1IsNaN" kindref="compound">IsNaN</ref>(F<sp/>f,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flip<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>:<sp/>value(f),<sp/>flipped(flip)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1IsNaN" kindref="compound">IsNaN&lt;F&gt;</ref><sp/>operator!()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>value,<sp/>!flipped<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__MINGW32__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE_DECL<sp/><ref refid="structdoctest_1_1IsNaN" kindref="compound">IsNaN&lt;float&gt;</ref>;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE_DECL<sp/><ref refid="structdoctest_1_1IsNaN" kindref="compound">IsNaN&lt;double&gt;</ref>;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE_DECL<sp/><ref refid="structdoctest_1_1IsNaN" kindref="compound">IsNaN&lt;long double&gt;</ref>;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>toString(<ref refid="structdoctest_1_1IsNaN" kindref="compound">IsNaN&lt;float&gt;</ref><sp/>in);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>toString(<ref refid="structdoctest_1_1IsNaN" kindref="compound">IsNaN&lt;double&gt;</ref><sp/>in);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>toString(<ref refid="structdoctest_1_1IsNaN" kindref="compound">IsNaN&lt;double long&gt;</ref><sp/>in);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">decay_array<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;<sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">decay_array&lt;T[N]&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T*;<sp/>};</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">decay_array&lt;T[]&gt;<sp/><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T*;<sp/>};</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">not_char_pointer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>1;<sp/>};</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">not_char_pointer&lt;char*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">not_char_pointer&lt;const<sp/>char*&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>DOCTEST_CONSTEXPR<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_use_op<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>not_char_pointer&lt;typename<sp/>decay_array&lt;T&gt;::type&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324" refid="structdoctest_1_1detail_1_1TestFailureException" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1TestFailureException" kindref="compound">TestFailureException</ref></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkIfShouldThrow(assertType::Enum<sp/>at);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_NORETURN</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throwException();</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335" refid="structdoctest_1_1detail_1_1Subcase" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1SubcaseSignature" kindref="compound">SubcaseSignature</ref><sp/>m_signature;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_entered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref>(<ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref>&amp;<sp/>operator=(<ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structdoctest_1_1detail_1_1Subcase" kindref="compound">Subcase</ref>();</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkFilters();</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>stringifyBinaryExpr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(L)<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op,</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(R)<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(DOCTEST_STRINGIFY(lhs))<sp/>+<sp/>op<sp/>+<sp/>(DOCTEST_STRINGIFY(rhs));</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_CLANG<sp/>&amp;&amp;<sp/>DOCTEST_CLANG<sp/>&lt;<sp/>DOCTEST_COMPILER(3,<sp/>6,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(</highlight><highlight class="stringliteral">&quot;-Wunused-comparison&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>check<sp/>if<sp/>there<sp/>is<sp/>any<sp/>way<sp/>it<sp/>could<sp/>find<sp/>a<sp/>operator<sp/>like<sp/>member<sp/>or<sp/>friend<sp/>and<sp/>uses<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>not<sp/>it<sp/>doesn&apos;t<sp/>find<sp/>the<sp/>operator<sp/>or<sp/>if<sp/>the<sp/>operator<sp/>at<sp/>global<sp/>scope<sp/>is<sp/>defined<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>template,<sp/>the<sp/>template<sp/>won&apos;t<sp/>be<sp/>instantiated<sp/>due<sp/>to<sp/>SFINAE.<sp/>Once<sp/>the<sp/>template<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiated<sp/>it<sp/>can<sp/>look<sp/>for<sp/>global<sp/>operator<sp/>using<sp/>normal<sp/>conversions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__NVCC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SFINAE_OP(ret,op)<sp/>ret</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SFINAE_OP(ret,op)<sp/>decltype((void)(doctest::detail::declval&lt;L&gt;()<sp/>op<sp/>doctest::detail::declval&lt;R&gt;()),ret{})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(op,<sp/>op_str,<sp/>op_macro)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>R&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_NOINLINE<sp/>SFINAE_OP(Result,op)<sp/>operator<sp/>op(R&amp;&amp;<sp/>rhs)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>bool<sp/>res<sp/>=<sp/>op_macro(doctest::detail::forward&lt;const<sp/>L&gt;(lhs),<sp/>doctest::detail::forward&lt;R&gt;(rhs));<sp/>\</highlight></codeline>
<codeline lineno="1377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(m_at<sp/>&amp;<sp/>assertType::is_false)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>!res;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!res<sp/>||<sp/>doctest::getContextOptions()-&gt;success)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Result(res,<sp/>stringifyBinaryExpr(lhs,<sp/>op_str,<sp/>rhs));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Result(res);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>more<sp/>checks<sp/>could<sp/>be<sp/>added<sp/>-<sp/>like<sp/>in<sp/>Catch:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/catchorg/Catch2/pull/1480/files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/catchorg/Catch2/pull/1481/files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FORBIT_EXPRESSION(rt,<sp/>op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>R&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>rt&amp;<sp/>operator<sp/>op(const<sp/>R&amp;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(deferred_false&lt;R&gt;::value,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Expression<sp/>Too<sp/>Complex<sp/>Please<sp/>Rewrite<sp/>As<sp/>Binary<sp/>Comparison!&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395" refid="structdoctest_1_1detail_1_1Result" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref><sp/></highlight><highlight class="comment">//<sp/>NOLINT(*-member-init)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/>m_passed;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>m_decomp;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Why<sp/>do<sp/>we<sp/>need<sp/>this?<sp/>(To<sp/>remove<sp/>NOLINT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passed,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>decomposition<sp/>=<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>());</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>forbidding<sp/>some<sp/>expressions<sp/>based<sp/>on<sp/>this<sp/>table:<sp/>https://en.cppreference.com/w/cpp/language/operator_precedence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>&amp;)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>^)</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>|)</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>&amp;&amp;)</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>||)</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>==)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>!=)</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>&lt;)</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>&gt;)</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>=)</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>+=)</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>-=)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>*=)</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>/=)</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>%=)</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>&lt;&lt;=)</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>&gt;&gt;=)</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>&amp;=)</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>^=)</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(<ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>,<sp/>|=)</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_PUSH</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING(</highlight><highlight class="stringliteral">&quot;-Wsign-conversion&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wsign-compare&quot;)</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wdouble-promotion&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wconversion&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wfloat-equal&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_PUSH</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wsign-conversion&quot;)</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wsign-compare&quot;)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wdouble-promotion&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wconversion&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wfloat-equal&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_PUSH</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://stackoverflow.com/questions/39479163<sp/>what&apos;s<sp/>the<sp/>difference<sp/>between<sp/>4018<sp/>and<sp/>4389</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4388)<sp/></highlight><highlight class="comment">//<sp/>signed/unsigned<sp/>mismatch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4389)<sp/></highlight><highlight class="comment">//<sp/>&apos;operator&apos;<sp/>:<sp/>signed/unsigned<sp/>mismatch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING(4018)<sp/></highlight><highlight class="comment">//<sp/>&apos;expression&apos;<sp/>:<sp/>signed/unsigned<sp/>mismatch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DOCTEST_MSVC_SUPPRESS_WARNING(4805)<sp/>//<sp/>&apos;operation&apos;<sp/>:<sp/>unsafe<sp/>mix<sp/>of<sp/>type<sp/>&apos;type&apos;<sp/>and<sp/>type<sp/>&apos;type&apos;<sp/>in<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_COMPARISON_RETURN_TYPE<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_COMPARISON_RETURN_TYPE<sp/>typename<sp/>types::enable_if&lt;can_use_op&lt;L&gt;::value<sp/>||<sp/>can_use_op&lt;R&gt;::value,<sp/>bool&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>eq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(lhs)<sp/>==<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(rhs);<sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ne(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(lhs)<sp/>!=<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(rhs);<sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String(lhs)<sp/>&lt;<sp/><sp/>String(rhs);<sp/>}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String(lhs)<sp/>&gt;<sp/><sp/>String(rhs);<sp/>}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>le(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String(lhs)<sp/>&lt;=<sp/>String(rhs);<sp/>}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String(lhs)<sp/>&gt;=<sp/>String(rhs);<sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_RELATIONAL_OP(name,<sp/>op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>L,<sp/>typename<sp/>R&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_COMPARISON_RETURN_TYPE<sp/>name(const<sp/>DOCTEST_REF_WRAP(L)<sp/>lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>DOCTEST_REF_WRAP(R)<sp/>rhs)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>lhs<sp/>op<sp/>rhs;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(eq,<sp/>==)</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(ne,<sp/>!=)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(lt,<sp/>&lt;)</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(gt,<sp/>&gt;)</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(le,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(ge,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_EQ(l,<sp/>r)<sp/>l<sp/>==<sp/>r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_NE(l,<sp/>r)<sp/>l<sp/>!=<sp/>r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_GT(l,<sp/>r)<sp/>l<sp/>&gt;<sp/>r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_LT(l,<sp/>r)<sp/>l<sp/>&lt;<sp/>r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_GE(l,<sp/>r)<sp/>l<sp/>&gt;=<sp/>r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_LE(l,<sp/>r)<sp/>l<sp/>&lt;=<sp/>r</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_EQ(l,<sp/>r)<sp/>eq(l,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_NE(l,<sp/>r)<sp/>ne(l,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_GT(l,<sp/>r)<sp/>gt(l,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_LT(l,<sp/>r)<sp/>lt(l,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_GE(l,<sp/>r)<sp/>ge(l,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CMP_LE(l,<sp/>r)<sp/>le(l,<sp/>r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>copyCtorAndEqOperator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Expression_lhs</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertType::Enum<sp/>m_at;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Expression_lhs(L&amp;&amp;<sp/>in,<sp/>assertType::Enum<sp/>at)</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lhs(static_cast&lt;L&amp;&amp;&gt;(in))</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_at(at)<sp/>{}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_NOINLINE<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Result()<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>needed<sp/>only<sp/>for<sp/>MSVC<sp/>2015</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4800)<sp/></highlight><highlight class="comment">//<sp/>&apos;int&apos;:<sp/>forcing<sp/>value<sp/>to<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>res<sp/>=<sp/>static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(lhs);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(m_at<sp/>&amp;<sp/>assertType::is_false)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>!res;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!res<sp/>||<sp/>getContextOptions()-&gt;success)<sp/>{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>res,<sp/>(DOCTEST_STRINGIFY(lhs))<sp/>};</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>res<sp/>};</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>required<sp/>for<sp/>user-defined<sp/>conversions<sp/>from<sp/>Expression_lhs<sp/>to<sp/>L<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>L()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs;<sp/>}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(==,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal">,<sp/>DOCTEST_CMP_EQ)<sp/></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(!=,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>!=<sp/>&quot;</highlight><highlight class="normal">,<sp/>DOCTEST_CMP_NE)<sp/></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(&gt;,<sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;<sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>DOCTEST_CMP_GT)<sp/></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(&lt;,<sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>DOCTEST_CMP_LT)<sp/></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(&gt;=,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal">,<sp/>DOCTEST_CMP_GE)<sp/></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(&lt;=,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal">,<sp/>DOCTEST_CMP_LE)<sp/></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>forbidding<sp/>some<sp/>expressions<sp/>based<sp/>on<sp/>this<sp/>table:<sp/>https://en.cppreference.com/w/cpp/language/operator_precedence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>&amp;)</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>^)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>|)</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>&amp;&amp;)</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>||)</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>=)</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>+=)</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>-=)</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>*=)</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>/=)</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>%=)</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>&lt;&lt;=)</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>&gt;&gt;=)</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>&amp;=)</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>^=)</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>|=)</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>2<sp/>are<sp/>unfortunate<sp/>because<sp/>they<sp/>should<sp/>be<sp/>allowed<sp/>-<sp/>they<sp/>have<sp/>higher<sp/>precedence<sp/>over<sp/>the<sp/>comparisons,<sp/>but<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ExpressionDecomposer<sp/>class<sp/>uses<sp/>the<sp/>left<sp/>shift<sp/>operator<sp/>to<sp/>capture<sp/>the<sp/>left<sp/>operand<sp/>of<sp/>the<sp/>binary<sp/>expression...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>&lt;&lt;)</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FORBIT_EXPRESSION(Expression_lhs,<sp/>&gt;&gt;)</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_CLANG<sp/>&amp;&amp;<sp/>DOCTEST_CLANG<sp/>&lt;<sp/>DOCTEST_COMPILER(3,<sp/>6,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570" refid="structdoctest_1_1detail_1_1ExpressionDecomposer" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1ExpressionDecomposer" kindref="compound">ExpressionDecomposer</ref></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertType::Enum<sp/>m_at;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1ExpressionDecomposer" kindref="compound">ExpressionDecomposer</ref>(assertType::Enum<sp/>at);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>right<sp/>operator<sp/>for<sp/>capturing<sp/>expressions<sp/>is<sp/>&quot;&lt;=&quot;<sp/>instead<sp/>of<sp/>&quot;&lt;&lt;&quot;<sp/>(based<sp/>on<sp/>the<sp/>operator<sp/>precedence<sp/>table)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>then<sp/>there<sp/>will<sp/>be<sp/>warnings<sp/>from<sp/>GCC<sp/>about<sp/>&quot;-Wparentheses&quot;<sp/>and<sp/>since<sp/>&quot;_Pragma()&quot;<sp/>is<sp/>problematic<sp/>this<sp/>will<sp/>stay<sp/>for<sp/>now...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/catchorg/Catch2/issues/870</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/catchorg/Catch2/issues/565</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expression_lhs&lt;L&gt;<sp/>operator&lt;&lt;(L&amp;&amp;<sp/>operand)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expression_lhs&lt;L&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">L&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(operand),<sp/>m_at);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>L,typename<sp/>types::enable_if&lt;!doctest::detail::types::is_rvalue_reference&lt;L&gt;::value,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>&gt;::type*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expression_lhs&lt;const<sp/>L&amp;&gt;<sp/>operator&lt;&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L<sp/>&amp;operand)<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Expression_lhs&lt;const<sp/>L&amp;&gt;(operand,<sp/>m_at);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591" refid="structdoctest_1_1detail_1_1TestSuite" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">TestSuite</ref></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>m_test_suite<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>m_description<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_skip<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_no_breaks<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_no_output<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_may_fail<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_should_fail<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_expected_failures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_timeout<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">TestSuite</ref>&amp;<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">TestSuite</ref>&amp;<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.fill(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>funcType<sp/>=<sp/>void<sp/>(*)();</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614" refid="structdoctest_1_1detail_1_1TestCase" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1TestCaseData" kindref="compound">TestCaseData</ref></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcType<sp/>m_test;<sp/></highlight><highlight class="comment">//<sp/>a<sp/>function<sp/>pointer<sp/>to<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>m_type;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>templated<sp/>test<sp/>cases<sp/>-<sp/>gets<sp/>appended<sp/>to<sp/>the<sp/>real<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_template_id;<sp/></highlight><highlight class="comment">//<sp/>an<sp/>ID<sp/>used<sp/>to<sp/>distinguish<sp/>between<sp/>the<sp/>different<sp/>versions<sp/>of<sp/>a<sp/>templated<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>m_full_name;<sp/></highlight><highlight class="comment">//<sp/>contains<sp/>the<sp/>name<sp/>(only<sp/>for<sp/>templated<sp/>test<sp/>cases!)<sp/>+<sp/>the<sp/>template<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>(funcType<sp/>test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">TestSuite</ref>&amp;<sp/>test_suite,</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>type<sp/>=<sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>template_id<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>(<ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434)<sp/></highlight><highlight class="comment">//<sp/>hides<sp/>a<sp/>non-virtual<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>&amp;<sp/>operator=(<ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>&amp;<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>&amp;<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.fill(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>forward<sp/>declarations<sp/>of<sp/>functions<sp/>used<sp/>by<sp/>the<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>regTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1TestCase" kindref="compound">TestCase</ref>&amp;<sp/>tc);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>setTestSuite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">TestSuite</ref>&amp;<sp/>ts);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive();</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instantiationHelper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">binaryAssertComparison<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Enum</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eq<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ne,</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gt,</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lt,</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ge,</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>le</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>binaryAssertComparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668" refid="structdoctest_1_1detail_1_1RelationalComparator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>R&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1RelationalComparator" kindref="compound">RelationalComparator</ref><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(L),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(R)<sp/><sp/><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BINARY_RELATIONAL_OP(n,<sp/>op)<sp/>\</highlight></codeline>
<codeline lineno="1671"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>L,<sp/>class<sp/>R&gt;<sp/>struct<sp/>RelationalComparator&lt;n,<sp/>L,<sp/>R&gt;<sp/>{<sp/>bool<sp/>operator()(const<sp/>DOCTEST_REF_WRAP(L)<sp/>lhs,<sp/>const<sp/>DOCTEST_REF_WRAP(R)<sp/>rhs)<sp/>const<sp/>{<sp/>return<sp/>op(lhs,<sp/>rhs);<sp/>}<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_BINARY_RELATIONAL_OP(0,<sp/>doctest::detail::eq)</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_BINARY_RELATIONAL_OP(1,<sp/>doctest::detail::ne)</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_BINARY_RELATIONAL_OP(2,<sp/>doctest::detail::gt)</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_BINARY_RELATIONAL_OP(3,<sp/>doctest::detail::lt)</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_BINARY_RELATIONAL_OP(4,<sp/>doctest::detail::ge)</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_BINARY_RELATIONAL_OP(5,<sp/>doctest::detail::le)</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681" refid="structdoctest_1_1detail_1_1ResultBuilder" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1ResultBuilder" kindref="compound">ResultBuilder</ref><sp/>:<sp/>public<sp/><ref refid="structdoctest_1_1AssertData" kindref="compound">AssertData</ref></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1ResultBuilder" kindref="compound">ResultBuilder</ref>(assertType::Enum<sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>exception_type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>exception_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1ResultBuilder" kindref="compound">ResultBuilder</ref>(assertType::Enum<sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>exception_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Contains" kindref="compound">Contains</ref>&amp;<sp/>exception_string);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1Result" kindref="compound">Result</ref>&amp;<sp/>res);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comparison,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_NOINLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>binary_assert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(L)<sp/>lhs,</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(R)<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_failed<sp/>=<sp/>!<ref refid="structdoctest_1_1detail_1_1RelationalComparator" kindref="compound">RelationalComparator&lt;comparison, L, R&gt;</ref>()(lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_failed<sp/>||<sp/>getContextOptions()-&gt;success)<sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_decomp<sp/>=<sp/>stringifyBinaryExpr(lhs,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/>rhs);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_failed;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="1702" refid="structdoctest_1_1detail_1_1ResultBuilder_1a63a2a19638f4a761c70abd5563e2d23a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_NOINLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1ResultBuilder_1a63a2a19638f4a761c70abd5563e2d23a" kindref="member">unary_assert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(L)<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_failed<sp/>=<sp/>!val;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_at<sp/>&amp;<sp/>assertType::is_false)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_failed<sp/>=<sp/>!m_failed;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_failed<sp/>||<sp/>getContextOptions()-&gt;success)<sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_decomp<sp/>=<sp/>(DOCTEST_STRINGIFY(val));</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_failed;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>translateException();</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>log();</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>react()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">assertAction<sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Enum</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nothing<sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbgbreak<sp/><sp/><sp/><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shouldthrow<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>assertAction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>failed_out_of_a_testing_context(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertData&amp;<sp/>ad);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decomp_assert(assertType::Enum<sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Result&amp;<sp/>result);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ASSERT_OUT_OF_TESTS(decomp)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1737"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1738"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!is_running_in_test)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(failed)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultBuilder<sp/>rb(at,<sp/>file,<sp/>line,<sp/>expr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1741"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb.m_failed<sp/>=<sp/>failed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1742"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb.m_decomp<sp/>=<sp/>decomp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1743"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failed_out_of_a_testing_context(rb);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1744"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(isDebuggerActive()<sp/>&amp;&amp;<sp/>!getContextOptions()-&gt;no_breaks)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1745"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_BREAK_INTO_DEBUGGER();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1746"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(checkIfShouldThrow(at))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1747"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throwException();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>!failed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ASSERT_IN_TESTS(decomp)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ResultBuilder<sp/>rb(at,<sp/>file,<sp/>line,<sp/>expr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>rb.m_failed<sp/>=<sp/>failed;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(rb.m_failed<sp/>||<sp/>getContextOptions()-&gt;success)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb.m_decomp<sp/>=<sp/>decomp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(rb.log())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_BREAK_INTO_DEBUGGER();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(rb.m_failed<sp/>&amp;&amp;<sp/>checkIfShouldThrow(at))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>throwException()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comparison,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_NOINLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>binary_assert(assertType::Enum<sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(L)<sp/>lhs,</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(R)<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>failed<sp/>=<sp/>!RelationalComparator&lt;comparison,<sp/>L,<sp/>R&gt;()(lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>###################################################################################</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IF<sp/>THE<sp/>DEBUGGER<sp/>BREAKS<sp/>HERE<sp/>-<sp/>GO<sp/>1<sp/>LEVEL<sp/>UP<sp/>IN<sp/>THE<sp/>CALLSTACK<sp/>FOR<sp/>THE<sp/>FAILING<sp/>ASSERT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>THIS<sp/>IS<sp/>THE<sp/>EFFECT<sp/>OF<sp/>HAVING<sp/>&apos;DOCTEST_CONFIG_SUPER_FAST_ASSERTS&apos;<sp/>DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>###################################################################################</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_OUT_OF_TESTS(stringifyBinaryExpr(lhs,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/>rhs));</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_IN_TESTS(stringifyBinaryExpr(lhs,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/>rhs));</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!failed;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_NOINLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unary_assert(assertType::Enum<sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_REF_WRAP(L)<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>failed<sp/>=<sp/>!val;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(at<sp/>&amp;<sp/>assertType::is_false)<sp/></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>=<sp/>!failed;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>###################################################################################</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IF<sp/>THE<sp/>DEBUGGER<sp/>BREAKS<sp/>HERE<sp/>-<sp/>GO<sp/>1<sp/>LEVEL<sp/>UP<sp/>IN<sp/>THE<sp/>CALLSTACK<sp/>FOR<sp/>THE<sp/>FAILING<sp/>ASSERT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>THIS<sp/>IS<sp/>THE<sp/>EFFECT<sp/>OF<sp/>HAVING<sp/>&apos;DOCTEST_CONFIG_SUPER_FAST_ASSERTS&apos;<sp/>DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>###################################################################################</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_OUT_OF_TESTS((DOCTEST_STRINGIFY(val)));</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_IN_TESTS((DOCTEST_STRINGIFY(val)));</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!failed;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795" refid="structdoctest_1_1detail_1_1IExceptionTranslator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1IExceptionTranslator" kindref="compound">IExceptionTranslator</ref></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DECLARE_INTERFACE(<ref refid="structdoctest_1_1detail_1_1IExceptionTranslator" kindref="compound">IExceptionTranslator</ref>)</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>translate(<ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1802" refid="classdoctest_1_1detail_1_1ExceptionTranslator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdoctest_1_1detail_1_1ExceptionTranslator" kindref="compound">ExceptionTranslator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1IExceptionTranslator" kindref="compound">IExceptionTranslator</ref><sp/></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1detail_1_1ExceptionTranslator" kindref="compound">ExceptionTranslator</ref>(<ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>(*translateFunction)(T))</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_translateFunction(translateFunction)<sp/>{}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>translate(<ref refid="classdoctest_1_1String" kindref="compound">String</ref>&amp;<sp/>res)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>lgtm<sp/>[cpp/rethrow-no-exception]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cppcheck-suppress<sp/>catchExceptionByValue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>ex)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>m_translateFunction(ex);<sp/></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)<sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(res);<sp/></highlight><highlight class="comment">//<sp/>to<sp/>silence<sp/>-Wunused-parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>(*m_translateFunction)(T);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerExceptionTranslatorImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1IExceptionTranslator" kindref="compound">IExceptionTranslator</ref>*<sp/>et);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ContextScope<sp/>base<sp/>class<sp/>used<sp/>to<sp/>allow<sp/>implementing<sp/>methods<sp/>of<sp/>ContextScope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>don&apos;t<sp/>depend<sp/>on<sp/>the<sp/>template<sp/>parameter<sp/>in<sp/>doctest.cpp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830" refid="structdoctest_1_1detail_1_1ContextScopeBase" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1IContextScope" kindref="compound">IContextScope</ref><sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref>&amp;<sp/>operator=(<ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref>();</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref>(<ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref>&amp;&amp;<sp/>other)<sp/>noexcept;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy();</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_to_destroy{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846" refid="classdoctest_1_1detail_1_1ContextScope" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1ContextScopeBase" kindref="compound">ContextScopeBase</ref></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>lambda_;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L<sp/>&amp;lambda)<sp/>:<sp/>lambda_(lambda)<sp/>{}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>(L&amp;&amp;<sp/>lambda)<sp/>:<sp/>lambda_(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">L&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lambda))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>(<ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>&amp;&amp;)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>&amp;<sp/>operator=(<ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stringify(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>s)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/>lambda_(s);<sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_to_destroy)<sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy();</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869" refid="structdoctest_1_1detail_1_1MessageBuilder" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1MessageData" kindref="compound">MessageData</ref></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>m_stream;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/>assertType::Enum<sp/>severity);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>(<ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>&amp;<sp/>operator=(<ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>();</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>preferred<sp/>way<sp/>of<sp/>chaining<sp/>parameters<sp/>for<sp/>stringification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4866)</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>&amp;<sp/>operator,(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*m_stream<sp/>&lt;&lt;<sp/>(DOCTEST_STRINGIFY(in));</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kept<sp/>here<sp/>just<sp/>for<sp/>backwards-compatibility<sp/>-<sp/>the<sp/>comma<sp/>operator<sp/>should<sp/>be<sp/>preferred<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>&amp;<sp/>operator&lt;&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;operator,(in);<sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>`,`<sp/>operator<sp/>has<sp/>the<sp/>lowest<sp/>operator<sp/>precedence<sp/>-<sp/>if<sp/>`&lt;&lt;`<sp/>is<sp/>used<sp/>by<sp/>the<sp/>user<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>`,`<sp/>operator<sp/>will<sp/>be<sp/>called<sp/>last<sp/>which<sp/>is<sp/>not<sp/>what<sp/>we<sp/>want<sp/>and<sp/>thus<sp/>the<sp/>`*`<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>used<sp/>first<sp/>(has<sp/>higher<sp/>operator<sp/>precedence<sp/>compared<sp/>to<sp/>`&lt;&lt;`)<sp/>so<sp/>that<sp/>we<sp/>guarantee<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>operator<sp/>of<sp/>the<sp/>MessageBuilder<sp/>class<sp/>is<sp/>called<sp/>first<sp/>before<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1detail_1_1MessageBuilder" kindref="compound">MessageBuilder</ref>&amp;<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;operator,(in);<sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>log();</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>react();</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope&lt;L&gt;</ref><sp/>MakeContextScope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>L<sp/>&amp;lambda)<sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1detail_1_1ContextScope" kindref="compound">ContextScope&lt;L&gt;</ref>(lambda);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_DEFINE_DECORATOR(name,<sp/>type,<sp/>def)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1915"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1916"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1917"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1918"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name(type<sp/>in<sp/>=<sp/>def)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1919"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data(in)<sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1920"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>fill(detail::TestCase&amp;<sp/>state)<sp/>const<sp/>{<sp/>state.DOCTEST_CAT(m_,<sp/>name)<sp/>=<sp/>data;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1921"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>fill(detail::TestSuite&amp;<sp/>state)<sp/>const<sp/>{<sp/>state.DOCTEST_CAT(m_,<sp/>name)<sp/>=<sp/>data;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1922"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal">DOCTEST_DEFINE_DECORATOR(test_suite,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">DOCTEST_DEFINE_DECORATOR(description,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal">DOCTEST_DEFINE_DECORATOR(skip,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal">DOCTEST_DEFINE_DECORATOR(no_breaks,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal">DOCTEST_DEFINE_DECORATOR(no_output,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal">DOCTEST_DEFINE_DECORATOR(timeout,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal">DOCTEST_DEFINE_DECORATOR(may_fail,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal">DOCTEST_DEFINE_DECORATOR(should_fail,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal">DOCTEST_DEFINE_DECORATOR(expected_failures,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>registerExceptionTranslator(String<sp/>(*translateFunction)(T))<sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(</highlight><highlight class="stringliteral">&quot;-Wexit-time-destructors&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>detail::ExceptionTranslator&lt;T&gt;<sp/>exceptionTranslator(translateFunction);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::registerExceptionTranslatorImpl(&amp;exceptionTranslator);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>doctest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>a<sp/>separate<sp/>namespace<sp/>outside<sp/>of<sp/>doctest<sp/>because<sp/>the<sp/>DOCTEST_TEST_SUITE<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="comment">//<sp/>introduces<sp/>an<sp/>anonymous<sp/>namespace<sp/>in<sp/>which<sp/>getCurrentTestSuite<sp/>gets<sp/>overridden</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal">namespace<sp/>doctest_detail_test_suite_ns<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">doctest::detail::TestSuite</ref>&amp;<sp/>getCurrentTestSuite();</highlight></codeline>
<codeline lineno="1949"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>doctest_detail_test_suite_ns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">doctest<sp/>{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>registerExceptionTranslator(String<sp/>(*)(T))<sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>assert_handler<sp/>=<sp/>void<sp/>(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertData&amp;);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ContextState;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964" refid="classdoctest_1_1Context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="classdoctest_1_1Context" kindref="compound">Context</ref></highlight></codeline>
<codeline lineno="1965"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::ContextState*<sp/>p;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseArgs(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>withDefaults<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Context" kindref="compound">Context</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc<sp/>=<sp/>0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1Context" kindref="compound">Context</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Context" kindref="compound">Context</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1Context" kindref="compound">Context</ref>(<ref refid="classdoctest_1_1Context" kindref="compound">Context</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1Context" kindref="compound">Context</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Context" kindref="compound">Context</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1Context" kindref="compound">Context</ref>&amp;<sp/>operator=(<ref refid="classdoctest_1_1Context" kindref="compound">Context</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classdoctest_1_1Context" kindref="compound">Context</ref>();<sp/></highlight><highlight class="comment">//<sp/>NOLINT(performance-trivially-destructible)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>applyCommandLine(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFilter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filter,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearFilters();</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOption(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>option,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOption(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>option,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOption(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>option,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldExit();</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAsDefaultForAssertsOutOfTestCases();</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAssertHandler(detail::assert_handler<sp/>ah);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCout(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>out);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run();</highlight></codeline>
<codeline lineno="1998"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">TestCaseFailureReason<sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Enum</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>None<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertFailure<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>assertion<sp/>has<sp/>failed<sp/>in<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exception<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>case<sp/>threw<sp/>an<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Crash<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>crash...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TooManyFailedAsserts<sp/><sp/><sp/><sp/><sp/>=<sp/>8,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>abort-after<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Timeout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16,<sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>the<sp/>timeout<sp/>decorator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShouldHaveFailedButDidnt<sp/>=<sp/>32,<sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>the<sp/>should_fail<sp/>decorator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShouldHaveFailedAndDid<sp/><sp/><sp/>=<sp/>64,<sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>the<sp/>should_fail<sp/>decorator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DidntFailExactlyNumTimes<sp/>=<sp/>128,<sp/></highlight><highlight class="comment">//<sp/>see<sp/>the<sp/>expected_failures<sp/>decorator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FailedExactlyNumTimes<sp/><sp/><sp/><sp/>=<sp/>256,<sp/></highlight><highlight class="comment">//<sp/>see<sp/>the<sp/>expected_failures<sp/>decorator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CouldHaveFailedAndDid<sp/><sp/><sp/><sp/>=<sp/>512<sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>the<sp/>may_fail<sp/>decorator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2015"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>TestCaseFailureReason</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017" refid="structdoctest_1_1CurrentTestCaseStats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1CurrentTestCaseStats" kindref="compound">CurrentTestCaseStats</ref></highlight></codeline>
<codeline lineno="2018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>numAssertsCurrentTest;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>numAssertsFailedCurrentTest;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>failure_flags;<sp/></highlight><highlight class="comment">//<sp/>use<sp/>TestCaseFailureReason::Enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/>testCaseSuccess;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026" refid="structdoctest_1_1TestCaseException" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1TestCaseException" kindref="compound">TestCaseException</ref></highlight></codeline>
<codeline lineno="2027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref><sp/>error_string;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/>is_crash;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032" refid="structdoctest_1_1TestRunStats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1TestRunStats" kindref="compound">TestRunStats</ref></highlight></codeline>
<codeline lineno="2033"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numTestCases;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numTestCasesPassingFilters;</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numTestSuitesPassingFilters;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>numTestCasesFailed;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numAsserts;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numAssertsFailed;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042" refid="structdoctest_1_1QueryData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdoctest_1_1QueryData" kindref="compound">QueryData</ref></highlight></codeline>
<codeline lineno="2043"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1TestRunStats" kindref="compound">TestRunStats</ref>*<sp/><sp/>run_stats<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1TestCaseData" kindref="compound">TestCaseData</ref>**<sp/>data<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_data<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049" refid="structdoctest_1_1IReporter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE<sp/><ref refid="structdoctest_1_1IReporter" kindref="compound">IReporter</ref></highlight></codeline>
<codeline lineno="2050"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>has<sp/>to<sp/>accept<sp/>&quot;const<sp/>ContextOptions&amp;&quot;<sp/>as<sp/>a<sp/>single<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>has<sp/>most<sp/>of<sp/>the<sp/>options<sp/>for<sp/>the<sp/>run<sp/>+<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>stdout<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reporter(const<sp/>ContextOptions&amp;<sp/>in)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>when<sp/>a<sp/>query<sp/>should<sp/>be<sp/>reported<sp/>(listing<sp/>test<sp/>cases,<sp/>printing<sp/>the<sp/>version,<sp/>etc.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_query(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1QueryData" kindref="compound">QueryData</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>when<sp/>the<sp/>whole<sp/>test<sp/>run<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_run_start()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>when<sp/>the<sp/>whole<sp/>test<sp/>run<sp/>ends<sp/>(caching<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>input<sp/>doesn&apos;t<sp/>make<sp/>sense<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_run_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1TestRunStats" kindref="compound">TestRunStats</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>when<sp/>a<sp/>test<sp/>case<sp/>is<sp/>started<sp/>(safe<sp/>to<sp/>cache<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>input)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_start(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1TestCaseData" kindref="compound">TestCaseData</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>when<sp/>a<sp/>test<sp/>case<sp/>is<sp/>reentered<sp/>because<sp/>of<sp/>unfinished<sp/>subcases<sp/>(safe<sp/>to<sp/>cache<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>input)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_reenter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1TestCaseData" kindref="compound">TestCaseData</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>when<sp/>a<sp/>test<sp/>case<sp/>has<sp/>ended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1CurrentTestCaseStats" kindref="compound">CurrentTestCaseStats</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>when<sp/>an<sp/>exception<sp/>is<sp/>thrown<sp/>from<sp/>the<sp/>test<sp/>case<sp/>(or<sp/>it<sp/>crashes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_exception(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1TestCaseException" kindref="compound">TestCaseException</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>whenever<sp/>a<sp/>subcase<sp/>is<sp/>entered<sp/>(don&apos;t<sp/>cache<sp/>pointers<sp/>to<sp/>the<sp/>input)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subcase_start(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1SubcaseSignature" kindref="compound">SubcaseSignature</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>whenever<sp/>a<sp/>subcase<sp/>is<sp/>exited<sp/>(don&apos;t<sp/>cache<sp/>pointers<sp/>to<sp/>the<sp/>input)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subcase_end()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>for<sp/>each<sp/>assert<sp/>(don&apos;t<sp/>cache<sp/>pointers<sp/>to<sp/>the<sp/>input)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_assert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1AssertData" kindref="compound">AssertData</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>for<sp/>each<sp/>message<sp/>(don&apos;t<sp/>cache<sp/>pointers<sp/>to<sp/>the<sp/>input)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_message(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1MessageData" kindref="compound">MessageData</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>when<sp/>a<sp/>test<sp/>case<sp/>is<sp/>skipped<sp/>either<sp/>because<sp/>it<sp/>doesn&apos;t<sp/>pass<sp/>the<sp/>filters,<sp/>has<sp/>a<sp/>skip<sp/>decorator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>isn&apos;t<sp/>in<sp/>the<sp/>execution<sp/>range<sp/>(between<sp/>first<sp/>and<sp/>last)<sp/>(safe<sp/>to<sp/>cache<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>input)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_skipped(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1TestCaseData" kindref="compound">TestCaseData</ref>&amp;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_DECLARE_INTERFACE(<ref refid="structdoctest_1_1IReporter" kindref="compound">IReporter</ref>)</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>obtain<sp/>all<sp/>currently<sp/>active<sp/>contexts<sp/>and<sp/>stringify<sp/>them<sp/>if<sp/>one<sp/>wishes<sp/>to<sp/>do<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_num_active_contexts();</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1IContextScope" kindref="compound">IContextScope</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>get_active_contexts();</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>iterate<sp/>through<sp/>contexts<sp/>which<sp/>have<sp/>been<sp/>stringified<sp/>automatically<sp/>in<sp/>their<sp/>destructors<sp/>when<sp/>an<sp/>exception<sp/>has<sp/>been<sp/>thrown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_num_stringified_contexts();</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1String" kindref="compound">String</ref>*<sp/>get_stringified_contexts();</highlight></codeline>
<codeline lineno="2096"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reporterCreatorFunc<sp/>=<sp/><sp/><ref refid="structdoctest_1_1IReporter" kindref="compound">IReporter</ref>*<sp/>(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1ContextOptions" kindref="compound">ContextOptions</ref>&amp;);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_INTERFACE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerReporterImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prio,<sp/>reporterCreatorFunc<sp/>c,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isReporter);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Reporter&gt;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdoctest_1_1IReporter" kindref="compound">IReporter</ref>*<sp/>reporterCreator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1ContextOptions" kindref="compound">ContextOptions</ref>&amp;<sp/>o)<sp/>{</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Reporter(o);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Reporter&gt;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>registerReporter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>priority,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isReporter)<sp/>{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::registerReporterImpl(name,<sp/>priority,<sp/>detail::reporterCreator&lt;Reporter&gt;,<sp/>isReporter);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2114"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>doctest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_ASSERTS_RETURN_VALUES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FUNC_EMPTY<sp/>[]<sp/>{<sp/>return<sp/>false;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FUNC_EMPTY<sp/>(void)0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>registering<sp/>is<sp/>not<sp/>disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_ASSERTS_RETURN_VALUES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>[&amp;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FUNC_SCOPE_END<sp/>()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FUNC_SCOPE_RET(v)<sp/>return<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FUNC_SCOPE_END<sp/>while(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FUNC_SCOPE_RET(v)<sp/>(void)0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>common<sp/>code<sp/>in<sp/>asserts<sp/>-<sp/>for<sp/>convenience</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ASSERT_LOG_REACT_RETURN(b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(b.log())<sp/>DOCTEST_BREAK_INTO_DEBUGGER();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>b.react();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_FUNC_SCOPE_RET(!b.m_failed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WRAP_IN_TRY(x)<sp/>x;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WRAP_IN_TRY(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>try<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>catch(...)<sp/>{<sp/>DOCTEST_RB.translateException();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CAST_TO_VOID(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wuseless-cast&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;void&gt;(__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CAST_TO_VOID(...)<sp/>__VA_ARGS__;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>registers<sp/>the<sp/>test<sp/>by<sp/>initializing<sp/>a<sp/>dummy<sp/>var<sp/>with<sp/>a<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REGISTER_FUNCTION(global_prefix,<sp/>f,<sp/>decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>global_prefix<sp/>DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_),<sp/></highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::regTest(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::TestCase(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f,<sp/>__FILE__,<sp/>__LINE__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest_detail_test_suite_ns::getCurrentTestSuite())<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decorators))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_IMPLEMENT_FIXTURE(der,<sp/>base,<sp/>func,<sp/>decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>der<sp/>:<sp/>public<sp/>base<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>f();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>DOCTEST_INLINE_NOINLINE<sp/>void<sp/>func()<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>der<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.f();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY,<sp/>func,<sp/>decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_INLINE_NOINLINE<sp/>void<sp/>der::f()<sp/></highlight><highlight class="comment">//<sp/>NOLINT(misc-definitions-in-headers)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CREATE_AND_REGISTER_FUNCTION(f,<sp/>decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>f();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY,<sp/>f,<sp/>decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>f()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(f,<sp/>proxy,<sp/>decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>doctest::detail::funcType<sp/>proxy()<sp/>{<sp/>return<sp/>f;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_REGISTER_FUNCTION(inline,<sp/>proxy(),<sp/>decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>f()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>registering<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE(decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_),<sp/>decorators)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>registering<sp/>tests<sp/>in<sp/>classes<sp/>-<sp/>requires<sp/>C++17<sp/>for<sp/>inline<sp/>variables!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_CPLUSPLUS<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_CLASS(decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_PROXY_),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decorators)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_TEST_CASE_CLASS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_CLASS(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_TEST_CASE_CLASS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>registering<sp/>tests<sp/>with<sp/>a<sp/>fixture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_FIXTURE(c,<sp/>decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_),<sp/>c,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_),<sp/>decorators)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>converting<sp/>types<sp/>to<sp/>strings<sp/>without<sp/>the<sp/>&lt;typeinfo&gt;<sp/>header<sp/>and<sp/>demangling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TYPE_TO_STRING_AS(str,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace<sp/>doctest<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inline<sp/>String<sp/>toString&lt;__VA_ARGS__&gt;()<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>str;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TYPE_TO_STRING(...)<sp/>DOCTEST_TYPE_TO_STRING_AS(#__VA_ARGS__,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec,<sp/>T,<sp/>iter,<sp/>func)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>func();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>Tuple&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>iter;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>Type,<sp/>typename...<sp/>Rest&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>iter&lt;std::tuple&lt;Type,<sp/>Rest...&gt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter(const<sp/>char*<sp/>file,<sp/>unsigned<sp/>line,<sp/>int<sp/>index)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::regTest(doctest::detail::TestCase(func&lt;Type&gt;,<sp/>file,<sp/>line,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest_detail_test_suite_ns::getCurrentTestSuite(),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::toString&lt;Type&gt;(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int(line)<sp/>*<sp/>1000<sp/>+<sp/>index)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>dec);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter&lt;std::tuple&lt;Rest...&gt;&gt;(file,<sp/>line,<sp/>index<sp/>+<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>iter&lt;std::tuple&lt;&gt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter(const<sp/>char*,<sp/>unsigned,<sp/>int)<sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>func()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE_DEFINE(dec,<sp/>T,<sp/>id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec,<sp/>T,<sp/>DOCTEST_CAT(id,<sp/>ITERATOR),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id,<sp/>anon,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon,<sp/>DUMMY),<sp/></highlight><highlight class="comment">/*<sp/>NOLINT(cert-err58-cpp,<sp/>fuchsia-statically-constructed-objects)<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="2257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::instantiationHelper(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CAT(id,<sp/>ITERATOR)&lt;__VA_ARGS__&gt;(__FILE__,<sp/>__LINE__,<sp/>0)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id,<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_),<sp/>std::tuple&lt;__VA_ARGS__&gt;)<sp/>\</highlight></codeline>
<codeline lineno="2262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE_APPLY(id,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id,<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_),<sp/>__VA_ARGS__)<sp/>\</highlight></codeline>
<codeline lineno="2266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec,<sp/>T,<sp/>anon,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec,<sp/>T,<sp/>DOCTEST_CAT(anon,<sp/>ITERATOR),<sp/>anon);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon,<sp/>anon,<sp/>std::tuple&lt;__VA_ARGS__&gt;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>anon()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE(dec,<sp/>T,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec,<sp/>T,<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>subcases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SUBCASE(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(const<sp/>doctest::detail::Subcase<sp/>&amp;<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_)<sp/>DOCTEST_UNUSED<sp/>=<sp/><sp/>\</highlight></codeline>
<codeline lineno="2280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::Subcase(name,<sp/>__FILE__,<sp/>__LINE__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>grouping<sp/>tests<sp/>in<sp/>test<sp/>suites<sp/>by<sp/>using<sp/>code<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_SUITE_IMPL(decorators,<sp/>ns_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace<sp/>ns_name<sp/>{<sp/>namespace<sp/>doctest_detail_test_suite_ns<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>DOCTEST_NOINLINE<sp/>doctest::detail::TestSuite&amp;<sp/>getCurrentTestSuite()<sp/>noexcept<sp/>{<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wexit-time-destructors&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wmissing-field-initializers&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>doctest::detail::TestSuite<sp/>data{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>bool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inited<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_POP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!inited)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data*<sp/>decorators;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inited<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>namespace<sp/>ns_name</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_SUITE(decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2305"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_TEST_SUITE_IMPL(decorators,<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_SUITE_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>starting<sp/>a<sp/>testsuite<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_SUITE_BEGIN(decorators)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_),<sp/></highlight><highlight class="comment">/*<sp/>NOLINT(cert-err58-cpp)<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="2310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::setTestSuite(doctest::detail::TestSuite()<sp/>*<sp/>decorators))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>ending<sp/>a<sp/>testsuite<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_SUITE_END<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_),<sp/></highlight><highlight class="comment">/*<sp/>NOLINT(cert-err58-cpp)<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="2316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::setTestSuite(doctest::detail::TestSuite()<sp/>*<sp/>&quot;&quot;</highlight><highlight class="normal">))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_)<sp/>=<sp/>int</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>registering<sp/>exception<sp/>translators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(translatorName,<sp/>signature)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>doctest::String<sp/>translatorName(signature);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_),<sp/></highlight><highlight class="comment">/*<sp/>NOLINT(cert-err58-cpp)<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="2323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::registerExceptionTranslator(translatorName))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>doctest::String<sp/>translatorName(signature)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>registering<sp/>reporters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REGISTER_REPORTER(name,<sp/>priority,<sp/>reporter)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_),<sp/></highlight><highlight class="comment">/*<sp/>NOLINT(cert-err58-cpp)<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="2333"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::registerReporter&lt;reporter&gt;(name,<sp/>priority,<sp/>true))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>registering<sp/>listeners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REGISTER_LISTENER(name,<sp/>priority,<sp/>reporter)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_),<sp/></highlight><highlight class="comment">/*<sp/>NOLINT(cert-err58-cpp)<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="2339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::registerReporter&lt;reporter&gt;(name,<sp/>priority,<sp/>false))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2340"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>logging<sp/>-<sp/>disabling<sp/>formatting<sp/>because<sp/>it&apos;s<sp/>important<sp/>to<sp/>have<sp/>these<sp/>on<sp/>2<sp/>separate<sp/>lines<sp/>-<sp/>see<sp/>PR<sp/>#557</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INFO(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_OTHER_),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INFO_IMPL(mb_name,<sp/>s_name,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto<sp/>DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_)<sp/>=<sp/>doctest::detail::MakeContextScope(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](std::ostream*<sp/>s_name)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::MessageBuilder<sp/>mb_name(__FILE__,<sp/>__LINE__,<sp/>doctest::assertType::is_warn);<sp/>\</highlight></codeline>
<codeline lineno="2354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb_name.m_stream<sp/>=<sp/>s_name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2355"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb_name<sp/>*<sp/>__VA_ARGS__;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CAPTURE(x)<sp/>DOCTEST_INFO(#x<sp/>&quot;<sp/>:=<sp/>&quot;</highlight><highlight class="normal">,<sp/>x)</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ADD_AT_IMPL(type,<sp/>file,<sp/>line,<sp/>mb,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2362"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::MessageBuilder<sp/>mb(file,<sp/>line,<sp/>doctest::assertType::type);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2363"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb<sp/>*<sp/>__VA_ARGS__;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(mb.log())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_BREAK_INTO_DEBUGGER();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb.react();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ADD_MESSAGE_AT(file,<sp/>line,<sp/>...)<sp/>DOCTEST_ADD_AT_IMPL(is_warn,<sp/>file,<sp/>line,<sp/>DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ADD_FAIL_CHECK_AT(file,<sp/>line,<sp/>...)<sp/>DOCTEST_ADD_AT_IMPL(is_check,<sp/>file,<sp/>line,<sp/>DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ADD_FAIL_AT(file,<sp/>line,<sp/>...)<sp/>DOCTEST_ADD_AT_IMPL(is_require,<sp/>file,<sp/>line,<sp/>DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MESSAGE(...)<sp/>DOCTEST_ADD_MESSAGE_AT(__FILE__,<sp/>__LINE__,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAIL_CHECK(...)<sp/>DOCTEST_ADD_FAIL_CHECK_AT(__FILE__,<sp/>__LINE__,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAIL(...)<sp/>DOCTEST_ADD_FAIL_AT(__FILE__,<sp/>__LINE__,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TO_LVALUE(...)<sp/>__VA_ARGS__<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>removed<sp/>to<sp/>keep<sp/>backwards<sp/>compatibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_SUPER_FAST_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ASSERT_IMPLEMENT_2(assert_type,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Woverloaded-shift-op-parentheses&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>doctest::detail::ResultBuilder<sp/>DOCTEST_RB(doctest::assertType::assert_type,<sp/>__FILE__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/>#__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_WRAP_IN_TRY(DOCTEST_RB.setResult(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>__VA_ARGS__))<sp/></highlight><highlight class="comment">/*<sp/>NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ASSERT_IMPLEMENT_1(assert_type,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_IMPLEMENT_2(assert_type,<sp/>__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>DOCTEST_FUNC_SCOPE_END<sp/></highlight><highlight class="comment">//<sp/>NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BINARY_ASSERT(assert_type,<sp/>comp,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::ResultBuilder<sp/>DOCTEST_RB(doctest::assertType::assert_type,<sp/>__FILE__,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/>#__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_WRAP_IN_TRY(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_RB.binary_assert&lt;doctest::detail::binaryAssertComparison::comp&gt;(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_UNARY_ASSERT(assert_type,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2410"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2411"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::ResultBuilder<sp/>DOCTEST_RB(doctest::assertType::assert_type,<sp/>__FILE__,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2412"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/>#__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_SUPER_FAST_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>necessary<sp/>for<sp/>&lt;ASSERT&gt;_MESSAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ASSERT_IMPLEMENT_2<sp/>DOCTEST_ASSERT_IMPLEMENT_1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ASSERT_IMPLEMENT_1(assert_type,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Woverloaded-shift-op-parentheses&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/>doctest::detail::decomp_assert(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::assertType::assert_type,<sp/>__FILE__,<sp/>__LINE__,<sp/>#__VA_ARGS__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>__VA_ARGS__)<sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BINARY_ASSERT(assert_type,<sp/>comparison,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2430"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>doctest::detail::binary_assert&lt;doctest::detail::binaryAssertComparison::comparison&gt;(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2431"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::assertType::assert_type,<sp/>__FILE__,<sp/>__LINE__,<sp/>#__VA_ARGS__,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_UNARY_ASSERT(assert_type,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2434"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>doctest::detail::unary_assert(doctest::assertType::assert_type,<sp/>__FILE__,<sp/>__LINE__,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2435"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#__VA_ARGS__,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_SUPER_FAST_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN(...)<sp/>DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK(...)<sp/>DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE(...)<sp/>DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_FALSE(...)<sp/>DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN_FALSE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_FALSE(...)<sp/>DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK_FALSE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_FALSE(...)<sp/>DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE_FALSE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN,<sp/>cond);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK,<sp/>cond);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE,<sp/>cond);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_FALSE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN_FALSE,<sp/>cond);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_FALSE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK_FALSE,<sp/>cond);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_FALSE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE_FALSE,<sp/>cond);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_EQ(...)<sp/>DOCTEST_BINARY_ASSERT(DT_WARN_EQ,<sp/>eq,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_EQ(...)<sp/>DOCTEST_BINARY_ASSERT(DT_CHECK_EQ,<sp/>eq,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_EQ(...)<sp/>DOCTEST_BINARY_ASSERT(DT_REQUIRE_EQ,<sp/>eq,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NE(...)<sp/>DOCTEST_BINARY_ASSERT(DT_WARN_NE,<sp/>ne,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NE(...)<sp/>DOCTEST_BINARY_ASSERT(DT_CHECK_NE,<sp/>ne,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NE(...)<sp/>DOCTEST_BINARY_ASSERT(DT_REQUIRE_NE,<sp/>ne,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_GT(...)<sp/>DOCTEST_BINARY_ASSERT(DT_WARN_GT,<sp/>gt,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_GT(...)<sp/>DOCTEST_BINARY_ASSERT(DT_CHECK_GT,<sp/>gt,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_GT(...)<sp/>DOCTEST_BINARY_ASSERT(DT_REQUIRE_GT,<sp/>gt,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_LT(...)<sp/>DOCTEST_BINARY_ASSERT(DT_WARN_LT,<sp/>lt,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_LT(...)<sp/>DOCTEST_BINARY_ASSERT(DT_CHECK_LT,<sp/>lt,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_LT(...)<sp/>DOCTEST_BINARY_ASSERT(DT_REQUIRE_LT,<sp/>lt,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_GE(...)<sp/>DOCTEST_BINARY_ASSERT(DT_WARN_GE,<sp/>ge,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_GE(...)<sp/>DOCTEST_BINARY_ASSERT(DT_CHECK_GE,<sp/>ge,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_GE(...)<sp/>DOCTEST_BINARY_ASSERT(DT_REQUIRE_GE,<sp/>ge,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_LE(...)<sp/>DOCTEST_BINARY_ASSERT(DT_WARN_LE,<sp/>le,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_LE(...)<sp/>DOCTEST_BINARY_ASSERT(DT_CHECK_LE,<sp/>le,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_LE(...)<sp/>DOCTEST_BINARY_ASSERT(DT_REQUIRE_LE,<sp/>le,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_UNARY(...)<sp/>DOCTEST_UNARY_ASSERT(DT_WARN_UNARY,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_UNARY(...)<sp/>DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_UNARY(...)<sp/>DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_UNARY_FALSE(...)<sp/>DOCTEST_UNARY_ASSERT(DT_WARN_UNARY_FALSE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_UNARY_FALSE(...)<sp/>DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY_FALSE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_UNARY_FALSE(...)<sp/>DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY_FALSE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ASSERT_THROWS_AS(expr,<sp/>assert_type,<sp/>message,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2484"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2485"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!doctest::getContextOptions()-&gt;no_throw)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2486"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::ResultBuilder<sp/>DOCTEST_RB(doctest::assertType::assert_type,<sp/>__FILE__,<sp/><sp/>\</highlight></codeline>
<codeline lineno="2487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/>#expr,<sp/>#__VA_ARGS__,<sp/>message);<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CAST_TO_VOID(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch(const<sp/>typename<sp/>doctest::detail::types::remove_const&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>doctest::detail::types::remove_reference&lt;__VA_ARGS__&gt;::type&gt;::type&amp;)<sp/>{\</highlight></codeline>
<codeline lineno="2492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_RB.translateException();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_RB.m_threw_as<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch(...)<sp/>{<sp/>DOCTEST_RB.translateException();<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>NOLINT(*-else-after-return)<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2497"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FUNC_SCOPE_RET(false);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2498"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ASSERT_THROWS_WITH(expr,<sp/>expr_str,<sp/>assert_type,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2503"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!doctest::getContextOptions()-&gt;no_throw)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2504"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::ResultBuilder<sp/>DOCTEST_RB(doctest::assertType::assert_type,<sp/>__FILE__,<sp/><sp/>\</highlight></codeline>
<codeline lineno="2505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/>expr_str,<sp/>&quot;&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CAST_TO_VOID(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch(...)<sp/>{<sp/>DOCTEST_RB.translateException();<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>NOLINT(*-else-after-return)<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_FUNC_SCOPE_RET(false);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ASSERT_NOTHROW(assert_type,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::detail::ResultBuilder<sp/>DOCTEST_RB(doctest::assertType::assert_type,<sp/>__FILE__,<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__LINE__,<sp/>#__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CAST_TO_VOID(__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch(...)<sp/>{<sp/>DOCTEST_RB.translateException();<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS(...)<sp/>DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__),<sp/>#__VA_ARGS__,<sp/>DT_WARN_THROWS,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS(...)<sp/>DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__),<sp/>#__VA_ARGS__,<sp/>DT_CHECK_THROWS,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS(...)<sp/>DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__),<sp/>#__VA_ARGS__,<sp/>DT_REQUIRE_THROWS,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_ASSERT_THROWS_AS(expr,<sp/>DT_WARN_THROWS_AS,<sp/>&quot;&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_ASSERT_THROWS_AS(expr,<sp/>DT_CHECK_THROWS_AS,<sp/>&quot;&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_ASSERT_THROWS_AS(expr,<sp/>DT_REQUIRE_THROWS_AS,<sp/>&quot;&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_ASSERT_THROWS_WITH(expr,<sp/>#expr,<sp/>DT_WARN_THROWS_WITH,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_ASSERT_THROWS_WITH(expr,<sp/>#expr,<sp/>DT_CHECK_THROWS_WITH,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_ASSERT_THROWS_WITH(expr,<sp/>#expr,<sp/>DT_REQUIRE_THROWS_WITH,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_AS(expr,<sp/>message,<sp/>...)<sp/>DOCTEST_ASSERT_THROWS_AS(expr,<sp/>DT_WARN_THROWS_WITH_AS,<sp/>message,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_AS(expr,<sp/>message,<sp/>...)<sp/>DOCTEST_ASSERT_THROWS_AS(expr,<sp/>DT_CHECK_THROWS_WITH_AS,<sp/>message,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS(expr,<sp/>message,<sp/>...)<sp/>DOCTEST_ASSERT_THROWS_AS(expr,<sp/>DT_REQUIRE_THROWS_WITH_AS,<sp/>message,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NOTHROW(...)<sp/>DOCTEST_ASSERT_NOTHROW(DT_WARN_NOTHROW,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NOTHROW(...)<sp/>DOCTEST_ASSERT_NOTHROW(DT_CHECK_NOTHROW,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NOTHROW(...)<sp/>DOCTEST_ASSERT_NOTHROW(DT_REQUIRE_NOTHROW,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_WARN_THROWS(expr);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_CHECK_THROWS(expr);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_REQUIRE_THROWS(expr);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_WARN_THROWS_AS(expr,<sp/>ex);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_CHECK_THROWS_AS(expr,<sp/>ex);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_REQUIRE_THROWS_AS(expr,<sp/>ex);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_WARN_THROWS_WITH(expr,<sp/>with);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_CHECK_THROWS_WITH(expr,<sp/>with);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_REQUIRE_THROWS_WITH(expr,<sp/>with);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_WARN_THROWS_WITH_AS(expr,<sp/>with,<sp/>ex);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_CHECK_THROWS_WITH_AS(expr,<sp/>with,<sp/>ex);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS(expr,<sp/>with,<sp/>ex);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_WARN_NOTHROW(expr);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_CHECK_NOTHROW(expr);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_SCOPE_BEGIN<sp/>{<sp/>DOCTEST_INFO(__VA_ARGS__);<sp/>DOCTEST_REQUIRE_NOTHROW(expr);<sp/>}<sp/>DOCTEST_FUNC_SCOPE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==<sp/>WHAT<sp/>FOLLOWS<sp/>IS<sp/>VERSIONS<sp/>OF<sp/>THE<sp/>MACROS<sp/>THAT<sp/>DO<sp/>NOT<sp/>DO<sp/>ANY<sp/>REGISTERING!<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==<sp/>THIS<sp/>CAN<sp/>BE<sp/>ENABLED<sp/>BY<sp/>DEFINING<sp/>DOCTEST_CONFIG_DISABLE<sp/>GLOBALLY!<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_IMPLEMENT_FIXTURE(der,<sp/>base,<sp/>func,<sp/>name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace<sp/></highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>DOCTEST_UNUSED_TEMPLATE_TYPE&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>der<sp/>:<sp/>public<sp/>base<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2575"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>void<sp/>f();<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>DOCTEST_UNUSED_TEMPLATE_TYPE&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>void<sp/>der&lt;DOCTEST_UNUSED_TEMPLATE_TYPE&gt;::f()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CREATE_AND_REGISTER_FUNCTION(f,<sp/>name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2581"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>DOCTEST_UNUSED_TEMPLATE_TYPE&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>void<sp/>f()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>registering<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_),<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>registering<sp/>tests<sp/>in<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_CLASS(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2590"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_),<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>registering<sp/>tests<sp/>with<sp/>a<sp/>fixture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_FIXTURE(x,<sp/>name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2594"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_),<sp/>x,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_),<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>converting<sp/>types<sp/>to<sp/>strings<sp/>without<sp/>the<sp/>&lt;typeinfo&gt;<sp/>header<sp/>and<sp/>demangling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TYPE_TO_STRING_AS(str,<sp/>...)<sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TYPE_TO_STRING(...)<sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>typed<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE(name,<sp/>type,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2603"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>type&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>void<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_)()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name,<sp/>type,<sp/>id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2607"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>type&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2608"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>void<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_)()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,<sp/>...)<sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE_APPLY(id,<sp/>...)<sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>subcases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SUBCASE(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>testsuite<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_SUITE(name)<sp/>namespace<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>starting<sp/>a<sp/>testsuite<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_SUITE_BEGIN(name)<sp/>static_assert(true,<sp/>&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>ending<sp/>a<sp/>testsuite<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_SUITE_END<sp/>using<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_)<sp/>=<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2626"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>DOCTEST_UNUSED_TEMPLATE_TYPE&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2627"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>doctest::String<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_)(signature)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REGISTER_REPORTER(name,<sp/>priority,<sp/>reporter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REGISTER_LISTENER(name,<sp/>priority,<sp/>reporter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INFO(...)<sp/>(static_cast&lt;void&gt;(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CAPTURE(x)<sp/>(static_cast&lt;void&gt;(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ADD_MESSAGE_AT(file,<sp/>line,<sp/>...)<sp/>(static_cast&lt;void&gt;(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ADD_FAIL_CHECK_AT(file,<sp/>line,<sp/>...)<sp/>(static_cast&lt;void&gt;(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ADD_FAIL_AT(file,<sp/>line,<sp/>...)<sp/>(static_cast&lt;void&gt;(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MESSAGE(...)<sp/>(static_cast&lt;void&gt;(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAIL_CHECK(...)<sp/>(static_cast&lt;void&gt;(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAIL(...)<sp/>(static_cast&lt;void&gt;(0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2642"><highlight class="preprocessor"><sp/>&amp;&amp;<sp/>defined(DOCTEST_CONFIG_ASSERTS_RETURN_VALUES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>__VA_ARGS__;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>__VA_ARGS__;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>__VA_ARGS__;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_FALSE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>!(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_FALSE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>!(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_FALSE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>!(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_MESSAGE(cond,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>cond;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_MESSAGE(cond,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>cond;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_MESSAGE(cond,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>cond;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_FALSE_MESSAGE(cond,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>!(cond);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_FALSE_MESSAGE(cond,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>!(cond);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_FALSE_MESSAGE(cond,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>!(cond);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">doctest<sp/>{</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_RELATIONAL_OP(name,<sp/>op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2661"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>L,<sp/>typename<sp/>R&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2662"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>bool<sp/>name(const<sp/>DOCTEST_REF_WRAP(L)<sp/>lhs,<sp/>const<sp/>DOCTEST_REF_WRAP(R)<sp/>rhs)<sp/>{<sp/>return<sp/>lhs<sp/>op<sp/>rhs;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(eq,<sp/>==)</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(ne,<sp/>!=)</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(lt,<sp/>&lt;)</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(gt,<sp/>&gt;)</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(le,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_RELATIONAL_OP(ge,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="2670"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>doctest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_EQ(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::eq(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_EQ(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::eq(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_EQ(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::eq(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::ne(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::ne(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::ne(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_LT(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::lt(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_LT(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::lt(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_LT(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::lt(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_GT(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::gt(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_GT(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::gt(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_GT(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::gt(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_LE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::le(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_LE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::le(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_LE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::le(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_GE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::ge(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_GE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::ge(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_GE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>doctest::detail::ge(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_UNARY(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>__VA_ARGS__;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_UNARY(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>__VA_ARGS__;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_UNARY(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>__VA_ARGS__;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_UNARY_FALSE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>!(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_UNARY_FALSE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>!(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_UNARY_FALSE(...)<sp/>[&amp;]<sp/>{<sp/>return<sp/>!(__VA_ARGS__);<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH(expr,<sp/>with,<sp/>...)<sp/>[]<sp/>{<sp/>static_assert(false,<sp/>&quot;Exception<sp/>translation<sp/>is<sp/>not<sp/>available<sp/>when<sp/>doctest<sp/>is<sp/>disabled.&quot;</highlight><highlight class="normal">);<sp/>return<sp/>false;<sp/>}()</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_AS(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_AS(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(,,)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS(...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>false;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS(...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>false;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS(...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>false;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_AS(expr,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>expr;<sp/>}<sp/>catch<sp/>(__VA_ARGS__)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>}<sp/>return<sp/>false;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_AS(expr,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>expr;<sp/>}<sp/>catch<sp/>(__VA_ARGS__)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>}<sp/>return<sp/>false;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_AS(expr,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>expr;<sp/>}<sp/>catch<sp/>(__VA_ARGS__)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>}<sp/>return<sp/>false;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NOTHROW(...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>false;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NOTHROW(...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>false;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NOTHROW(...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>false;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_MESSAGE(expr,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>false;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_MESSAGE(expr,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>false;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_MESSAGE(expr,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>false;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>expr;<sp/>}<sp/>catch<sp/>(__VA_ARGS__)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>}<sp/>return<sp/>false;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>expr;<sp/>}<sp/>catch<sp/>(__VA_ARGS__)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>}<sp/>return<sp/>false;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>expr;<sp/>}<sp/>catch<sp/>(__VA_ARGS__)<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>}<sp/>return<sp/>false;<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>false;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>false;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>[&amp;]<sp/>{<sp/>try<sp/>{<sp/>__VA_ARGS__;<sp/>return<sp/>true;<sp/>}<sp/>catch<sp/>(...)<sp/>{<sp/>return<sp/>false;<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_FALSE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_FALSE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_FALSE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_FALSE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_FALSE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_FALSE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_EQ(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_EQ(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_EQ(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_GT(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_GT(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_GT(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_LT(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_LT(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_LT(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_GE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_GE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_GE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_LE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_LE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_LE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_UNARY(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_UNARY(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_UNARY(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_UNARY_FALSE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_UNARY_FALSE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_UNARY_FALSE(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_AS(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_AS(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NOTHROW(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NOTHROW(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NOTHROW(...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC<sp/>DOCTEST_FUNC_EMPTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC<sp/>[]<sp/>{<sp/>static_assert(false,<sp/>&quot;Exceptions<sp/>are<sp/>disabled!<sp/>&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;Use<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS<sp/>if<sp/>you<sp/>want<sp/>to<sp/>compile<sp/>with<sp/>exceptions<sp/>disabled.&quot;);<sp/>return<sp/>false;<sp/>}()</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_MESSAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_FALSE_MESSAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_EQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_NE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_GT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_LT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_GE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_UNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_REQUIRE_UNARY_FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_FALSE<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_MESSAGE<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_FALSE_MESSAGE<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_EQ<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NE<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_GT<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_LT<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_GE<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_LE<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_UNARY<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_UNARY_FALSE<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS(...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS(...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS(...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_AS(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_AS(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NOTHROW(...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NOTHROW(...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NOTHROW(...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WARN_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CHECK_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_EXCEPTION_EMPTY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KEPT<sp/>FOR<sp/>BACKWARDS<sp/>COMPATIBILITY<sp/>-<sp/>FORWARDING<sp/>TO<sp/>THE<sp/>RIGHT<sp/>MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_WARN_EQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_WARN_EQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_CHECK_EQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CHECK_EQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_REQUIRE_EQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_REQUIRE_EQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_WARN_NE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_WARN_NE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_CHECK_NE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CHECK_NE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_REQUIRE_NE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_REQUIRE_NE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_WARN_GT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_WARN_GT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_CHECK_GT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CHECK_GT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_REQUIRE_GT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_REQUIRE_GT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_WARN_LT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_WARN_LT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_CHECK_LT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CHECK_LT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_REQUIRE_LT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_REQUIRE_LT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_WARN_GE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_WARN_GE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_CHECK_GE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CHECK_GE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_REQUIRE_GE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_REQUIRE_GE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_WARN_LE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_WARN_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_CHECK_LE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CHECK_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_REQUIRE_LE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_REQUIRE_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_WARN_UNARY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_WARN_UNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_CHECK_UNARY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CHECK_UNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_REQUIRE_UNARY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_REQUIRE_UNARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_WARN_UNARY_FALSE<sp/><sp/><sp/><sp/>DOCTEST_WARN_UNARY_FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_CHECK_UNARY_FALSE<sp/><sp/><sp/>DOCTEST_CHECK_UNARY_FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_FAST_REQUIRE_UNARY_FALSE<sp/>DOCTEST_REQUIRE_UNARY_FALSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id,<sp/>...)<sp/>DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BDD<sp/>style<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SCENARIO(name)<sp/>DOCTEST_TEST_CASE(&quot;<sp/><sp/>Scenario:<sp/>&quot;</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SCENARIO_CLASS(name)<sp/>DOCTEST_TEST_CASE_CLASS(&quot;<sp/><sp/>Scenario:<sp/>&quot;</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SCENARIO_TEMPLATE(name,<sp/>T,<sp/>...)<sp/><sp/>DOCTEST_TEST_CASE_TEMPLATE(&quot;<sp/><sp/>Scenario:<sp/>&quot;</highlight><highlight class="normal"><sp/>name,<sp/>T,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SCENARIO_TEMPLATE_DEFINE(name,<sp/>T,<sp/>id)<sp/>DOCTEST_TEST_CASE_TEMPLATE_DEFINE(&quot;<sp/><sp/>Scenario:<sp/>&quot;</highlight><highlight class="normal"><sp/>name,<sp/>T,<sp/>id)</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GIVEN(name)<sp/><sp/><sp/><sp/><sp/>DOCTEST_SUBCASE(&quot;<sp/><sp/><sp/>Given:<sp/>&quot;</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_WHEN(name)<sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_SUBCASE(&quot;<sp/><sp/><sp/><sp/>When:<sp/>&quot;</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_AND_WHEN(name)<sp/><sp/>DOCTEST_SUBCASE(&quot;And<sp/>when:<sp/>&quot;</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_THEN(name)<sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_SUBCASE(&quot;<sp/><sp/><sp/><sp/>Then:<sp/>&quot;</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_AND_THEN(name)<sp/><sp/>DOCTEST_SUBCASE(&quot;<sp/><sp/><sp/><sp/><sp/>And:<sp/>&quot;</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==<sp/>SHORT<sp/>VERSIONS<sp/>OF<sp/>THE<sp/>MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE(name)<sp/>DOCTEST_TEST_CASE(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE_CLASS(name)<sp/>DOCTEST_TEST_CASE_CLASS(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE_FIXTURE(x,<sp/>name)<sp/>DOCTEST_TEST_CASE_FIXTURE(x,<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_TO_STRING_AS(str,<sp/>...)<sp/>DOCTEST_TYPE_TO_STRING_AS(str,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_TO_STRING(...)<sp/>DOCTEST_TYPE_TO_STRING(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE_TEMPLATE(name,<sp/>T,<sp/>...)<sp/>DOCTEST_TEST_CASE_TEMPLATE(name,<sp/>T,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE_TEMPLATE_DEFINE(name,<sp/>T,<sp/>id)<sp/>DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name,<sp/>T,<sp/>id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE_TEMPLATE_INVOKE(id,<sp/>...)<sp/>DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE_TEMPLATE_APPLY(id,<sp/>...)<sp/>DOCTEST_TEST_CASE_TEMPLATE_APPLY(id,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUBCASE(name)<sp/>DOCTEST_SUBCASE(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_SUITE(decorators)<sp/>DOCTEST_TEST_SUITE(decorators)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_SUITE_BEGIN(name)<sp/>DOCTEST_TEST_SUITE_BEGIN(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_SUITE_END<sp/>DOCTEST_TEST_SUITE_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_EXCEPTION_TRANSLATOR(signature)<sp/>DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_REPORTER(name,<sp/>priority,<sp/>reporter)<sp/>DOCTEST_REGISTER_REPORTER(name,<sp/>priority,<sp/>reporter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_LISTENER(name,<sp/>priority,<sp/>reporter)<sp/>DOCTEST_REGISTER_LISTENER(name,<sp/>priority,<sp/>reporter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INFO(...)<sp/>DOCTEST_INFO(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAPTURE(x)<sp/>DOCTEST_CAPTURE(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADD_MESSAGE_AT(file,<sp/>line,<sp/>...)<sp/>DOCTEST_ADD_MESSAGE_AT(file,<sp/>line,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADD_FAIL_CHECK_AT(file,<sp/>line,<sp/>...)<sp/>DOCTEST_ADD_FAIL_CHECK_AT(file,<sp/>line,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADD_FAIL_AT(file,<sp/>line,<sp/>...)<sp/>DOCTEST_ADD_FAIL_AT(file,<sp/>line,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MESSAGE(...)<sp/>DOCTEST_MESSAGE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAIL_CHECK(...)<sp/>DOCTEST_FAIL_CHECK(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAIL(...)<sp/>DOCTEST_FAIL(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TO_LVALUE(...)<sp/>DOCTEST_TO_LVALUE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN(...)<sp/>DOCTEST_WARN(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_FALSE(...)<sp/>DOCTEST_WARN_FALSE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_THROWS(...)<sp/>DOCTEST_WARN_THROWS(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_WARN_THROWS_AS(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_THROWS_WITH_AS(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH_AS(expr,<sp/>with,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_NOTHROW(...)<sp/>DOCTEST_WARN_NOTHROW(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK(...)<sp/>DOCTEST_CHECK(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_FALSE(...)<sp/>DOCTEST_CHECK_FALSE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS(...)<sp/>DOCTEST_CHECK_THROWS(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_CHECK_THROWS_AS(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_CHECK_THROWS_WITH(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_WITH_AS(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_CHECK_THROWS_WITH_AS(expr,<sp/>with,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_NOTHROW(...)<sp/>DOCTEST_CHECK_NOTHROW(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE(...)<sp/>DOCTEST_REQUIRE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_FALSE(...)<sp/>DOCTEST_REQUIRE_FALSE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS(...)<sp/>DOCTEST_REQUIRE_THROWS(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2979"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_AS(expr,<sp/>...)<sp/>DOCTEST_REQUIRE_THROWS_AS(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_WITH(expr,<sp/>...)<sp/>DOCTEST_REQUIRE_THROWS_WITH(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_WITH_AS(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS(expr,<sp/>with,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_NOTHROW(...)<sp/>DOCTEST_REQUIRE_NOTHROW(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_WARN_MESSAGE(cond,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_FALSE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_WARN_FALSE_MESSAGE(cond,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_WARN_THROWS_MESSAGE(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_WARN_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_WARN_NOTHROW_MESSAGE(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_CHECK_MESSAGE(cond,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_FALSE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_CHECK_FALSE_MESSAGE(cond,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_CHECK_THROWS_MESSAGE(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_CHECK_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_CHECK_NOTHROW_MESSAGE(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_REQUIRE_MESSAGE(cond,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_FALSE_MESSAGE(cond,<sp/>...)<sp/>DOCTEST_REQUIRE_FALSE_MESSAGE(cond,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_REQUIRE_THROWS_MESSAGE(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>...)<sp/>DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr,<sp/>ex,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>...)<sp/>DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr,<sp/>with,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>...)<sp/>DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr,<sp/>with,<sp/>ex,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_NOTHROW_MESSAGE(expr,<sp/>...)<sp/>DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCENARIO(name)<sp/>DOCTEST_SCENARIO(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCENARIO_CLASS(name)<sp/>DOCTEST_SCENARIO_CLASS(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCENARIO_TEMPLATE(name,<sp/>T,<sp/>...)<sp/>DOCTEST_SCENARIO_TEMPLATE(name,<sp/>T,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCENARIO_TEMPLATE_DEFINE(name,<sp/>T,<sp/>id)<sp/>DOCTEST_SCENARIO_TEMPLATE_DEFINE(name,<sp/>T,<sp/>id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GIVEN(name)<sp/>DOCTEST_GIVEN(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WHEN(name)<sp/>DOCTEST_WHEN(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AND_WHEN(name)<sp/>DOCTEST_AND_WHEN(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THEN(name)<sp/>DOCTEST_THEN(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AND_THEN(name)<sp/>DOCTEST_AND_THEN(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_EQ(...)<sp/>DOCTEST_WARN_EQ(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_EQ(...)<sp/>DOCTEST_CHECK_EQ(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_EQ(...)<sp/>DOCTEST_REQUIRE_EQ(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_NE(...)<sp/>DOCTEST_WARN_NE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_NE(...)<sp/>DOCTEST_CHECK_NE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_NE(...)<sp/>DOCTEST_REQUIRE_NE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_GT(...)<sp/>DOCTEST_WARN_GT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_GT(...)<sp/>DOCTEST_CHECK_GT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_GT(...)<sp/>DOCTEST_REQUIRE_GT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_LT(...)<sp/>DOCTEST_WARN_LT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_LT(...)<sp/>DOCTEST_CHECK_LT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_LT(...)<sp/>DOCTEST_REQUIRE_LT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_GE(...)<sp/>DOCTEST_WARN_GE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_GE(...)<sp/>DOCTEST_CHECK_GE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_GE(...)<sp/>DOCTEST_REQUIRE_GE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_LE(...)<sp/>DOCTEST_WARN_LE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_LE(...)<sp/>DOCTEST_CHECK_LE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_LE(...)<sp/>DOCTEST_REQUIRE_LE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_UNARY(...)<sp/>DOCTEST_WARN_UNARY(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_UNARY(...)<sp/>DOCTEST_CHECK_UNARY(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_UNARY(...)<sp/>DOCTEST_REQUIRE_UNARY(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN_UNARY_FALSE(...)<sp/>DOCTEST_WARN_UNARY_FALSE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_UNARY_FALSE(...)<sp/>DOCTEST_CHECK_UNARY_FALSE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_UNARY_FALSE(...)<sp/>DOCTEST_REQUIRE_UNARY_FALSE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KEPT<sp/>FOR<sp/>BACKWARDS<sp/>COMPATIBILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_WARN_EQ(...)<sp/>DOCTEST_FAST_WARN_EQ(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_CHECK_EQ(...)<sp/>DOCTEST_FAST_CHECK_EQ(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_REQUIRE_EQ(...)<sp/>DOCTEST_FAST_REQUIRE_EQ(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_WARN_NE(...)<sp/>DOCTEST_FAST_WARN_NE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_CHECK_NE(...)<sp/>DOCTEST_FAST_CHECK_NE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_REQUIRE_NE(...)<sp/>DOCTEST_FAST_REQUIRE_NE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_WARN_GT(...)<sp/>DOCTEST_FAST_WARN_GT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_CHECK_GT(...)<sp/>DOCTEST_FAST_CHECK_GT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_REQUIRE_GT(...)<sp/>DOCTEST_FAST_REQUIRE_GT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_WARN_LT(...)<sp/>DOCTEST_FAST_WARN_LT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_CHECK_LT(...)<sp/>DOCTEST_FAST_CHECK_LT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_REQUIRE_LT(...)<sp/>DOCTEST_FAST_REQUIRE_LT(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_WARN_GE(...)<sp/>DOCTEST_FAST_WARN_GE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_CHECK_GE(...)<sp/>DOCTEST_FAST_CHECK_GE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_REQUIRE_GE(...)<sp/>DOCTEST_FAST_REQUIRE_GE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_WARN_LE(...)<sp/>DOCTEST_FAST_WARN_LE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_CHECK_LE(...)<sp/>DOCTEST_FAST_CHECK_LE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_REQUIRE_LE(...)<sp/>DOCTEST_FAST_REQUIRE_LE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_WARN_UNARY(...)<sp/>DOCTEST_FAST_WARN_UNARY(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_CHECK_UNARY(...)<sp/>DOCTEST_FAST_CHECK_UNARY(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_REQUIRE_UNARY(...)<sp/>DOCTEST_FAST_REQUIRE_UNARY(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_WARN_UNARY_FALSE(...)<sp/>DOCTEST_FAST_WARN_UNARY_FALSE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_CHECK_UNARY_FALSE(...)<sp/>DOCTEST_FAST_CHECK_UNARY_FALSE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_REQUIRE_UNARY_FALSE(...)<sp/>DOCTEST_FAST_REQUIRE_UNARY_FALSE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE_TEMPLATE_INSTANTIATE(id,<sp/>...)<sp/>DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>here<sp/>to<sp/>clear<sp/>the<sp/>&apos;current<sp/>test<sp/>suite&apos;<sp/>for<sp/>the<sp/>current<sp/>translation<sp/>unit<sp/>-<sp/>at<sp/>the<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal">DOCTEST_TEST_SUITE_END();</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="3080"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="3081"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal">DOCTEST_SUPPRESS_COMMON_WARNINGS_POP</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_LIBRARY_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_SINGLE_HEADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SINGLE_HEADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_SINGLE_HEADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DOCTEST_CONFIG_IMPLEMENT)<sp/>||<sp/>!defined(DOCTEST_SINGLE_HEADER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_SINGLE_HEADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;doctest_fwd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_SINGLE_HEADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(</highlight><highlight class="stringliteral">&quot;-Wunused-macros&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_LIBRARY_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_LIBRARY_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal">DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_PUSH</highlight></codeline>
<codeline lineno="3107"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(</highlight><highlight class="stringliteral">&quot;-Wglobal-constructors&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3108"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wexit-time-destructors&quot;)</highlight></codeline>
<codeline lineno="3109"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wsign-conversion&quot;)</highlight></codeline>
<codeline lineno="3110"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wshorten-64-to-32&quot;)</highlight></codeline>
<codeline lineno="3111"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wmissing-variable-declarations&quot;)</highlight></codeline>
<codeline lineno="3112"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wswitch&quot;)</highlight></codeline>
<codeline lineno="3113"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wswitch-enum&quot;)</highlight></codeline>
<codeline lineno="3114"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wcovered-switch-default&quot;)</highlight></codeline>
<codeline lineno="3115"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wmissing-noreturn&quot;)</highlight></codeline>
<codeline lineno="3116"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wdisabled-macro-expansion&quot;)</highlight></codeline>
<codeline lineno="3117"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wmissing-braces&quot;)</highlight></codeline>
<codeline lineno="3118"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wmissing-field-initializers&quot;)</highlight></codeline>
<codeline lineno="3119"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wunused-member-function&quot;)</highlight></codeline>
<codeline lineno="3120"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wnonportable-system-include-path&quot;)</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING_PUSH</highlight></codeline>
<codeline lineno="3123"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wconversion&quot;)</highlight></codeline>
<codeline lineno="3124"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wsign-conversion&quot;)</highlight></codeline>
<codeline lineno="3125"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wmissing-field-initializers&quot;)</highlight></codeline>
<codeline lineno="3126"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wmissing-braces&quot;)</highlight></codeline>
<codeline lineno="3127"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wswitch&quot;)</highlight></codeline>
<codeline lineno="3128"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wswitch-enum&quot;)</highlight></codeline>
<codeline lineno="3129"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wswitch-default&quot;)</highlight></codeline>
<codeline lineno="3130"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wunsafe-loop-optimizations&quot;)</highlight></codeline>
<codeline lineno="3131"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wold-style-cast&quot;)</highlight></codeline>
<codeline lineno="3132"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wunused-function&quot;)</highlight></codeline>
<codeline lineno="3133"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wmultiple-inheritance&quot;)</highlight></codeline>
<codeline lineno="3134"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wsuggest-attribute&quot;)</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_PUSH</highlight></codeline>
<codeline lineno="3137"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING(4267)<sp/></highlight><highlight class="comment">//<sp/>&apos;var&apos;<sp/>:<sp/>conversion<sp/>from<sp/>&apos;x&apos;<sp/>to<sp/>&apos;y&apos;,<sp/>possible<sp/>loss<sp/>of<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING(4530)<sp/></highlight><highlight class="comment">//<sp/>C++<sp/>exception<sp/>handler<sp/>used,<sp/>but<sp/>unwind<sp/>semantics<sp/>not<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING(4577)<sp/></highlight><highlight class="comment">//<sp/>&apos;noexcept&apos;<sp/>used<sp/>with<sp/>no<sp/>exception<sp/>handling<sp/>mode<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3140"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING(4774)<sp/></highlight><highlight class="comment">//<sp/>format<sp/>string<sp/>expected<sp/>in<sp/>argument<sp/>is<sp/>not<sp/>a<sp/>string<sp/>literal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING(4365)<sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>from<sp/>&apos;int&apos;<sp/>to<sp/>&apos;unsigned&apos;,<sp/>signed/unsigned<sp/>mismatch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING(5039)<sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>to<sp/>potentially<sp/>throwing<sp/>function<sp/>passed<sp/>to<sp/>extern<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING(4800)<sp/></highlight><highlight class="comment">//<sp/>forcing<sp/>value<sp/>to<sp/>bool<sp/>&apos;true&apos;<sp/>or<sp/>&apos;false&apos;<sp/>(performance<sp/>warning)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING(5245)<sp/></highlight><highlight class="comment">//<sp/>unreferenced<sp/>function<sp/>with<sp/>internal<sp/>linkage<sp/>has<sp/>been<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"></highlight></codeline>
<codeline lineno="3146"><highlight class="normal">DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>required<sp/>includes<sp/>-<sp/>will<sp/>go<sp/>only<sp/>in<sp/>one<sp/>translation<sp/>unit!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>borland<sp/>(Embarcadero)<sp/>compiler<sp/>requires<sp/>math.h<sp/>and<sp/>not<sp/>cmath<sp/>-<sp/>https://github.com/doctest/doctest/pull/37</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__BORLANDC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;new&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_DECLARE_MUTEX(name)<sp/>std::mutex<sp/>name;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_DECLARE_STATIC_MUTEX(name)<sp/>static<sp/>DOCTEST_DECLARE_MUTEX(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_LOCK_MUTEX(name)<sp/>std::lock_guard&lt;std::mutex&gt;<sp/>DOCTEST_ANONYMOUS(DOCTEST_ANON_LOCK_)(name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_DECLARE_MUTEX(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_DECLARE_STATIC_MUTEX(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_LOCK_MUTEX(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;csignal&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cfloat&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/sysctl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defines<sp/>for<sp/>a<sp/>leaner<sp/>windows.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_UNDEF_NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>sure<sp/>what<sp/>AfxWin.h<sp/>is<sp/>for<sp/>-<sp/>here<sp/>I<sp/>do<sp/>what<sp/>Catch<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__AFXDLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;AfxWin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>fix<sp/>for<sp/>https://github.com/doctest/doctest/issues/348</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://mail.gnome.org/archives/xml/2012-January/msg00000.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(HAVE_UNISTD_H)<sp/>&amp;&amp;<sp/>!defined(STDOUT_FILENO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STDOUT_FILENO<sp/>fileno(stdout)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>HAVE_UNISTD_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal">DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>counts<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>a<sp/>C<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_COUNTOF(x)<sp/>(sizeof(x)<sp/>/<sp/>sizeof(x[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BRANCH_ON_DISABLED(if_disabled,<sp/>if_not_disabled)<sp/>if_disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_BRANCH_ON_DISABLED(if_disabled,<sp/>if_not_disabled)<sp/>if_not_disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/>&quot;dt-&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_THREAD_LOCAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DOCTEST_CONFIG_NO_MULTITHREADING)<sp/>||<sp/>DOCTEST_MSVC<sp/>&amp;&amp;<sp/>(DOCTEST_MSVC<sp/>&lt;<sp/>DOCTEST_COMPILER(19,<sp/>0,<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_THREAD_LOCAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_THREAD_LOCAL<sp/>thread_local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_THREAD_LOCAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WINAPI_FAMILY)<sp/>&amp;&amp;<sp/>(WINAPI_FAMILY<sp/>==<sp/>WINAPI_FAMILY_APP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CDECL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CDECL<sp/>__cdecl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">doctest<sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_running_in_test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ex&gt;</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_NORETURN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_exception(Ex<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_HANDLE_EXCEPTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_CONFIG_HANDLE_EXCEPTION(e);</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_HANDLE_EXCEPTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doctest<sp/>will<sp/>terminate<sp/>because<sp/>it<sp/>needed<sp/>to<sp/>throw<sp/>an<sp/>exception.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>message<sp/>was:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_HANDLE_EXCEPTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::terminate();</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_INTERNAL_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_INTERNAL_ERROR(msg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>throw_exception(std::logic_error(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__<sp/>&quot;:&quot;</highlight><highlight class="normal"><sp/>DOCTEST_TOSTR(__LINE__)<sp/>&quot;:<sp/>Internal<sp/>doctest<sp/>error:<sp/>&quot;<sp/>msg))</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_INTERNAL_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3305"><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>insensitive<sp/>strcmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stricmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;<sp/>a++,<sp/>b++)<sp/>{</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>tolower(*a)<sp/>-<sp/>tolower(*b);</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(d<sp/>!=<sp/>0<sp/>||<sp/>!*a)</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Endianness</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Arch</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Big,</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Little</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Arch<sp/>which()<sp/>{</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>casting<sp/>any<sp/>data<sp/>pointer<sp/>to<sp/>char*<sp/>is<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;x);</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*ptr)</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Little;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Big;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3332"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_THREAD_LOCAL<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::streampos&gt;<sp/>stack;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss;</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>push()<sp/>{</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack.push_back(ss.tellp());</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;ss;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>pop()<sp/>{</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack.empty())</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;TLSS<sp/>was<sp/>empty<sp/>when<sp/>trying<sp/>to<sp/>pop!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::streampos<sp/>pos<sp/>=<sp/>stack.back();</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack.pop_back();</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ss.tellp()<sp/>-<sp/>pos);</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.rdbuf()-&gt;pubseekpos(pos,<sp/>std::ios::in<sp/>|<sp/>std::ios::out);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String(ss,<sp/>sz);</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>g_oss;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>tlssPush()<sp/>{</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_oss.push();</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>tlssPop()<sp/>{</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_oss.pop();</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">timer_large_integer</highlight></codeline>
<codeline lineno="3369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DOCTEST_PLATFORM_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>ULONGLONG;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>std::uint64_t;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ticks_t<sp/>=<sp/>timer_large_integer::type;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_GETCURRENTTICKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/>ticks_t<sp/>getCurrentTicks()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DOCTEST_CONFIG_GETCURRENTTICKS();<sp/>}</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(DOCTEST_PLATFORM_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/>ticks_t<sp/>getCurrentTicks()<sp/>{</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LARGE_INTEGER<sp/>hz<sp/>=<sp/>{<sp/>{0}<sp/>},<sp/>hzo<sp/>=<sp/>{<sp/>{0}<sp/>};</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!hz.QuadPart)<sp/>{</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QueryPerformanceFrequency(&amp;hz);</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QueryPerformanceCounter(&amp;hzo);</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LARGE_INTEGER<sp/>t;</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QueryPerformanceCounter(&amp;t);</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((t.QuadPart<sp/>-<sp/>hzo.QuadPart)<sp/>*<sp/>LONGLONG(1000000))<sp/>/<sp/>hz.QuadPart;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>ticks_t<sp/>getCurrentTicks()<sp/>{</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeval<sp/>t;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gettimeofday(&amp;t,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ticks_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t.tv_sec)<sp/>*<sp/>1000000<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ticks_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t.tv_usec);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Timer</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start()<sp/>{<sp/>m_ticks<sp/>=<sp/>getCurrentTicks();<sp/>}</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getElapsedMicroseconds()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(getCurrentTicks()<sp/>-<sp/>m_ticks);</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>getElapsedMilliseconds()<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>static_cast&lt;unsigned<sp/>int&gt;(getElapsedMicroseconds()<sp/>/<sp/>1000);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>getElapsedSeconds()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(getCurrentTicks()<sp/>-<sp/>m_ticks)<sp/>/<sp/>1000000.0;<sp/>}</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ticks_t<sp/>m_ticks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_NO_MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Atomic<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Atomic<sp/>=<sp/>std::atomic&lt;T&gt;;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_MULTITHREADING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS)<sp/>||<sp/>defined(DOCTEST_CONFIG_NO_MULTITHREADING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>MultiLaneAtomic<sp/>=<sp/>Atomic&lt;T&gt;;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Provides<sp/>a<sp/>multilane<sp/>implementation<sp/>of<sp/>an<sp/>atomic<sp/>variable<sp/>that<sp/>supports<sp/>add,<sp/>sub,<sp/>load,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>store.<sp/>Instead<sp/>of<sp/>using<sp/>a<sp/>single<sp/>atomic<sp/>variable,<sp/>this<sp/>splits<sp/>up<sp/>into<sp/>multiple<sp/>ones,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>sitting<sp/>on<sp/>a<sp/>separate<sp/>cache<sp/>line.<sp/>The<sp/>goal<sp/>is<sp/>to<sp/>provide<sp/>a<sp/>speedup<sp/>when<sp/>most</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operations<sp/>are<sp/>modifying.<sp/>It<sp/>achieves<sp/>this<sp/>with<sp/>two<sp/>properties:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Multiple<sp/>atomics<sp/>are<sp/>used,<sp/>so<sp/>chance<sp/>of<sp/>congestion<sp/>from<sp/>the<sp/>same<sp/>atomic<sp/>is<sp/>reduced.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>Each<sp/>atomic<sp/>sits<sp/>on<sp/>a<sp/>separate<sp/>cache<sp/>line,<sp/>so<sp/>false<sp/>sharing<sp/>is<sp/>reduced.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>disadvantage<sp/>is<sp/>that<sp/>there<sp/>is<sp/>a<sp/>small<sp/>overhead<sp/>due<sp/>to<sp/>the<sp/>use<sp/>of<sp/>TLS,<sp/>and<sp/>load/store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>slower<sp/>because<sp/>all<sp/>atomics<sp/>have<sp/>to<sp/>be<sp/>accessed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MultiLaneAtomic</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CacheLineAlignedAtomic</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Atomic&lt;T&gt;<sp/>atomic{};</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>padding[DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Atomic&lt;T&gt;)];</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CacheLineAlignedAtomic<sp/>m_atomics[DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES];</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(CacheLineAlignedAtomic)<sp/>==<sp/>DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE,</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;guarantee<sp/>one<sp/>atomic<sp/>takes<sp/>exactly<sp/>one<sp/>cache<sp/>line&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>operator++()<sp/>DOCTEST_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fetch_add(1)<sp/>+<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>DOCTEST_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fetch_add(1);<sp/>}</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>fetch_add(T<sp/>arg,<sp/>std::memory_order<sp/>order<sp/>=<sp/>std::memory_order_seq_cst)<sp/>DOCTEST_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>myAtomic().fetch_add(arg,<sp/>order);</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"></highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>fetch_sub(T<sp/>arg,<sp/>std::memory_order<sp/>order<sp/>=<sp/>std::memory_order_seq_cst)<sp/>DOCTEST_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>myAtomic().fetch_sub(arg,<sp/>order);</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T()<sp/>const<sp/>DOCTEST_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load();<sp/>}</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>load(std::memory_order<sp/>order<sp/>=<sp/>std::memory_order_seq_cst)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DOCTEST_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>T();</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>c<sp/>:<sp/>m_atomics)<sp/>{</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>c.atomic.load(order);</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>operator=(T<sp/>desired)<sp/>DOCTEST_NOEXCEPT<sp/>{<sp/></highlight><highlight class="comment">//<sp/>lgtm<sp/>[cpp/assignment-does-not-return-this]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>store(desired);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>desired;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>store(T<sp/>desired,<sp/>std::memory_order<sp/>order<sp/>=<sp/>std::memory_order_seq_cst)<sp/>DOCTEST_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>value<sp/>becomes<sp/>desired&quot;,<sp/>all<sp/>others<sp/>become<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>c<sp/>:<sp/>m_atomics)<sp/>{</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.atomic.store(desired,<sp/>order);</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desired<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"></highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>thread<sp/>has<sp/>a<sp/>different<sp/>atomic<sp/>that<sp/>it<sp/>operates<sp/>on.<sp/>If<sp/>more<sp/>than<sp/>NumLanes<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>this,<sp/>some<sp/>will<sp/>use<sp/>the<sp/>same<sp/>atomic.<sp/>So<sp/>performance<sp/>will<sp/>degrade<sp/>a<sp/>bit,<sp/>but<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>everything<sp/>will<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>logic<sp/>here<sp/>is<sp/>a<sp/>bit<sp/>tricky.<sp/>The<sp/>call<sp/>should<sp/>be<sp/>as<sp/>fast<sp/>as<sp/>possible,<sp/>so<sp/>that<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>minimal<sp/>to<sp/>no<sp/>overhead<sp/>in<sp/>determining<sp/>the<sp/>correct<sp/>atomic<sp/>for<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>A<sp/>global<sp/>static<sp/>counter<sp/>laneCounter<sp/>counts<sp/>continuously<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>Each<sp/>successive<sp/>thread<sp/>will<sp/>use<sp/>modulo<sp/>operation<sp/>of<sp/>that<sp/>counter<sp/>so<sp/>it<sp/>gets<sp/>an<sp/>atomic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>assigned<sp/>in<sp/>a<sp/>round-robin<sp/>fashion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>This<sp/>tlsLaneIdx<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>thread<sp/>local<sp/>data,<sp/>so<sp/>it<sp/>is<sp/>directly<sp/>available<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>little<sp/>overhead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Atomic&lt;T&gt;&amp;<sp/>myAtomic()<sp/>DOCTEST_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Atomic&lt;size_t&gt;<sp/>laneCounter;</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_THREAD_LOCAL<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tlsLaneIdx<sp/>=</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>laneCounter++<sp/>%<sp/>DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_atomics[tlsLaneIdx].atomic;</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>holds<sp/>both<sp/>parameters<sp/>from<sp/>the<sp/>command<sp/>line<sp/>and<sp/>runtime<sp/>data<sp/>for<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ContextState<sp/>:<sp/>ContextOptions,<sp/>TestRunStats,<sp/>CurrentTestCaseStats</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiLaneAtomic&lt;int&gt;<sp/>numAssertsCurrentTest_atomic;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiLaneAtomic&lt;int&gt;<sp/>numAssertsFailedCurrentTest_atomic;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;String&gt;&gt;<sp/>filters<sp/>=<sp/>decltype(filters)(9);<sp/></highlight><highlight class="comment">//<sp/>9<sp/>different<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;IReporter*&gt;<sp/>reporters_currently_used;</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert_handler<sp/>ah<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Timer<sp/>timer;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;String&gt;<sp/>stringifiedContexts;<sp/></highlight><highlight class="comment">//<sp/>logging<sp/>from<sp/>INFO()<sp/>due<sp/>to<sp/>an<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stuff<sp/>for<sp/>subcases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reachedLeaf;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SubcaseSignature&gt;<sp/>subcaseStack;</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SubcaseSignature&gt;<sp/>nextSubcaseStack;</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_set&lt;unsigned<sp/>long<sp/>long&gt;<sp/>fullyTraversedSubcases;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>currentSubcaseDepth;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Atomic&lt;bool&gt;<sp/>shouldLogCurrentException;</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetRunData()<sp/>{</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numTestCases<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numTestCasesPassingFilters<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numTestSuitesPassingFilters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numTestCasesFailed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAsserts<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAssertsFailed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAssertsCurrentTest<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAssertsFailedCurrentTest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finalizeTestCaseData()<sp/>{</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>timer.getElapsedSeconds();</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>non-atomic<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAsserts<sp/>+=<sp/>numAssertsCurrentTest_atomic;</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAssertsFailed<sp/>+=<sp/>numAssertsFailedCurrentTest_atomic;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAssertsCurrentTest<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>numAssertsCurrentTest_atomic;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numAssertsFailedCurrentTest<sp/>=<sp/>numAssertsFailedCurrentTest_atomic;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numAssertsFailedCurrentTest)</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failure_flags<sp/>|=<sp/>TestCaseFailureReason::AssertFailure;</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Approx(currentTest-&gt;m_timeout).epsilon(DBL_EPSILON)<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Approx(seconds).epsilon(DBL_EPSILON)<sp/>&gt;<sp/>currentTest-&gt;m_timeout)</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failure_flags<sp/>|=<sp/>TestCaseFailureReason::Timeout;</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentTest-&gt;m_should_fail)<sp/>{</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(failure_flags)<sp/>{</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failure_flags<sp/>|=<sp/>TestCaseFailureReason::ShouldHaveFailedAndDid;</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failure_flags<sp/>|=<sp/>TestCaseFailureReason::ShouldHaveFailedButDidnt;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(failure_flags<sp/>&amp;&amp;<sp/>currentTest-&gt;m_may_fail)<sp/>{</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failure_flags<sp/>|=<sp/>TestCaseFailureReason::CouldHaveFailedAndDid;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentTest-&gt;m_expected_failures<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numAssertsFailedCurrentTest<sp/>==<sp/>currentTest-&gt;m_expected_failures)<sp/>{</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failure_flags<sp/>|=<sp/>TestCaseFailureReason::FailedExactlyNumTimes;</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failure_flags<sp/>|=<sp/>TestCaseFailureReason::DidntFailExactlyNumTimes;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok_to_fail<sp/>=<sp/>(TestCaseFailureReason::ShouldHaveFailedAndDid<sp/>&amp;<sp/>failure_flags)<sp/>||</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TestCaseFailureReason::CouldHaveFailedAndDid<sp/>&amp;<sp/>failure_flags)<sp/>||</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TestCaseFailureReason::FailedExactlyNumTimes<sp/>&amp;<sp/>failure_flags);</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>any<sp/>subcase<sp/>has<sp/>failed<sp/>-<sp/>the<sp/>whole<sp/>test<sp/>case<sp/>has<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseSuccess<sp/>=<sp/>!(failure_flags<sp/>&amp;&amp;<sp/>!ok_to_fail);</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!testCaseSuccess)</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numTestCasesFailed++;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/>ContextState*<sp/>g_cs<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>avoid<sp/>locks<sp/>for<sp/>the<sp/>debug<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>figure<sp/>out<sp/>if<sp/>this<sp/>is<sp/>indeed<sp/>necessary/correct<sp/>-<sp/>seems<sp/>like<sp/>either<sp/>there<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>could<sp/>be<sp/>a<sp/>race<sp/>or<sp/>that<sp/>there<sp/>wouldn&apos;t<sp/>be<sp/>a<sp/>race<sp/>even<sp/>if<sp/>using<sp/>the<sp/>context<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_THREAD_LOCAL<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_no_colors;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>String::allocate(size_type<sp/>sz)<sp/>{</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>&lt;=<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[sz]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setLast(last<sp/>-<sp/>sz);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setOnHeap();</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.size<sp/>=<sp/>sz;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.capacity<sp/>=<sp/>data.size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.ptr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[data.capacity];</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.ptr[sz]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data.ptr;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>String::setOnHeap()<sp/>noexcept<sp/>{<sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;buf[last])<sp/>=<sp/>128;<sp/>}</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>String::setLast(size_type<sp/>in)<sp/>noexcept<sp/>{<sp/>buf[last]<sp/>=<sp/>char(in);<sp/>}</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>String::setSize(size_type<sp/>sz)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isOnStack())<sp/>{<sp/>buf[sz]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>setLast(last<sp/>-<sp/>sz);<sp/>}</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>data.ptr[sz]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>data.size<sp/>=<sp/>sz;<sp/>}</highlight></codeline>
<codeline lineno="3618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>String::copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.isOnStack())<sp/>{</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buf,<sp/>other.buf,<sp/>len);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(allocate(other.data.size),<sp/>other.data.ptr,<sp/>other.data.size);</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal">String::String()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/>setLast();</highlight></codeline>
<codeline lineno="3631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal">String::~String()<sp/>{</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isOnStack())</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>data.ptr;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal">String::String(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in)</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>String(in,<sp/>strlen(in))<sp/>{}</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal">String::String(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in,<sp/>size_type<sp/>in_size)<sp/>{</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(allocate(in_size),<sp/>in,<sp/>in_size);</highlight></codeline>
<codeline lineno="3643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal">String::String(<ref refid="classstd_1_1basic__istream" kindref="compound">std::istream</ref>&amp;<sp/>in,<sp/>size_type<sp/>in_size)<sp/>{</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>in.read(allocate(in_size),<sp/>in_size);</highlight></codeline>
<codeline lineno="3647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight></codeline>
<codeline lineno="3649"><highlight class="normal">String::String(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>other)<sp/>{<sp/>copy(other);<sp/>}</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal">String&amp;<sp/>String::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isOnStack())</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>data.ptr;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"></highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy(other);</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"></highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal">String&amp;<sp/>String::operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>size_type<sp/>my_old_size<sp/>=<sp/>size();</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>size_type<sp/>other_size<sp/><sp/>=<sp/>other.size();</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>size_type<sp/>total_size<sp/><sp/>=<sp/>my_old_size<sp/>+<sp/>other_size;</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isOnStack())<sp/>{</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(total_size<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>append<sp/>to<sp/>the<sp/>current<sp/>stack<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buf<sp/>+<sp/>my_old_size,<sp/>other.c_str(),<sp/>other_size<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setLast(last<sp/>-<sp/>total_size);</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alloc<sp/>new<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[total_size<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>current<sp/>data<sp/>to<sp/>new<sp/>location<sp/>before<sp/>writing<sp/>in<sp/>the<sp/>union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(temp,<sp/>buf,<sp/>my_old_size);<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>the<sp/>+1<sp/>(&apos;\0&apos;)<sp/>for<sp/>speed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>data<sp/>in<sp/>union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setOnHeap();</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.size<sp/><sp/><sp/><sp/><sp/>=<sp/>total_size;</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.capacity<sp/>=<sp/>data.size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.ptr<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transfer<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data.ptr<sp/>+<sp/>my_old_size,<sp/>other.c_str(),<sp/>other_size<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data.capacity<sp/>&gt;<sp/>total_size)<sp/>{</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>append<sp/>to<sp/>the<sp/>current<sp/>heap<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.size<sp/>=<sp/>total_size;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data.ptr<sp/>+<sp/>my_old_size,<sp/>other.c_str(),<sp/>other_size<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.capacity<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data.capacity<sp/>&lt;=<sp/>total_size)</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.capacity<sp/>=<sp/>total_size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>alloc<sp/>new<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[data.capacity];</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>current<sp/>data<sp/>to<sp/>new<sp/>location<sp/>before<sp/>releasing<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(temp,<sp/>data.ptr,<sp/>my_old_size);<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>the<sp/>+1<sp/>(&apos;\0&apos;)<sp/>for<sp/>speed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>release<sp/>old<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>data.ptr;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>union<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.size<sp/>=<sp/>total_size;</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.ptr<sp/><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transfer<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data.ptr<sp/>+<sp/>my_old_size,<sp/>other.c_str(),<sp/>other_size<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"></highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal">String::String(String&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buf,<sp/>other.buf,<sp/>len);</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/>other.buf[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/>other.setLast();</highlight></codeline>
<codeline lineno="3716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal">String&amp;<sp/>String::operator=(String&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isOnStack())</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>data.ptr;</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buf,<sp/>other.buf,<sp/>len);</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.buf[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.setLast();</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>String::operator[](size_type<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">String*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;</highlight><highlight class="keyword">operator</highlight><highlight class="normal">[](i);</highlight></codeline>
<codeline lineno="3731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"></highlight></codeline>
<codeline lineno="3733"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>String::operator[](size_type<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isOnStack())</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buf)[i];</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data.ptr[i];</highlight></codeline>
<codeline lineno="3737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(</highlight><highlight class="stringliteral">&quot;-Wmaybe-uninitialized&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3740"><highlight class="normal">String::size_type<sp/>String::size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isOnStack())</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last<sp/>-<sp/>(size_type(buf[last])<sp/>&amp;<sp/>31);<sp/></highlight><highlight class="comment">//<sp/>using<sp/>&quot;last&quot;<sp/>would<sp/>work<sp/>only<sp/>if<sp/>&quot;len&quot;<sp/>is<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data.size;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3745"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal">String::size_type<sp/>String::capacity()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isOnStack())</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data.capacity;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal">String<sp/>String::substr(size_type<sp/>pos,<sp/>size_type<sp/>cnt)<sp/>&amp;&amp;<sp/>{</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>std::min(cnt,<sp/>size()<sp/>-<sp/>1<sp/>-<sp/>pos);</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cptr<sp/>=<sp/>c_str();</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(cptr,<sp/>cptr<sp/>+<sp/>pos,<sp/>cnt);</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/>setSize(cnt);</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal">String<sp/>String::substr(size_type<sp/>pos,<sp/>size_type<sp/>cnt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>std::min(cnt,<sp/>size()<sp/>-<sp/>1<sp/>-<sp/>pos);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String{<sp/>c_str()<sp/>+<sp/>pos,<sp/>cnt<sp/>};</highlight></codeline>
<codeline lineno="3764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal">String::size_type<sp/>String::find(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch,<sp/>size_type<sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>begin<sp/>=<sp/>c_str();</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>begin<sp/>+<sp/>size();</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>it<sp/>=<sp/>begin<sp/>+<sp/>pos;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&lt;<sp/>end<sp/>&amp;&amp;<sp/>*it<sp/>!=<sp/>ch;<sp/>it++);</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>&lt;<sp/>end)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">size_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it<sp/>-<sp/>begin);<sp/>}</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>npos;<sp/>}</highlight></codeline>
<codeline lineno="3773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal">String::size_type<sp/>String::rfind(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch,<sp/>size_type<sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>begin<sp/>=<sp/>c_str();</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>it<sp/>=<sp/>begin<sp/>+<sp/>std::min(pos,<sp/>size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>&gt;=<sp/>begin<sp/>&amp;&amp;<sp/>*it<sp/>!=<sp/>ch;<sp/>it--);</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>&gt;=<sp/>begin)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">size_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it<sp/>-<sp/>begin);<sp/>}</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>npos;<sp/>}</highlight></codeline>
<codeline lineno="3781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>String::compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_case)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(no_case)</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doctest::stricmp(c_str(),<sp/>other);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::strcmp(c_str(),<sp/>other);</highlight></codeline>
<codeline lineno="3787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"></highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>String::compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>no_case)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compare(other.c_str(),<sp/>no_case);</highlight></codeline>
<codeline lineno="3791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"></highlight></codeline>
<codeline lineno="3793"><highlight class="normal">String<sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>String(lhs)<sp/>+=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(rhs)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(rhs)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(rhs)<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(rhs)<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>!=<sp/>rhs)<sp/>?<sp/>lhs.compare(rhs)<sp/>&lt;<sp/>0<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>!=<sp/>rhs)<sp/>?<sp/>lhs.compare(rhs)<sp/>&gt;<sp/>0<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>operator&lt;&lt;(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>&lt;&lt;<sp/>in.c_str();<sp/>}</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal">Contains::Contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>str)<sp/>:<sp/>string(str)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Contains::checkWith(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strstr(other.c_str(),<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.c_str())<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Contains&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Contains(<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>in.string<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Contains&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs.checkWith(lhs);<sp/>}</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Contains&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.checkWith(rhs);<sp/>}</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Contains&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!rhs.checkWith(lhs);<sp/>}</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Contains&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!lhs.checkWith(rhs);<sp/>}</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>color_to_stream(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;,<sp/>Color::Enum)<sp/>DOCTEST_BRANCH_ON_DISABLED({},<sp/>;)</highlight></codeline>
<codeline lineno="3821"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Color<sp/>{</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>operator&lt;&lt;(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>s,<sp/>Color::Enum<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_to_stream(s,<sp/>code);</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3828"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>assertString(assertType::Enum<sp/>at)<sp/>{</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4061)<sp/></highlight><highlight class="comment">//<sp/>enum<sp/>&apos;x&apos;<sp/>in<sp/>switch<sp/>of<sp/>enum<sp/>&apos;y&apos;<sp/>is<sp/>not<sp/>explicitly<sp/>handled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASE(assert_type)<sp/>case<sp/>assertType::DT_<sp/>##<sp/>assert_type:<sp/>return<sp/>#assert_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(assert_type)<sp/>\</highlight></codeline>
<codeline lineno="3835"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASE(WARN_<sp/>##<sp/>assert_type);<sp/>\</highlight></codeline>
<codeline lineno="3836"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASE(CHECK_<sp/>##<sp/>assert_type);<sp/>\</highlight></codeline>
<codeline lineno="3837"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASE(REQUIRE_<sp/>##<sp/>assert_type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(at)<sp/>{</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASE(WARN);</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASE(CHECK);</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASE(REQUIRE);</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"></highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(FALSE);</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS);</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_AS);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_WITH);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_WITH_AS);</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(NOTHROW);</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(EQ);</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(NE);</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(GT);</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(LT);</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(GE);</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(LE);</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(UNARY);</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GENERATE_ASSERT_TYPE_CASES(UNARY_FALSE);</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>DOCTEST_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;Tried<sp/>stringifying<sp/>invalid<sp/>assert<sp/>type!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="3868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>failureString(assertType::Enum<sp/>at)<sp/>{</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(at<sp/>&amp;<sp/>assertType::is_warn)<sp/></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;WARNING&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(at<sp/>&amp;<sp/>assertType::is_check)<sp/></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ERROR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(at<sp/>&amp;<sp/>assertType::is_require)<sp/></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;FATAL<sp/>ERROR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight></codeline>
<codeline lineno="3881"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(</highlight><highlight class="stringliteral">&quot;-Wnull-dereference&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3882"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wnull-dereference&quot;)</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>depending<sp/>on<sp/>the<sp/>current<sp/>options<sp/>this<sp/>will<sp/>remove<sp/>the<sp/>path<sp/>of<sp/>filenames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>skipPathFromFilename(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(getContextOptions()-&gt;no_path_in_filenames)<sp/>{</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>back<sp/><sp/><sp/><sp/>=<sp/>std::strrchr(file,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>forward<sp/>=<sp/>std::strrchr(file,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(back<sp/>||<sp/>forward)<sp/>{</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(back<sp/>&gt;<sp/>forward)</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward<sp/>=<sp/>back;</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forward<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file;</highlight></codeline>
<codeline lineno="3897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3898"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="3899"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SubcaseSignature::operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SubcaseSignature&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_line<sp/>==<sp/>other.m_line</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::strcmp(m_file,<sp/>other.m_file)<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>m_name<sp/>==<sp/>other.m_name;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SubcaseSignature::operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SubcaseSignature&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_line<sp/>!=<sp/>other.m_line)</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_line<sp/>&lt;<sp/>other.m_line;</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::strcmp(m_file,<sp/>other.m_file)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::strcmp(m_file,<sp/>other.m_file)<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_name.compare(other.m_name)<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="3913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal">DOCTEST_DEFINE_INTERFACE(IContextScope)</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight></codeline>
<codeline lineno="3917"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>filldata&lt;const<sp/>void*&gt;::fill(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in)<sp/>{<sp/>*stream<sp/>&lt;&lt;<sp/>in;<sp/>}</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>*stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nullptr&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>toStreamLit(T<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>os<sp/>=<sp/>tlssPush();</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os-&gt;operator&lt;&lt;(t);</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tlssPop();</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String(</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(in<sp/>?<sp/>in<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;{null<sp/>string}&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"></highlight></codeline>
<codeline lineno="3935"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC<sp/>&gt;=<sp/>DOCTEST_COMPILER(19,<sp/>20,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>this<sp/>issue<sp/>on<sp/>why<sp/>this<sp/>is<sp/>needed:<sp/>https://github.com/doctest/doctest/issues/183</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in.c_str();<sp/>}</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>VS<sp/>2019</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal">String<sp/>toString(String<sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in;<sp/>}</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal">String<sp/>toString(std::nullptr_t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;nullptr&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"></highlight></codeline>
<codeline lineno="3944"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3947"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3948"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">signed</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(in));<sp/>}</highlight></codeline>
<codeline lineno="3951"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">signed</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(in));<sp/>}</highlight></codeline>
<codeline lineno="3952"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(in));<sp/>}</highlight></codeline>
<codeline lineno="3953"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3954"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3955"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3956"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3957"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3958"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3959"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3960"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toStreamLit(in);<sp/>}</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal">Approx::Approx(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_epsilon(static_cast&lt;double&gt;(std::numeric_limits&lt;float&gt;::epsilon())<sp/>*<sp/>100)</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_scale(1.0)</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_value(value)<sp/>{}</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal">Approx<sp/>Approx::operator()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/>Approx<sp/>approx(value);</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/>approx.epsilon(m_epsilon);</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/>approx.scale(m_scale);</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>approx;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal">Approx&amp;<sp/>Approx::epsilon(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newEpsilon)<sp/>{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/>m_epsilon<sp/>=<sp/>newEpsilon;</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3978"><highlight class="normal">Approx&amp;<sp/>Approx::scale(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newScale)<sp/>{</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/>m_scale<sp/>=<sp/>newScale;</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thanks<sp/>to<sp/>Richard<sp/>Harris<sp/>for<sp/>his<sp/>help<sp/>refining<sp/>this<sp/>formula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fabs(lhs<sp/>-<sp/>rhs.m_value)<sp/>&lt;</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.m_epsilon<sp/>*<sp/>(rhs.m_scale<sp/>+<sp/>std::max&lt;double&gt;(std::fabs(lhs),<sp/>std::fabs(rhs.m_value)));</highlight></codeline>
<codeline lineno="3987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator==(rhs,<sp/>lhs);<sp/>}</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!operator==(lhs,<sp/>rhs);<sp/>}</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!operator==(rhs,<sp/>lhs);<sp/>}</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&lt;<sp/>rhs.m_value<sp/>||<sp/>lhs<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_value<sp/>&lt;<sp/>rhs<sp/>||<sp/>lhs<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&gt;<sp/>rhs.m_value<sp/>||<sp/>lhs<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_value<sp/>&gt;<sp/>rhs<sp/>||<sp/>lhs<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&lt;<sp/>rhs.m_value<sp/>&amp;&amp;<sp/>lhs<sp/>!=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_value<sp/>&lt;<sp/>rhs<sp/>&amp;&amp;<sp/>lhs<sp/>!=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&gt;<sp/>rhs.m_value<sp/>&amp;&amp;<sp/>lhs<sp/>!=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_value<sp/>&gt;<sp/>rhs<sp/>&amp;&amp;<sp/>lhs<sp/>!=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal">String<sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Approx&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Approx(<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>doctest::toString(in.m_value)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContextOptions*<sp/>getContextOptions()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DOCTEST_BRANCH_ON_DISABLED(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>g_cs);<sp/>}</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4738)</highlight></codeline>
<codeline lineno="4006"><highlight class="normal">template<sp/>&lt;typename<sp/>F&gt;</highlight></codeline>
<codeline lineno="4007"><highlight class="normal">IsNaN&lt;F&gt;::operator<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::isnan(value)<sp/>^<sp/>flipped;</highlight></codeline>
<codeline lineno="4009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4010"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE_DEF<sp/>IsNaN&lt;float&gt;;</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE_DEF<sp/>IsNaN&lt;double&gt;;</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DOCTEST_INTERFACE_DEF<sp/>IsNaN&lt;long<sp/>double&gt;;</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal">String<sp/>toString(IsNaN&lt;F&gt;<sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String(in.flipped<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;!<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;IsNaN(<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>doctest::toString(in.value)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4016"><highlight class="normal">String<sp/>toString(IsNaN&lt;float&gt;<sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toString&lt;float&gt;(in);<sp/>}</highlight></codeline>
<codeline lineno="4017"><highlight class="normal">String<sp/>toString(IsNaN&lt;double&gt;<sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toString&lt;double&gt;(in);<sp/>}</highlight></codeline>
<codeline lineno="4018"><highlight class="normal">String<sp/>toString(IsNaN&lt;double<sp/>long&gt;<sp/>in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toString&lt;double<sp/>long&gt;(in);<sp/>}</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>doctest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">doctest<sp/>{</highlight></codeline>
<codeline lineno="4024"><highlight class="normal">Context::Context(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="4025"><highlight class="normal">Context::~Context()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::applyCommandLine(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::addFilter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::clearFilters()<sp/>{}</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setOption(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setOption(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setOption(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Context::shouldExit()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setAsDefaultForAssertsOutOfTestCases()<sp/>{}</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setAssertHandler(detail::assert_handler)<sp/>{}</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setCout(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*)<sp/>{}</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>Context::run()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IReporter::get_num_active_contexts()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IContextScope*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>IReporter::get_active_contexts()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IReporter::get_num_stringified_contexts()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IReporter::get_stringified_contexts()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>registerReporter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>IReporter*)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>doctest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"></highlight></codeline>
<codeline lineno="4048"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(DOCTEST_CONFIG_COLORS_NONE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(DOCTEST_CONFIG_COLORS_WINDOWS)<sp/>&amp;&amp;<sp/>!defined(DOCTEST_CONFIG_COLORS_ANSI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_COLORS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_CONFIG_COLORS_ANSI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_COLORS_WINDOWS<sp/>&amp;&amp;<sp/>DOCTEST_CONFIG_COLORS_ANSI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_COLORS_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">doctest_detail_test_suite_ns<sp/>{</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight><highlight class="comment">//<sp/>holds<sp/>the<sp/>current<sp/>test<sp/>suite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">doctest::detail::TestSuite</ref>&amp;<sp/>getCurrentTestSuite()<sp/>{</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structdoctest_1_1detail_1_1TestSuite" kindref="compound">doctest::detail::TestSuite</ref><sp/>data{};</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="4063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4064"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>doctest_detail_test_suite_ns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"></highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">doctest<sp/>{</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>int<sp/>(priority)<sp/>is<sp/>part<sp/>of<sp/>the<sp/>key<sp/>for<sp/>automatic<sp/>sorting<sp/>-<sp/>sadly<sp/>one<sp/>can<sp/>register<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reporter<sp/>with<sp/>a<sp/>duplicate<sp/>name<sp/>and<sp/>a<sp/>different<sp/>priority<sp/>but<sp/>hopefully<sp/>that<sp/>won&apos;t<sp/>happen<sp/>often<sp/>:|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reporterMap<sp/>=<sp/>std::map&lt;std::pair&lt;int,<sp/>String&gt;,<sp/>reporterCreatorFunc&gt;;</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/>reporterMap&amp;<sp/>getReporters()<sp/>{</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>reporterMap<sp/>data;</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/>reporterMap&amp;<sp/>getListeners()<sp/>{</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>reporterMap<sp/>data;</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4080"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(function,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4083"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for(auto&amp;<sp/>curr_rep<sp/>:<sp/>g_cs-&gt;reporters_currently_used)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4084"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>curr_rep-&gt;function(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkIfShouldThrow(assertType::Enum<sp/>at)<sp/>{</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(at<sp/>&amp;<sp/>assertType::is_require)<sp/></highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((at<sp/>&amp;<sp/>assertType::is_check)<sp/></highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>getContextOptions()-&gt;abort_after<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(g_cs-&gt;numAssertsFailed<sp/>+<sp/>g_cs-&gt;numAssertsFailedCurrentTest_atomic)<sp/>&gt;=</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getContextOptions()-&gt;abort_after)</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_NORETURN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throwException()<sp/>{</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;shouldLogCurrentException<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>TestFailureException();<sp/></highlight><highlight class="comment">//<sp/>NOLINT(hicpp-exception-baseclass)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throwException()<sp/>{}</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matching<sp/>of<sp/>a<sp/>string<sp/>against<sp/>a<sp/>wildcard<sp/>mask<sp/>(case<sp/>sensitivity<sp/>configurable)<sp/>taken<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://www.codeproject.com/Articles/1088/Wildcard-string-compare-globbing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wildcmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>wild,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caseSensitive)<sp/>{</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cp<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mp<sp/>=<sp/>wild;</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((*str)<sp/>&amp;&amp;<sp/>(*wild<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((caseSensitive<sp/>?<sp/>(*wild<sp/>!=<sp/>*str)<sp/>:<sp/>(tolower(*wild)<sp/>!=<sp/>tolower(*str)))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*wild<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wild++;</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str++;</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*str)<sp/>{</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*wild<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!*++wild)<sp/>{</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mp<sp/>=<sp/>wild;</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>str<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((caseSensitive<sp/>?<sp/>(*wild<sp/>==<sp/>*str)<sp/>:<sp/>(tolower(*wild)<sp/>==<sp/>tolower(*str)))<sp/>||</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*wild<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wild++;</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str++;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wild<sp/>=<sp/>mp;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/><sp/>=<sp/>cp++;<sp/></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"></highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*wild<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wild++;</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!*wild;</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>checks<sp/>if<sp/>the<sp/>name<sp/>matches<sp/>any<sp/>of<sp/>the<sp/>filters<sp/>(and<sp/>can<sp/>be<sp/>configured<sp/>what<sp/>to<sp/>do<sp/>when<sp/>empty)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchesAny(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;String&gt;&amp;<sp/>filters,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchEmpty,</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caseSensitive)<sp/>{</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filters.empty()<sp/>&amp;&amp;<sp/>matchEmpty)</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>filters)</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wildcmp(name,<sp/>curr.c_str(),<sp/>caseSensitive))</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"></highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_NO_SANITIZE_INTEGER</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"></highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>string<sp/>hash<sp/>function<sp/>(djb2)<sp/>-<sp/>taken<sp/>from<sp/>http://www.cse.yorku.ca/~oz/hash.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_NO_SANITIZE_INTEGER</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/>5381;</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((c<sp/>=<sp/>*str++))</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>((hash<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>hash)<sp/>+<sp/>c;<sp/></highlight><highlight class="comment">//<sp/>hash<sp/>*<sp/>33<sp/>+<sp/>c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"></highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SubcaseSignature&amp;<sp/>sig)<sp/>{</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash(hash(hash(sig.m_file),<sp/>hash(sig.m_name.c_str())),<sp/>sig.m_line);</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;SubcaseSignature&gt;&amp;<sp/>sigs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>running<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>sigs.begin()<sp/>+<sp/>count;</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>sigs.begin();<sp/>it<sp/>!=<sp/>end;<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>running<sp/>=<sp/>hash(running,<sp/>hash(*it));</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>running;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"></highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;SubcaseSignature&gt;&amp;<sp/>sigs)<sp/>{</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>running<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SubcaseSignature&amp;<sp/>sig<sp/>:<sp/>sigs)<sp/>{</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>running<sp/>=<sp/>hash(running,<sp/>hash(sig));</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>running;</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4195"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Subcase::checkFilters()<sp/>{</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_cs-&gt;subcaseStack.size()<sp/>&lt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(g_cs-&gt;subcase_filter_levels))<sp/>{</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!matchesAny(m_signature.m_name.c_str(),<sp/>g_cs-&gt;filters[6],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>g_cs-&gt;case_sensitive))</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchesAny(m_signature.m_name.c_str(),<sp/>g_cs-&gt;filters[7],<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>g_cs-&gt;case_sensitive))</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/>Subcase::Subcase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_signature({name,<sp/>file,<sp/>line})<sp/>{</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_cs-&gt;reachedLeaf)<sp/>{</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_cs-&gt;nextSubcaseStack.size()<sp/>&lt;=<sp/>g_cs-&gt;subcaseStack.size()</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>g_cs-&gt;nextSubcaseStack[g_cs-&gt;subcaseStack.size()]<sp/>==<sp/>m_signature)<sp/>{</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Going<sp/>down.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkFilters())<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;subcaseStack.push_back(m_signature);</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;currentSubcaseDepth++;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_entered<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start,<sp/>m_signature);</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_cs-&gt;subcaseStack[g_cs-&gt;currentSubcaseDepth]<sp/>==<sp/>m_signature)<sp/>{</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>subcase<sp/>is<sp/>reentered<sp/>via<sp/>control<sp/>flow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;currentSubcaseDepth++;</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_entered<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start,<sp/>m_signature);</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_cs-&gt;nextSubcaseStack.size()<sp/>&lt;=<sp/>g_cs-&gt;currentSubcaseDepth</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>g_cs-&gt;fullyTraversedSubcases.find(hash(hash(g_cs-&gt;subcaseStack,<sp/>g_cs-&gt;currentSubcaseDepth),<sp/>hash(m_signature)))</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>g_cs-&gt;fullyTraversedSubcases.end())<sp/>{</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkFilters())<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>subcase<sp/>is<sp/>part<sp/>of<sp/>the<sp/>one<sp/>to<sp/>be<sp/>executed<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;nextSubcaseStack.clear();</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;nextSubcaseStack.insert(g_cs-&gt;nextSubcaseStack.end(),</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;subcaseStack.begin(),<sp/>g_cs-&gt;subcaseStack.begin()<sp/>+<sp/>g_cs-&gt;currentSubcaseDepth);</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;nextSubcaseStack.push_back(m_signature);</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996)<sp/></highlight><highlight class="comment">//<sp/>std::uncaught_exception<sp/>is<sp/>deprecated<sp/>in<sp/>C++17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wdeprecated-declarations&quot;)</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wdeprecated-declarations&quot;)</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/>Subcase::~Subcase()<sp/>{</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_entered)<sp/>{</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;currentSubcaseDepth--;</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"></highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_cs-&gt;reachedLeaf)<sp/>{</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Leaf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;fullyTraversedSubcases.insert(hash(g_cs-&gt;subcaseStack));</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;nextSubcaseStack.clear();</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;reachedLeaf<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_cs-&gt;nextSubcaseStack.empty())<sp/>{</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>children<sp/>are<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;fullyTraversedSubcases.insert(hash(g_cs-&gt;subcaseStack));</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_lib_uncaught_exceptions)<sp/>&amp;&amp;<sp/>__cpp_lib_uncaught_exceptions<sp/>&gt;=<sp/>201411L<sp/>&amp;&amp;<sp/>(!defined(__MAC_OS_X_VERSION_MIN_REQUIRED)<sp/>||<sp/>__MAC_OS_X_VERSION_MIN_REQUIRED<sp/>&gt;=<sp/>101200)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::uncaught_exceptions()<sp/>&gt;<sp/>0</highlight></codeline>
<codeline lineno="4259"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::uncaught_exception()</highlight></codeline>
<codeline lineno="4261"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>g_cs-&gt;shouldLogCurrentException)<sp/>{</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_case_exception,<sp/>{</highlight><highlight class="stringliteral">&quot;exception<sp/>thrown<sp/>in<sp/>subcase<sp/>-<sp/>will<sp/>translate<sp/>later<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;when<sp/>the<sp/>whole<sp/>test<sp/>case<sp/>has<sp/>been<sp/>exited<sp/>(cannot<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;translate<sp/>while<sp/>there<sp/>is<sp/>an<sp/>active<sp/>exception)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>false});</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;shouldLogCurrentException<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end,<sp/>DOCTEST_EMPTY);</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/>Subcase::operator<sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_entered;<sp/>}</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"></highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/>Result::Result(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passed,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>decomposition)</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_passed(passed)</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_decomp(decomposition)<sp/>{}</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpressionDecomposer::ExpressionDecomposer(assertType::Enum<sp/>at)</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_at(at)<sp/>{}</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSuite&amp;<sp/>TestSuite::operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_test_suite<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCase::TestCase(funcType<sp/>test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestSuite&amp;<sp/>test_suite,</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>template_id)<sp/>{</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_file<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_line<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>later<sp/>overridden<sp/>in<sp/>operator*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_test_suite<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>test_suite.m_test_suite;</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_description<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>test_suite.m_description;</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_skip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>test_suite.m_skip;</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_no_breaks<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>test_suite.m_no_breaks;</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_no_output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>test_suite.m_no_output;</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_may_fail<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>test_suite.m_may_fail;</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_should_fail<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>test_suite.m_should_fail;</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_expected_failures<sp/>=<sp/>test_suite.m_expected_failures;</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_timeout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>test_suite.m_timeout;</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_test<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>test;</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_template_id<sp/>=<sp/>template_id;</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCase::TestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase&amp;<sp/>other)</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>TestCaseData()<sp/>{</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434)<sp/></highlight><highlight class="comment">//<sp/>hides<sp/>a<sp/>non-virtual<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCase&amp;<sp/>TestCase::operator=(const<sp/>TestCase&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseData::operator=(other);</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_test<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.m_test;</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>other.m_type;</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_template_id<sp/>=<sp/>other.m_template_id;</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_full_name<sp/><sp/><sp/>=<sp/>other.m_full_name;</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_template_id<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_name<sp/>=<sp/>m_full_name.c_str();</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCase&amp;<sp/>TestCase::operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_name<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>new<sp/>name<sp/>with<sp/>an<sp/>appended<sp/>type<sp/>for<sp/>templated<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_template_id<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_full_name<sp/>=<sp/>String(m_name)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>m_type<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>redirect<sp/>the<sp/>name<sp/>to<sp/>point<sp/>to<sp/>the<sp/>newly<sp/>constructed<sp/>full<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_name<sp/>=<sp/>m_full_name.c_str();</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestCase::operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>be<sp/>used<sp/>only<sp/>to<sp/>differentiate<sp/>between<sp/>test<sp/>cases<sp/>-<sp/>not<sp/>relevant<sp/>for<sp/>sorting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_line<sp/>!=<sp/>other.m_line)</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_line<sp/>&lt;<sp/>other.m_line;</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_cmp<sp/>=<sp/>strcmp(m_name,<sp/>other.m_name);</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name_cmp<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name_cmp<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file_cmp<sp/>=<sp/>m_file.compare(other.m_file);</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file_cmp<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_cmp<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_template_id<sp/>&lt;<sp/>other.m_template_id;</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>registered<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;TestCase&gt;&amp;<sp/>getRegisteredTests()<sp/>{</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::set&lt;TestCase&gt;<sp/>data;</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4361"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>sorting<sp/>tests<sp/>by<sp/>file/line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fileOrderComparator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>needed<sp/>because<sp/>MSVC<sp/>gives<sp/>different<sp/>case<sp/>for<sp/>drive<sp/>letters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>__FILE__<sp/>when<sp/>evaluated<sp/>in<sp/>a<sp/>header<sp/>and<sp/>a<sp/>source<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>lhs-&gt;m_file.compare(rhs-&gt;m_file,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(DOCTEST_MSVC));</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lhs-&gt;m_line<sp/>!=<sp/>rhs-&gt;m_line)</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs-&gt;m_line<sp/>&lt;<sp/>rhs-&gt;m_line;</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs-&gt;m_template_id<sp/>&lt;<sp/>rhs-&gt;m_template_id;</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>sorting<sp/>tests<sp/>by<sp/>suite/file/line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>suiteOrderComparator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>std::strcmp(lhs-&gt;m_test_suite,<sp/>rhs-&gt;m_test_suite);</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fileOrderComparator(lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>sorting<sp/>tests<sp/>by<sp/>name/suite/file/line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nameOrderComparator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>std::strcmp(lhs-&gt;m_name,<sp/>rhs-&gt;m_name);</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(res<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>suiteOrderComparator(lhs,<sp/>rhs);</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(</highlight><highlight class="stringliteral">&quot;-Wdeprecated-declarations&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>color_to_stream(std::<ref refid="classstd_1_1basic__ostream" kindref="compound">ostream</ref>&amp;<sp/>s,<sp/>Color::Enum<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>DOCTEST_CONFIG_COLORS_NONE<sp/>or<sp/>DOCTEST_CONFIG_COLORS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(code);<sp/></highlight><highlight class="comment">//<sp/>for<sp/>DOCTEST_CONFIG_COLORS_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_COLORS_ANSI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_no_colors<sp/>||</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isatty(STDOUT_FILENO)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>getContextOptions()-&gt;force_colors<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(code)<sp/>{<sp/></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Red:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[0;31m&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Green:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[0;32m&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Blue:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[0;34m&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Cyan:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[0;36m&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Yellow:<sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[0;33m&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Grey:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[1;30m&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::LightGrey:<sp/><sp/><sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[0;37m&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::BrightRed:<sp/><sp/><sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[1;31m&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::BrightGreen:<sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[1;32m&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::BrightWhite:<sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[1;37m&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Bright:<sp/></highlight><highlight class="comment">//<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::None:</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::White:</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>col;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_COLORS_ANSI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_COLORS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_no_colors<sp/>||</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_isatty(_fileno(stdout))<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>getContextOptions()-&gt;force_colors<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ConsoleHelper<sp/>{</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE<sp/>stdoutHandle;</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WORD<sp/><sp/><sp/>origFgAttrs;</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WORD<sp/><sp/><sp/>origBgAttrs;</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"></highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConsoleHelper()<sp/>{</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdoutHandle<sp/>=<sp/>GetStdHandle(STD_OUTPUT_HANDLE);</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONSOLE_SCREEN_BUFFER_INFO<sp/>csbiInfo;</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetConsoleScreenBufferInfo(stdoutHandle,<sp/>&amp;csbiInfo);</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origFgAttrs<sp/>=<sp/>csbiInfo.wAttributes<sp/>&amp;<sp/>~(BACKGROUND_GREEN<sp/>|<sp/>BACKGROUND_RED<sp/>|</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BACKGROUND_BLUE<sp/>|<sp/>BACKGROUND_INTENSITY);</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origBgAttrs<sp/>=<sp/>csbiInfo.wAttributes<sp/>&amp;<sp/>~(FOREGROUND_GREEN<sp/>|<sp/>FOREGROUND_RED<sp/>|</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOREGROUND_BLUE<sp/>|<sp/>FOREGROUND_INTENSITY);</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>ch;</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"></highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_SET_ATTR(x)<sp/>SetConsoleTextAttribute(ch.stdoutHandle,<sp/>x<sp/>|<sp/>ch.origBgAttrs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(code)<sp/>{</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::White:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_SET_ATTR(FOREGROUND_GREEN<sp/>|<sp/>FOREGROUND_RED<sp/>|<sp/>FOREGROUND_BLUE);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Red:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_SET_ATTR(FOREGROUND_RED);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Green:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_SET_ATTR(FOREGROUND_GREEN);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Blue:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_SET_ATTR(FOREGROUND_BLUE);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Cyan:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_SET_ATTR(FOREGROUND_BLUE<sp/>|<sp/>FOREGROUND_GREEN);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Yellow:<sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_SET_ATTR(FOREGROUND_RED<sp/>|<sp/>FOREGROUND_GREEN);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Grey:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_SET_ATTR(0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::LightGrey:<sp/><sp/><sp/>DOCTEST_SET_ATTR(FOREGROUND_INTENSITY);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::BrightRed:<sp/><sp/><sp/>DOCTEST_SET_ATTR(FOREGROUND_INTENSITY<sp/>|<sp/>FOREGROUND_RED);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::BrightGreen:<sp/>DOCTEST_SET_ATTR(FOREGROUND_INTENSITY<sp/>|<sp/>FOREGROUND_GREEN);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::BrightWhite:<sp/>DOCTEST_SET_ATTR(FOREGROUND_INTENSITY<sp/>|<sp/>FOREGROUND_GREEN<sp/>|<sp/>FOREGROUND_RED<sp/>|<sp/>FOREGROUND_BLUE);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::None:</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::Bright:<sp/></highlight><highlight class="comment">//<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_SET_ATTR(ch.origFgAttrs);</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_COLORS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>IExceptionTranslator*&gt;&amp;<sp/>getExceptionTranslators()<sp/>{</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>IExceptionTranslator*&gt;<sp/>data;</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>translateActiveException()<sp/>{</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>res;</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><sp/>translators<sp/>=<sp/>getExceptionTranslators();</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>translators)</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(curr-&gt;translate(res))</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(</highlight><highlight class="stringliteral">&quot;-Wcatch-value&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception&amp;<sp/>ex)<sp/>{</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ex.what();</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::string&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg.c_str();</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg;</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)<sp/>{</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>exception&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4499"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4500"><highlight class="normal"></highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>by<sp/>the<sp/>macros<sp/>for<sp/>registering<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regTest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase&amp;<sp/>tc)<sp/>{</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getRegisteredTests().insert(tc);</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"></highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sets<sp/>the<sp/>current<sp/>test<sp/>suite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setTestSuite(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestSuite&amp;<sp/>ts)<sp/>{</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest_detail_test_suite_ns::getCurrentTestSuite()<sp/>=<sp/>ts;</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"></highlight></codeline>
<codeline lineno="4514"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_IS_DEBUGGER_ACTIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DOCTEST_IS_DEBUGGER_ACTIVE();<sp/>}</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_IS_DEBUGGER_ACTIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4517"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ErrnoGuard<sp/>{</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrnoGuard()<sp/>:<sp/>m_oldErrno(errno)<sp/>{}</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~ErrnoGuard()<sp/>{<sp/>errno<sp/>=<sp/>m_oldErrno;<sp/>}</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_oldErrno;</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>comments<sp/>in<sp/>Catch2<sp/>for<sp/>the<sp/>reasoning<sp/>behind<sp/>this<sp/>implementation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/catchorg/Catch2/blob/v2.13.1/include/internal/catch_debugger.cpp#L79-L102</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive()<sp/>{</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrnoGuard<sp/>guard;</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>in(</highlight><highlight class="stringliteral">&quot;/proc/self/status&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::string<sp/>line;<sp/>std::getline(in,<sp/>line);)<sp/>{</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PREFIX_LEN<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(line.compare(0,<sp/>PREFIX_LEN,<sp/></highlight><highlight class="stringliteral">&quot;TracerPid:\t&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line.length()<sp/>&gt;<sp/>PREFIX_LEN<sp/>&amp;&amp;<sp/>line[PREFIX_LEN]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(DOCTEST_PLATFORM_MAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>function<sp/>is<sp/>taken<sp/>directly<sp/>from<sp/>the<sp/>following<sp/>technical<sp/>note:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://developer.apple.com/library/archive/qa/qa1361/_index.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>current<sp/>process<sp/>is<sp/>being<sp/>debugged<sp/>(either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>running<sp/>under<sp/>the<sp/>debugger<sp/>or<sp/>has<sp/>a<sp/>debugger<sp/>attached<sp/>post<sp/>facto).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive()<sp/>{</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mib[4];</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kinfo_proc<sp/>info;</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>size;</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>flags<sp/>so<sp/>that,<sp/>if<sp/>sysctl<sp/>fails<sp/>for<sp/>some<sp/>bizarre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reason,<sp/>we<sp/>get<sp/>a<sp/>predictable<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.kp_proc.p_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>mib,<sp/>which<sp/>tells<sp/>sysctl<sp/>the<sp/>info<sp/>we<sp/>want,<sp/>in<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>looking<sp/>for<sp/>information<sp/>about<sp/>a<sp/>specific<sp/>process<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mib[0]<sp/>=<sp/>CTL_KERN;</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mib[1]<sp/>=<sp/>KERN_PROC;</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mib[2]<sp/>=<sp/>KERN_PROC_PID;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mib[3]<sp/>=<sp/>getpid();</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>sysctl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(info);</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sysctl(mib,<sp/>DOCTEST_COUNTOF(mib),<sp/>&amp;info,<sp/>&amp;size,<sp/>0,<sp/>0)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nCall<sp/>to<sp/>sysctl<sp/>failed<sp/>-<sp/>unable<sp/>to<sp/>determine<sp/>if<sp/>debugger<sp/>is<sp/>active<sp/>**\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>being<sp/>debugged<sp/>if<sp/>the<sp/>P_TRACED<sp/>flag<sp/>is<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((info.kp_proc.p_flag<sp/>&amp;<sp/>P_TRACED)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>DOCTEST_MSVC<sp/>||<sp/>defined(__MINGW32__)<sp/>||<sp/>defined(__MINGW64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive()<sp/>{<sp/>return<sp/>::IsDebuggerPresent()<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>Platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_IS_DEBUGGER_ACTIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerExceptionTranslatorImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IExceptionTranslator*<sp/>et)<sp/>{</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::find(getExceptionTranslators().begin(),<sp/>getExceptionTranslators().end(),<sp/>et)<sp/>==</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getExceptionTranslators().end())</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getExceptionTranslators().push_back(et);</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"></highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_THREAD_LOCAL<sp/>std::vector&lt;IContextScope*&gt;<sp/>g_infoContexts;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>logging<sp/>with<sp/>INFO()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/>ContextScopeBase::ContextScopeBase()<sp/>{</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_infoContexts.push_back(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/>ContextScopeBase::ContextScopeBase(ContextScopeBase&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.need_to_destroy)<sp/>{</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.destroy();</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.need_to_destroy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_infoContexts.push_back(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"></highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996)<sp/></highlight><highlight class="comment">//<sp/>std::uncaught_exception<sp/>is<sp/>deprecated<sp/>in<sp/>C++17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wdeprecated-declarations&quot;)</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wdeprecated-declarations&quot;)</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>cannot<sp/>be<sp/>inlined<sp/>into<sp/>the<sp/>destructor<sp/>because<sp/>that<sp/>would<sp/>mean<sp/>calling<sp/>stringify<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ContextScope<sp/>has<sp/>been<sp/>destroyed<sp/>(base<sp/>class<sp/>destructors<sp/>run<sp/>after<sp/>derived<sp/>class<sp/>destructors).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instead,<sp/>ContextScope<sp/>calls<sp/>this<sp/>method<sp/>directly<sp/>from<sp/>its<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ContextScopeBase::destroy()<sp/>{</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_lib_uncaught_exceptions)<sp/>&amp;&amp;<sp/>__cpp_lib_uncaught_exceptions<sp/>&gt;=<sp/>201411L<sp/>&amp;&amp;<sp/>(!defined(__MAC_OS_X_VERSION_MIN_REQUIRED)<sp/>||<sp/>__MAC_OS_X_VERSION_MIN_REQUIRED<sp/>&gt;=<sp/>101200)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::uncaught_exceptions()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::uncaught_exception())<sp/>{</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>s;</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;stringify(&amp;s);</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;stringifiedContexts.push_back(s.str().c_str());</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_infoContexts.pop_back();</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"></highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="4615"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4616"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(DOCTEST_CONFIG_POSIX_SIGNALS)<sp/>&amp;&amp;<sp/>!defined(DOCTEST_CONFIG_WINDOWS_SEH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FatalConditionHandler</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()<sp/>{}</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>allocateAltStackMem()<sp/>{}</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeAltStackMem()<sp/>{}</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_POSIX_SIGNALS<sp/>||<sp/>DOCTEST_CONFIG_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4627"><highlight class="normal"></highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reportFatal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;);</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"></highlight></codeline>
<codeline lineno="4630"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4631"><highlight class="normal"></highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SignalDefs</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DWORD<sp/>id;</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name;</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>1-1<sp/>mapping<sp/>between<sp/>signals<sp/>and<sp/>windows<sp/>exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>can<sp/>easily<sp/>distinguish<sp/>between<sp/>SO<sp/>and<sp/>SigSegV,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>SigInt,<sp/>SigTerm,<sp/>etc<sp/>are<sp/>handled<sp/>differently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/>SignalDefs<sp/>signalDefs[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EXCEPTION_ILLEGAL_INSTRUCTION),</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SIGILL<sp/>-<sp/>Illegal<sp/>instruction<sp/>signal&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EXCEPTION_STACK_OVERFLOW),<sp/></highlight><highlight class="stringliteral">&quot;SIGSEGV<sp/>-<sp/>Stack<sp/>overflow&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EXCEPTION_ACCESS_VIOLATION),</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SIGSEGV<sp/>-<sp/>Segmentation<sp/>violation<sp/>signal&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EXCEPTION_INT_DIVIDE_BY_ZERO),<sp/></highlight><highlight class="stringliteral">&quot;Divide<sp/>by<sp/>zero<sp/>error&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FatalConditionHandler</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LONG<sp/>CALLBACK<sp/>handleException(PEXCEPTION_POINTERS<sp/>ExceptionInfo)<sp/>{</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiple<sp/>threads<sp/>may<sp/>enter<sp/>this<sp/>filter/handler<sp/>at<sp/>once.<sp/>We<sp/>want<sp/>the<sp/>error<sp/>message<sp/>to<sp/>be<sp/>printed<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>console<sp/>just<sp/>once<sp/>no<sp/>matter<sp/>how<sp/>many<sp/>threads<sp/>have<sp/>crashed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DECLARE_STATIC_MUTEX(mutex)</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>execute<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_LOCK_MUTEX(mutex)</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(execute)<sp/>{</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reported<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DOCTEST_COUNTOF(signalDefs);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode<sp/>==<sp/>signalDefs[i].id)<sp/>{</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportFatal(signalDefs[i].name);</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reported<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(reported<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportFatal(</highlight><highlight class="stringliteral">&quot;Unhandled<sp/>SEH<sp/>exception<sp/>caught&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isDebuggerActive()<sp/>&amp;&amp;<sp/>!g_cs-&gt;no_breaks)</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_BREAK_INTO_DEBUGGER();</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"></highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>allocateAltStackMem()<sp/>{}</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeAltStackMem()<sp/>{}</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler()<sp/>{</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSet<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>32k<sp/>seems<sp/>enough<sp/>for<sp/>doctest<sp/>to<sp/>handle<sp/>stack<sp/>overflow,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>the<sp/>value<sp/>was<sp/>found<sp/>experimentally,<sp/>so<sp/>there<sp/>is<sp/>no<sp/>strong<sp/>guarantee</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guaranteeSize<sp/>=<sp/>32<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>an<sp/>unhandled<sp/>exception<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previousTop<sp/>=<sp/>SetUnhandledExceptionFilter(handleException);</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>in<sp/>guarantee<sp/>size<sp/>to<sp/>be<sp/>filled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetThreadStackGuarantee(&amp;guaranteeSize);</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>Windows<sp/>uncaught<sp/>exceptions<sp/>from<sp/>another<sp/>thread,<sp/>exceptions<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destructors,<sp/>or<sp/>calls<sp/>to<sp/>std::terminate<sp/>are<sp/>not<sp/>a<sp/>SEH<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"></highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>terminal<sp/>handler<sp/>gets<sp/>called<sp/>when:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>std::terminate<sp/>is<sp/>called<sp/>FROM<sp/>THE<sp/>TEST<sp/>RUNNER<sp/>THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>an<sp/>exception<sp/>is<sp/>thrown<sp/>from<sp/>a<sp/>destructor<sp/>FROM<sp/>THE<sp/>TEST<sp/>RUNNER<sp/>THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original_terminate_handler<sp/>=<sp/>std::get_terminate();</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set_terminate([]()<sp/>DOCTEST_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportFatal(</highlight><highlight class="stringliteral">&quot;Terminate<sp/>handler<sp/>called&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isDebuggerActive()<sp/>&amp;&amp;<sp/>!g_cs-&gt;no_breaks)</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_BREAK_INTO_DEBUGGER();</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(EXIT_FAILURE);<sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>exit<sp/>-<sp/>otherwise<sp/>the<sp/>SIGABRT<sp/>handler<sp/>may<sp/>be<sp/>called<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SIGABRT<sp/>is<sp/>raised<sp/>when:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>std::terminate<sp/>is<sp/>called<sp/>FROM<sp/>A<sp/>DIFFERENT<sp/>THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>an<sp/>exception<sp/>is<sp/>thrown<sp/>from<sp/>a<sp/>destructor<sp/>FROM<sp/>A<sp/>DIFFERENT<sp/>THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>an<sp/>uncaught<sp/>exception<sp/>is<sp/>thrown<sp/>FROM<sp/>A<sp/>DIFFERENT<sp/>THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_sigabrt_handler<sp/>=<sp/>std::signal(SIGABRT,<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signal)<sp/>DOCTEST_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(signal<sp/>==<sp/>SIGABRT)<sp/>{</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportFatal(</highlight><highlight class="stringliteral">&quot;SIGABRT<sp/>-<sp/>Abort<sp/>(abnormal<sp/>termination)<sp/>signal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isDebuggerActive()<sp/>&amp;&amp;<sp/>!g_cs-&gt;no_breaks)</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_BREAK_INTO_DEBUGGER();</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>settings<sp/>are<sp/>taken<sp/>from<sp/>google<sp/>test,<sp/>and<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specifically<sp/>from<sp/>UnitTest::Run()<sp/>inside<sp/>of<sp/>gtest.cc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>user<sp/>does<sp/>not<sp/>want<sp/>to<sp/>see<sp/>pop-up<sp/>dialogs<sp/>about<sp/>crashes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_error_mode_1<sp/>=<sp/>SetErrorMode(SEM_FAILCRITICALERRORS<sp/>|<sp/>SEM_NOALIGNMENTFAULTEXCEPT<sp/>|</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEM_NOGPFAULTERRORBOX<sp/>|<sp/>SEM_NOOPENFILEERRORBOX);</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>forces<sp/>the<sp/>abort<sp/>message<sp/>to<sp/>go<sp/>to<sp/>stderr<sp/>in<sp/>all<sp/>circumstances.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_error_mode_2<sp/>=<sp/>_set_error_mode(_OUT_TO_STDERR);</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>debug<sp/>version,<sp/>Visual<sp/>Studio<sp/>pops<sp/>up<sp/>a<sp/>separate<sp/>dialog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>offering<sp/>a<sp/>choice<sp/>to<sp/>debug<sp/>the<sp/>aborted<sp/>program<sp/>-<sp/>we<sp/>want<sp/>to<sp/>disable<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_abort_behavior<sp/>=<sp/>_set_abort_behavior(0x0,<sp/>_WRITE_ABORT_MSG<sp/>|<sp/>_CALL_REPORTFAULT);</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>debug<sp/>mode,<sp/>the<sp/>Windows<sp/>CRT<sp/>can<sp/>crash<sp/>with<sp/>an<sp/>assertion<sp/>over<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>input<sp/>(e.g.<sp/>passing<sp/>an<sp/>invalid<sp/>file<sp/>descriptor).<sp/>The<sp/>default<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>these<sp/>assertions<sp/>is<sp/>to<sp/>pop<sp/>up<sp/>a<sp/>dialog<sp/>and<sp/>wait<sp/>for<sp/>user<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instead<sp/>ask<sp/>the<sp/>CRT<sp/>to<sp/>dump<sp/>such<sp/>assertions<sp/>to<sp/>stderr<sp/>non-interactively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_report_mode<sp/>=<sp/>_CrtSetReportMode(_CRT_ASSERT,<sp/>_CRTDBG_MODE_FILE<sp/>|<sp/>_CRTDBG_MODE_DEBUG);</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_report_file<sp/>=<sp/>_CrtSetReportFile(_CRT_ASSERT,<sp/>_CRTDBG_FILE_STDERR);</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"></highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()<sp/>{</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isSet)<sp/>{</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unregister<sp/>handler<sp/>and<sp/>restore<sp/>the<sp/>old<sp/>guarantee</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetUnhandledExceptionFilter(previousTop);</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetThreadStackGuarantee(&amp;guaranteeSize);</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set_terminate(original_terminate_handler);</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::signal(SIGABRT,<sp/>prev_sigabrt_handler);</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetErrorMode(prev_error_mode_1);</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_set_error_mode(prev_error_mode_2);</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_set_abort_behavior(prev_abort_behavior,<sp/>_WRITE_ABORT_MSG<sp/>|<sp/>_CALL_REPORTFAULT);</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_CrtSetReportMode(_CRT_ASSERT,<sp/>prev_report_mode));</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_CrtSetReportFile(_CRT_ASSERT,<sp/>prev_report_file));</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSet<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~FatalConditionHandler()<sp/>{<sp/>reset();<sp/>}</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>UINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_error_mode_1;</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_error_mode_2;</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev_abort_behavior;</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_report_mode;</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_HFILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_report_file;</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>void<sp/>(DOCTEST_CDECL<sp/>*prev_sigabrt_handler)(int);</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::terminate_handler<sp/>original_terminate_handler;</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSet;</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ULONG<sp/>guaranteeSize;</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LPTOP_LEVEL_EXCEPTION_FILTER<sp/>previousTop;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler::prev_error_mode_1;</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler::prev_error_mode_2;</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FatalConditionHandler::prev_abort_behavior;</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler::prev_report_mode;</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/>_HFILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler::prev_report_file;</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(DOCTEST_CDECL<sp/>*FatalConditionHandler::prev_sigabrt_handler)(int);</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/>std::terminate_handler<sp/>FatalConditionHandler::original_terminate_handler;</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FatalConditionHandler::isSet<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/>ULONG<sp/>FatalConditionHandler::guaranteeSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/>LPTOP_LEVEL_EXCEPTION_FILTER<sp/>FatalConditionHandler::previousTop<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"></highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SignalDefs</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id;</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name;</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/>SignalDefs<sp/>signalDefs[]<sp/>=<sp/>{{SIGINT,<sp/></highlight><highlight class="stringliteral">&quot;SIGINT<sp/>-<sp/>Terminal<sp/>interrupt<sp/>signal&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{SIGILL,<sp/></highlight><highlight class="stringliteral">&quot;SIGILL<sp/>-<sp/>Illegal<sp/>instruction<sp/>signal&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{SIGFPE,<sp/></highlight><highlight class="stringliteral">&quot;SIGFPE<sp/>-<sp/>Floating<sp/>point<sp/>error<sp/>signal&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{SIGSEGV,<sp/></highlight><highlight class="stringliteral">&quot;SIGSEGV<sp/>-<sp/>Segmentation<sp/>violation<sp/>signal&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{SIGTERM,<sp/></highlight><highlight class="stringliteral">&quot;SIGTERM<sp/>-<sp/>Termination<sp/>request<sp/>signal&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{SIGABRT,<sp/></highlight><highlight class="stringliteral">&quot;SIGABRT<sp/>-<sp/>Abort<sp/>(abnormal<sp/>termination)<sp/>signal&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FatalConditionHandler</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSet;</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>oldSigActions[DOCTEST_COUNTOF(signalDefs)];</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stack_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldSigStack;</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>altStackSize;</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>altStackMem;</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"></highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleSignal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)<sp/>{</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;unknown<sp/>signal&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DOCTEST_COUNTOF(signalDefs);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SignalDefs&amp;<sp/>def<sp/>=<sp/>signalDefs[i];</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sig<sp/>==<sp/>def.id)<sp/>{</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>def.name;</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportFatal(name);</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">raise</highlight><highlight class="normal">(sig);</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>allocateAltStackMem()<sp/>{</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>altStackMem<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[altStackSize];</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeAltStackMem()<sp/>{</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>altStackMem;</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"></highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler()<sp/>{</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSet<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_t<sp/>sigStack;</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigStack.ss_sp<sp/><sp/><sp/><sp/>=<sp/>altStackMem;</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigStack.ss_size<sp/><sp/>=<sp/>altStackSize;</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigStack.ss_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigaltstack(&amp;sigStack,<sp/>&amp;oldSigStack);</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>sa<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.sa_handler<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>handleSignal;</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.sa_flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SA_ONSTACK;</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DOCTEST_COUNTOF(signalDefs);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigaction(signalDefs[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>&amp;sa,<sp/>&amp;oldSigActions[i]);</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"></highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~FatalConditionHandler()<sp/>{<sp/>reset();<sp/>}</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()<sp/>{</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isSet)<sp/>{</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>signals<sp/>back<sp/>to<sp/>previous<sp/>values<sp/>--<sp/>hopefully<sp/>nobody<sp/>overwrote<sp/>them<sp/>in<sp/>the<sp/>meantime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DOCTEST_COUNTOF(signalDefs);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigaction(signalDefs[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>&amp;oldSigActions[i],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>old<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigaltstack(&amp;oldSigStack,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSet<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler::isSet<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>FatalConditionHandler::oldSigActions[DOCTEST_COUNTOF(signalDefs)]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/>stack_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler::oldSigStack<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler::altStackSize<sp/>=<sp/>4<sp/>*<sp/>SIGSTKSZ;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler::altStackMem<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"></highlight></codeline>
<codeline lineno="4857"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4858"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_POSIX_SIGNALS<sp/>||<sp/>DOCTEST_CONFIG_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"></highlight></codeline>
<codeline lineno="4860"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4861"><highlight class="normal"></highlight></codeline>
<codeline lineno="4862"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"></highlight></codeline>
<codeline lineno="4865"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4866"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_OUTPUT_DEBUG_STRING(text)<sp/>::OutputDebugStringA(text)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4867"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>integration<sp/>with<sp/>XCode<sp/>and<sp/>other<sp/>IDEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_OUTPUT_DEBUG_STRING(text)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>Platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4871"><highlight class="normal"></highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addAssert(assertType::Enum<sp/>at)<sp/>{</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((at<sp/>&amp;<sp/>assertType::is_warn)<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;numAssertsCurrentTest_atomic++;</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"></highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFailedAssert(assertType::Enum<sp/>at)<sp/>{</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((at<sp/>&amp;<sp/>assertType::is_warn)<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;numAssertsFailedCurrentTest_atomic++;</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"></highlight></codeline>
<codeline lineno="4882"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DOCTEST_CONFIG_POSIX_SIGNALS)<sp/>||<sp/>defined(DOCTEST_CONFIG_WINDOWS_SEH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reportFatal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;failure_flags<sp/>|=<sp/>TestCaseFailureReason::Crash;</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"></highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception,<sp/>{message.c_str(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"></highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(g_cs-&gt;subcaseStack.size())<sp/>{</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;subcaseStack.pop_back();</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end,<sp/>DOCTEST_EMPTY);</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;finalizeTestCaseData();</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"></highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end,<sp/>*g_cs);</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end,<sp/>*g_cs);</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_POSIX_SIGNALS<sp/>||<sp/>DOCTEST_CONFIG_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4900"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight></codeline>
<codeline lineno="4902"><highlight class="normal">AssertData::AssertData(assertType::Enum<sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>exception_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StringContains&amp;<sp/>exception_string)</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_test_case(g_cs-&gt;currentTest),<sp/>m_at(at),<sp/>m_file(file),<sp/>m_line(line),<sp/>m_expr(expr),</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/>m_failed(true),<sp/>m_threw(false),<sp/>m_threw_as(false),<sp/>m_exception_type(exception_type),</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/>m_exception_string(exception_string)<sp/>{</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DOCTEST_MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_expr[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>this<sp/>happens<sp/>when<sp/>variadic<sp/>macros<sp/>are<sp/>disabled<sp/>under<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_expr;</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"></highlight></codeline>
<codeline lineno="4913"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultBuilder::ResultBuilder(assertType::Enum<sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>exception_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>exception_string)</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>AssertData(at,<sp/>file,<sp/>line,<sp/>expr,<sp/>exception_type,<sp/>exception_string)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"></highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultBuilder::ResultBuilder(assertType::Enum<sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>exception_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Contains&amp;<sp/>exception_string)</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>AssertData(at,<sp/>file,<sp/>line,<sp/>expr,<sp/>exception_type,<sp/>exception_string)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ResultBuilder::setResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Result&amp;<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_decomp<sp/>=<sp/>res.m_decomp;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_failed<sp/>=<sp/>!res.m_passed;</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"></highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ResultBuilder::translateException()<sp/>{</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_threw<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exception<sp/>=<sp/>translateActiveException();</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"></highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ResultBuilder::log()<sp/>{</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_at<sp/>&amp;<sp/>assertType::is_throws)<sp/>{<sp/></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_failed<sp/>=<sp/>!m_threw;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((m_at<sp/>&amp;<sp/>assertType::is_throws_as)<sp/>&amp;&amp;<sp/>(m_at<sp/>&amp;<sp/>assertType::is_throws_with))<sp/>{<sp/></highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_failed<sp/>=<sp/>!m_threw_as<sp/>||<sp/>!m_exception_string.check(m_exception);</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_at<sp/>&amp;<sp/>assertType::is_throws_as)<sp/>{<sp/></highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_failed<sp/>=<sp/>!m_threw_as;</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_at<sp/>&amp;<sp/>assertType::is_throws_with)<sp/>{<sp/></highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_failed<sp/>=<sp/>!m_exception_string.check(m_exception);</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_at<sp/>&amp;<sp/>assertType::is_nothrow)<sp/>{<sp/></highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_failed<sp/>=<sp/>m_threw;</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"></highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_exception.size())</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exception<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>m_exception<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"></highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_running_in_test)<sp/>{</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addAssert(m_at);</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(log_assert,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_failed)</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addFailedAssert(m_at);</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_failed)<sp/>{</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failed_out_of_a_testing_context(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"></highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_failed<sp/>&amp;&amp;<sp/>isDebuggerActive()<sp/>&amp;&amp;<sp/>!getContextOptions()-&gt;no_breaks<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(g_cs-&gt;currentTest<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>!g_cs-&gt;currentTest-&gt;m_no_breaks);<sp/></highlight><highlight class="comment">//<sp/>break<sp/>into<sp/>debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ResultBuilder::react()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_failed<sp/>&amp;&amp;<sp/>checkIfShouldThrow(m_at))</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throwException();</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>failed_out_of_a_testing_context(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertData&amp;<sp/>ad)<sp/>{</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_cs-&gt;ah)</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs-&gt;ah(ad);</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::abort();</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"></highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decomp_assert(assertType::Enum<sp/>at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Result&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>failed<sp/>=<sp/>!result.m_passed;</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"></highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>###################################################################################</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IF<sp/>THE<sp/>DEBUGGER<sp/>BREAKS<sp/>HERE<sp/>-<sp/>GO<sp/>1<sp/>LEVEL<sp/>UP<sp/>IN<sp/>THE<sp/>CALLSTACK<sp/>FOR<sp/>THE<sp/>FAILING<sp/>ASSERT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>THIS<sp/>IS<sp/>THE<sp/>EFFECT<sp/>OF<sp/>HAVING<sp/>&apos;DOCTEST_CONFIG_SUPER_FAST_ASSERTS&apos;<sp/>DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>###################################################################################</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_OUT_OF_TESTS(result.m_decomp);</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ASSERT_IN_TESTS(result.m_decomp);</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!failed;</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBuilder::MessageBuilder(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/>assertType::Enum<sp/>severity)<sp/>{</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stream<sp/><sp/><sp/>=<sp/>tlssPush();</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_file<sp/><sp/><sp/><sp/><sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_line<sp/><sp/><sp/><sp/><sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_severity<sp/>=<sp/>severity;</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"></highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageBuilder::~MessageBuilder()<sp/>{</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!logged)</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tlssPop();</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_DEFINE_INTERFACE(IExceptionTranslator)</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"></highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MessageBuilder::log()<sp/>{</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!logged)<sp/>{</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_string<sp/>=<sp/>tlssPop();</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(log_message,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"></highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isWarn<sp/>=<sp/>m_severity<sp/>&amp;<sp/>assertType::is_warn;</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"></highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>warn<sp/>is<sp/>just<sp/>a<sp/>message<sp/>in<sp/>this<sp/>context<sp/>so<sp/>we<sp/>don&apos;t<sp/>treat<sp/>it<sp/>as<sp/>an<sp/>assert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isWarn)<sp/>{</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addAssert(m_severity);</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addFailedAssert(m_severity);</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"></highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isDebuggerActive()<sp/>&amp;&amp;<sp/>!getContextOptions()-&gt;no_breaks<sp/>&amp;&amp;<sp/>!isWarn<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(g_cs-&gt;currentTest<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>!g_cs-&gt;currentTest-&gt;m_no_breaks);<sp/></highlight><highlight class="comment">//<sp/>break<sp/>into<sp/>debugger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MessageBuilder::react()<sp/>{</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_severity<sp/>&amp;<sp/>assertType::is_require)<sp/></highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throwException();</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5025"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"></highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5030"><highlight class="normal"></highlight></codeline>
<codeline lineno="5031"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5032"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code<sp/>has<sp/>been<sp/>taken<sp/>verbatim<sp/>from<sp/>Catch2/include/internal/catch_xmlwriter.h/cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>done<sp/>so<sp/>cherry-picking<sp/>bug<sp/>fixes<sp/>is<sp/>trivial<sp/>-<sp/>even<sp/>the<sp/>style/formatting<sp/>is<sp/>untouched.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5035"><highlight class="normal"></highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">XmlEncode<sp/>{</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>ForWhat<sp/>{<sp/>ForTextNodes,<sp/>ForAttributes<sp/>};</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"></highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlEncode(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>ForWhat<sp/>forWhat<sp/>=<sp/>ForTextNodes<sp/>);</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"></highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encodeTo(<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>os<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>os,<sp/>XmlEncode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>xmlEncode<sp/>);</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"></highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_str;</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ForWhat<sp/>m_forWhat;</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">XmlWriter<sp/>{</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ScopedElement<sp/>{</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement(<sp/>XmlWriter*<sp/>writer<sp/>);</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"></highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement(<sp/>ScopedElement&amp;&amp;<sp/>other<sp/>)<sp/>DOCTEST_NOEXCEPT;</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement&amp;<sp/>operator=(<sp/>ScopedElement&amp;&amp;<sp/>other<sp/>)<sp/>DOCTEST_NOEXCEPT;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"></highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~ScopedElement();</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement&amp;<sp/>writeText(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>indent<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement&amp;<sp/>writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>attribute<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer-&gt;writeAttribute(<sp/>name,<sp/>attribute<sp/>);</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"></highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>XmlWriter*<sp/>m_writer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"></highlight></codeline>
<codeline lineno="5075"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter(<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>os<sp/>=<sp/>std::cout<sp/>);</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter(<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>os<sp/>);</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~XmlWriter();</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter(<sp/>XmlWriter<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>operator=(<sp/>XmlWriter<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"></highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>startElement(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"></highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement<sp/>scopedElement(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>endElement();</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"></highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>attribute<sp/>);</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"></highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attribute<sp/>);</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>attribute<sp/>);</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"></highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>attribute<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>rss;</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>attribute;</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>writeAttribute(<sp/>name,<sp/>rss.str()<sp/>);</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"></highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeText(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>indent<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"></highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XmlWriter&amp;<sp/>writeComment(<sp/>std::string<sp/>const&amp;<sp/>text<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5107"><highlight class="normal"></highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>writeStylesheetRef(<sp/>std::string<sp/>const&amp;<sp/>url<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"></highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XmlWriter&amp;<sp/>writeBlankLine();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5111"><highlight class="normal"></highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ensureTagClosed();</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"></highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeDeclaration();</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"></highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>newlineIfNecessary();</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"></highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_tagIsOpen<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_needsNewline<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>m_tags;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_indent;</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>m_os;</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"></highlight></codeline>
<codeline lineno="5127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code<sp/>has<sp/>been<sp/>taken<sp/>verbatim<sp/>from<sp/>Catch2/include/internal/catch_xmlwriter.h/cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>done<sp/>so<sp/>cherry-picking<sp/>bug<sp/>fixes<sp/>is<sp/>trivial<sp/>-<sp/>even<sp/>the<sp/>style/formatting<sp/>is<sp/>untouched.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5131"><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>uchar<sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char;</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"></highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"></highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trailingBytes(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xE0)<sp/>==<sp/>0xC0)<sp/>{</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0xE0)<sp/>{</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xF8)<sp/>==<sp/>0xF0)<sp/>{</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>multibyte<sp/>utf-8<sp/>start<sp/>byte<sp/>encountered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>headerValue(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xE0)<sp/>==<sp/>0xC0)<sp/>{</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>&amp;<sp/>0x1F;</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0xE0)<sp/>{</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>&amp;<sp/>0x0F;</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xF8)<sp/>==<sp/>0xF0)<sp/>{</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>&amp;<sp/>0x07;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>multibyte<sp/>utf-8<sp/>start<sp/>byte<sp/>encountered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"></highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hexEscapeChar(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>os,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ios_base::fmtflags<sp/>f(os.flags());</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::uppercase<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::setw(2)</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c);</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.flags(f);</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"></highlight></codeline>
<codeline lineno="5170"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlEncode::XmlEncode(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>ForWhat<sp/>forWhat<sp/>)</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_str(<sp/>str<sp/>),</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_forWhat(<sp/>forWhat<sp/>)</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"></highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlEncode::encodeTo(<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>os<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apostrophe<sp/>escaping<sp/>not<sp/>necessary<sp/>if<sp/>we<sp/>always<sp/>use<sp/>&quot;<sp/>to<sp/>write<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(see:<sp/>https://www.w3.org/TR/xml/#syntax)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5180"><highlight class="normal"></highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::size_t<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_str.size();<sp/>++<sp/>idx<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uchar<sp/>c<sp/>=<sp/>m_str[idx];</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:<sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"></highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See:<sp/>https://www.w3.org/TR/xml/#syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>m_str[idx<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>m_str[idx<sp/>-<sp/>2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"></highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_forWhat<sp/>==<sp/>ForAttributes)</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"></highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>control<sp/>characters<sp/>and<sp/>invalid<sp/>utf-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"></highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Escape<sp/>control<sp/>characters<sp/>in<sp/>standard<sp/>ascii</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>https://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0x09<sp/>||<sp/>(c<sp/>&gt;<sp/>0x0D<sp/>&amp;&amp;<sp/>c<sp/>&lt;<sp/>0x20)<sp/>||<sp/>c<sp/>==<sp/>0x7F)<sp/>{</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEscapeChar(os,<sp/>c);</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Plain<sp/>ASCII:<sp/>Write<sp/>it<sp/>to<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0x7F)<sp/>{</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UTF-8<sp/>territory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>encoding<sp/>is<sp/>valid<sp/>and<sp/>if<sp/>it<sp/>is<sp/>not,<sp/>hex<sp/>escape<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Important:<sp/>We<sp/>do<sp/>not<sp/>check<sp/>the<sp/>exact<sp/>decoded<sp/>values<sp/>for<sp/>validity,<sp/>only<sp/>the<sp/>encoding<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>check<sp/>that<sp/>this<sp/>bytes<sp/>is<sp/>a<sp/>valid<sp/>lead<sp/>byte:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>means<sp/>that<sp/>it<sp/>is<sp/>not<sp/>encoded<sp/>as<sp/>1111<sp/>1XXX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>as<sp/>10XX<sp/>XXXX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/><sp/>0xC0<sp/>||</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>&gt;=<sp/>0xF8)<sp/>{</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEscapeChar(os,<sp/>c);</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"></highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>encBytes<sp/>=<sp/>trailingBytes(c);</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>there<sp/>enough<sp/>bytes<sp/>left<sp/>to<sp/>avoid<sp/>accessing<sp/>out-of-bounds<sp/>memory?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>+<sp/>encBytes<sp/>-<sp/>1<sp/>&gt;=<sp/>m_str.size())<sp/>{</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEscapeChar(os,<sp/>c);</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>header<sp/>is<sp/>valid,<sp/>check<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>encBytes<sp/>bytes<sp/>must<sp/>together<sp/>be<sp/>a<sp/>valid<sp/>utf-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>means:<sp/>bitpattern<sp/>10XX<sp/>XXXX<sp/>and<sp/>the<sp/>extracted<sp/>value<sp/>is<sp/>sane<sp/>(ish)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>value<sp/>=<sp/>headerValue(c);</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>n<sp/>=<sp/>1;<sp/>n<sp/>&lt;<sp/>encBytes;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uchar<sp/>nc<sp/>=<sp/>m_str[idx<sp/>+<sp/>n];</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>&amp;=<sp/>((nc<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0x80);</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(value<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(nc<sp/>&amp;<sp/>0x3F);</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"></highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrong<sp/>bit<sp/>pattern<sp/>of<sp/>following<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!valid)<sp/>||</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overlong<sp/>encodings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value<sp/>&lt;<sp/>0x80)<sp/>||</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&lt;<sp/>0x800<sp/><sp/><sp/>&amp;&amp;<sp/>encBytes<sp/>&gt;<sp/>2)<sp/>||<sp/></highlight><highlight class="comment">//<sp/>removed<sp/>&quot;0x80<sp/>&lt;=<sp/>value<sp/>&amp;&amp;&quot;<sp/>because<sp/>redundant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x800<sp/>&lt;<sp/>value<sp/>&amp;&amp;<sp/>value<sp/>&lt;<sp/>0x10000<sp/>&amp;&amp;<sp/>encBytes<sp/>&gt;<sp/>3)<sp/>||</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Encoded<sp/>value<sp/>out<sp/>of<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value<sp/>&gt;=<sp/>0x110000)</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEscapeChar(os,<sp/>c);</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>got<sp/>here,<sp/>this<sp/>is<sp/>in<sp/>fact<sp/>a<sp/>valid(ish)<sp/>utf-8<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>encBytes;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>m_str[idx<sp/>+<sp/>n];</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>+=<sp/>encBytes<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"></highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>os,<sp/>XmlEncode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>xmlEncode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlEncode.encodeTo(<sp/>os<sp/>);</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement::ScopedElement(<sp/>XmlWriter*<sp/>writer<sp/>)</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_writer(<sp/>writer<sp/>)</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"></highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement::ScopedElement(<sp/>ScopedElement&amp;&amp;<sp/>other<sp/>)<sp/>DOCTEST_NOEXCEPT</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_writer(<sp/>other.m_writer<sp/>){</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_writer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement&amp;<sp/>XmlWriter::ScopedElement::operator=(<sp/>ScopedElement&amp;&amp;<sp/>other<sp/>)<sp/>DOCTEST_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_writer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer-&gt;endElement();</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer<sp/>=<sp/>other.m_writer;</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_writer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement::~ScopedElement()<sp/>{</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_writer<sp/>)</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer-&gt;endElement();</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement&amp;<sp/>XmlWriter::ScopedElement::writeText(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>indent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer-&gt;writeText(<sp/>text,<sp/>indent<sp/>);</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"></highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::XmlWriter(<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>os<sp/>)<sp/>:<sp/>m_os(<sp/>os<sp/>)</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>writeDeclaration();<sp/>//<sp/>called<sp/>explicitly<sp/>by<sp/>the<sp/>reporters<sp/>that<sp/>use<sp/>the<sp/>writer<sp/>class<sp/>-<sp/>see<sp/>issue<sp/>#627</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"></highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::~XmlWriter()<sp/>{</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>!m_tags.empty()<sp/>)</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endElement();</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"></highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::startElement(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ensureTagClosed();</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlineIfNecessary();</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>m_indent<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name;</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tags.push_back(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_indent<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tagIsOpen<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement<sp/>XmlWriter::scopedElement(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement<sp/>scoped(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startElement(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scoped;</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::endElement()<sp/>{</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlineIfNecessary();</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_indent<sp/>=<sp/>m_indent.substr(<sp/>0,<sp/>m_indent.size()-2<sp/>);</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_tagIsOpen<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tagIsOpen<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>m_indent<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_tags.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tags.pop_back();</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"></highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>attribute<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!name.empty()<sp/>&amp;&amp;<sp/>!attribute.empty()<sp/>)</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>XmlEncode(<sp/>attribute,<sp/>XmlEncode::ForAttributes<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"></highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>attribute<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!name.empty()<sp/>&amp;&amp;<sp/>attribute<sp/>&amp;&amp;<sp/>attribute[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>XmlEncode(<sp/>attribute,<sp/>XmlEncode::ForAttributes<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"></highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>attribute<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(<sp/>attribute<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal"><sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::writeText(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>indent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!text.empty()<sp/>){</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tagWasOpen<sp/>=<sp/>m_tagIsOpen;</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ensureTagClosed();</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tagWasOpen<sp/>&amp;&amp;<sp/>indent<sp/>)</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>m_indent;</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>XmlEncode(<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_needsNewline<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XmlWriter&amp;<sp/>XmlWriter::writeComment(<sp/>std::string<sp/>const&amp;<sp/>text<sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ensureTagClosed();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>m_indent<sp/>&lt;&lt;<sp/>&quot;&lt;!--&quot;<sp/>&lt;&lt;<sp/>text<sp/>&lt;&lt;<sp/>&quot;--&gt;&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_needsNewline<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>*this;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5380"><highlight class="normal"></highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>XmlWriter::writeStylesheetRef(<sp/>std::string<sp/>const&amp;<sp/>url<sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>&quot;&lt;?xml-stylesheet<sp/>type=\&quot;text/xsl\&quot;<sp/>href=\&quot;&quot;<sp/>&lt;&lt;<sp/>url<sp/>&lt;&lt;<sp/>&quot;\&quot;?&gt;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"></highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//XmlWriter&amp;<sp/>XmlWriter::writeBlankLine()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ensureTagClosed();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>*this;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5390"><highlight class="normal"></highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlWriter::ensureTagClosed()<sp/>{</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_tagIsOpen<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tagIsOpen<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"></highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlWriter::writeDeclaration()<sp/>{</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;?xml<sp/>version=\&quot;1.0\&quot;<sp/>encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlWriter::newlineIfNecessary()<sp/>{</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_needsNewline<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_needsNewline<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"></highlight></codeline>
<codeline lineno="5409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>copy-pasted<sp/>code<sp/>from<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5412"><highlight class="normal"></highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XmlReporter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IReporter</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter<sp/>xml;</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DECLARE_MUTEX(mutex)</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"></highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>caching<sp/>pointers/references<sp/>to<sp/>objects<sp/>of<sp/>these<sp/>types<sp/>-<sp/>safe<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContextOptions&amp;<sp/>opt;</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData*<sp/><sp/><sp/>tc<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"></highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlReporter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContextOptions&amp;<sp/>co)</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>xml(*co.cout)</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>opt(co)<sp/>{}</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"></highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_contexts()<sp/>{</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_contexts<sp/>=<sp/>get_num_active_contexts();</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_contexts)<sp/>{</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contexts<sp/>=<sp/>get_active_contexts();</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_contexts;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contexts[i]-&gt;stringify(&amp;ss);</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;Info&quot;</highlight><highlight class="normal">).writeText(ss.str());</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"></highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>line(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>l)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt.no_line_numbers<sp/>?<sp/>0<sp/>:<sp/>l;<sp/>}</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"></highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_start_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;<sp/>in)<sp/>{</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>open_ts_tag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tc<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>already<sp/>opened<sp/>a<sp/>test<sp/>suite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::strcmp(tc-&gt;m_test_suite,<sp/>in.m_test_suite)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>open_ts_tag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>open_ts_tag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>first<sp/>test<sp/>case<sp/>==&gt;<sp/>first<sp/>test<sp/>suite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"></highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(open_ts_tag)<sp/>{</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;TestSuite&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>in.m_test_suite);</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"></highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tc<sp/>=<sp/>&amp;in;</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;TestCase&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>in.m_name)</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;filename&quot;</highlight><highlight class="normal">,<sp/>skipPathFromFilename(in.m_file.c_str()))</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>line(in.m_line))</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;description&quot;</highlight><highlight class="normal">,<sp/>in.m_description);</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"></highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Approx(in.m_timeout)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;timeout&quot;</highlight><highlight class="normal">,<sp/>in.m_timeout);</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.m_may_fail)</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;may_fail&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.m_should_fail)</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;should_fail&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"></highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WHAT<sp/>FOLLOWS<sp/>ARE<sp/>OVERRIDES<sp/>OF<sp/>THE<sp/>VIRTUAL<sp/>METHODS<sp/>OF<sp/>THE<sp/>REPORTER<sp/>INTERFACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5478"><highlight class="normal"></highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_query(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueryData&amp;<sp/>in)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_run_start();</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.list_reporters)<sp/>{</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>getListeners())</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;Listener&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;priority&quot;</highlight><highlight class="normal">,<sp/>curr.first.first)</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>curr.first.second);</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>getReporters())</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;Reporter&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;priority&quot;</highlight><highlight class="normal">,<sp/>curr.first.first)</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>curr.first.second);</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.count<sp/>||<sp/>opt.list_test_cases)<sp/>{</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>in.num_data;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;TestCase&quot;</highlight><highlight class="normal">).writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>in.data[i]-&gt;m_name)</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;testsuite&quot;</highlight><highlight class="normal">,<sp/>in.data[i]-&gt;m_test_suite)</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;filename&quot;</highlight><highlight class="normal">,<sp/>skipPathFromFilename(in.data[i]-&gt;m_file.c_str()))</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>line(in.data[i]-&gt;m_line))</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;skipped&quot;</highlight><highlight class="normal">,<sp/>in.data[i]-&gt;m_skip);</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;OverallResultsTestCases&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;unskipped&quot;</highlight><highlight class="normal">,<sp/>in.run_stats-&gt;numTestCasesPassingFilters);</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.list_test_suites)<sp/>{</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>in.num_data;<sp/>++i)</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;TestSuite&quot;</highlight><highlight class="normal">).writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>in.data[i]-&gt;m_test_suite);</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;OverallResultsTestCases&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;unskipped&quot;</highlight><highlight class="normal">,<sp/>in.run_stats-&gt;numTestCasesPassingFilters);</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;OverallResultsTestSuites&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;unskipped&quot;</highlight><highlight class="normal">,<sp/>in.run_stats-&gt;numTestSuitesPassingFilters);</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"></highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_run_start()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeDeclaration();</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"></highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>.exe<sp/>extension<sp/>-<sp/>mainly<sp/>to<sp/>have<sp/>the<sp/>same<sp/>output<sp/>on<sp/>UNIX<sp/>and<sp/>Windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>binary_name<sp/>=<sp/>skipPathFromFilename(opt.binary_name.c_str());</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(binary_name.rfind(</highlight><highlight class="stringliteral">&quot;.exe&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binary_name<sp/>=<sp/>binary_name.substr(0,<sp/>binary_name.length()<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5520"><highlight class="normal"></highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;doctest&quot;</highlight><highlight class="normal">).writeAttribute(</highlight><highlight class="stringliteral">&quot;binary&quot;</highlight><highlight class="normal">,<sp/>binary_name);</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.no_version<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">,<sp/>DOCTEST_VERSION_STR);</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"></highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>the<sp/>consequential<sp/>ones<sp/>(TODO:<sp/>filters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;Options&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;order_by&quot;</highlight><highlight class="normal">,<sp/>opt.order_by.c_str())</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;rand_seed&quot;</highlight><highlight class="normal">,<sp/>opt.rand_seed)</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>opt.first)</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>opt.last)</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;abort_after&quot;</highlight><highlight class="normal">,<sp/>opt.abort_after)</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;subcase_filter_levels&quot;</highlight><highlight class="normal">,<sp/>opt.subcase_filter_levels)</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;case_sensitive&quot;</highlight><highlight class="normal">,<sp/>opt.case_sensitive)</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;no_throw&quot;</highlight><highlight class="normal">,<sp/>opt.no_throw)</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;no_skip&quot;</highlight><highlight class="normal">,<sp/>opt.no_skip);</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"></highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_run_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestRunStats&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tc)<sp/></highlight><highlight class="comment">//<sp/>the<sp/>TestSuite<sp/>tag<sp/>-<sp/>only<sp/>if<sp/>there<sp/>has<sp/>been<sp/>at<sp/>least<sp/>1<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"></highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;OverallResultsAsserts&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;successes&quot;</highlight><highlight class="normal">,<sp/>p.numAsserts<sp/>-<sp/>p.numAssertsFailed)</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,<sp/>p.numAssertsFailed);</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"></highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;OverallResultsTestCases&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;successes&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.numTestCasesPassingFilters<sp/>-<sp/>p.numTestCasesFailed)</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,<sp/>p.numTestCasesFailed);</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.no_skipped_summary<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;skipped&quot;</highlight><highlight class="normal">,<sp/>p.numTestCases<sp/>-<sp/>p.numTestCasesPassingFilters);</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"></highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"></highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_start(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;<sp/>in)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_case_start_impl(in);</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.ensureTagClosed();</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"></highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_reenter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"></highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CurrentTestCaseStats&amp;<sp/>st)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;OverallResultsAsserts&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;successes&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st.numAssertsCurrentTest<sp/>-<sp/>st.numAssertsFailedCurrentTest)</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,<sp/>st.numAssertsFailedCurrentTest)</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;test_case_success&quot;</highlight><highlight class="normal">,<sp/>st.testCaseSuccess);</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.duration)</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;duration&quot;</highlight><highlight class="normal">,<sp/>st.seconds);</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tc-&gt;m_expected_failures)</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;expected_failures&quot;</highlight><highlight class="normal">,<sp/>tc-&gt;m_expected_failures);</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"></highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"></highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_exception(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseException&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_LOCK_MUTEX(mutex)</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"></highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;Exception&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;crash&quot;</highlight><highlight class="normal">,<sp/>e.is_crash)</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeText(e.error_string.c_str());</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"></highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subcase_start(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SubcaseSignature&amp;<sp/>in)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;SubCase&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>in.m_name)</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;filename&quot;</highlight><highlight class="normal">,<sp/>skipPathFromFilename(in.m_file))</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>line(in.m_line));</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.ensureTagClosed();</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subcase_end()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>xml.endElement();<sp/>}</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"></highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_assert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertData&amp;<sp/>rb)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!rb.m_failed<sp/>&amp;&amp;<sp/>!opt.success)</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"></highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_LOCK_MUTEX(mutex)</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"></highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;Expression&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;success&quot;</highlight><highlight class="normal">,<sp/>!rb.m_failed)</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>assertString(rb.m_at))</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;filename&quot;</highlight><highlight class="normal">,<sp/>skipPathFromFilename(rb.m_file))</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>line(rb.m_line));</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"></highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;Original&quot;</highlight><highlight class="normal">).writeText(rb.m_expr);</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"></highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rb.m_threw)</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;Exception&quot;</highlight><highlight class="normal">).writeText(rb.m_exception.c_str());</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"></highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rb.m_at<sp/>&amp;<sp/>assertType::is_throws_as)</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;ExpectedException&quot;</highlight><highlight class="normal">).writeText(rb.m_exception_type);</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rb.m_at<sp/>&amp;<sp/>assertType::is_throws_with)</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;ExpectedExceptionString&quot;</highlight><highlight class="normal">).writeText(rb.m_exception_string.c_str());</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((rb.m_at<sp/>&amp;<sp/>assertType::is_normal)<sp/>&amp;&amp;<sp/>!rb.m_threw)</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;Expanded&quot;</highlight><highlight class="normal">).writeText(rb.m_decomp.c_str());</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_contexts();</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"></highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"></highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_message(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MessageData&amp;<sp/>mb)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_LOCK_MUTEX(mutex)</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"></highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;Message&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>failureString(mb.m_severity))</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;filename&quot;</highlight><highlight class="normal">,<sp/>skipPathFromFilename(mb.m_file))</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>line(mb.m_line));</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"></highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;Text&quot;</highlight><highlight class="normal">).writeText(mb.m_string.c_str());</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"></highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_contexts();</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"></highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"></highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_skipped(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;<sp/>in)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.no_skipped_summary<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_case_start_impl(in);</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;skipped&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"></highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_REGISTER_REPORTER(</highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>XmlReporter);</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"></highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fulltext_log_assert_to_stream(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertData&amp;<sp/>rb)<sp/>{</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((rb.m_at<sp/>&amp;<sp/>(assertType::is_throws_as<sp/>|<sp/>assertType::is_throws_with))<sp/>==</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0)<sp/></highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/>assertString(rb.m_at)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rb.m_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"></highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rb.m_at<sp/>&amp;<sp/>assertType::is_throws)<sp/>{<sp/></highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>(rb.m_threw<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;threw<sp/>as<sp/>expected!&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;did<sp/>NOT<sp/>throw<sp/>at<sp/>all!&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((rb.m_at<sp/>&amp;<sp/>assertType::is_throws_as)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rb.m_at<sp/>&amp;<sp/>assertType::is_throws_with))<sp/>{<sp/></highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/>assertString(rb.m_at)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rb.m_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>rb.m_exception_string.c_str()</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rb.m_exception_type<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rb.m_threw)<sp/>{</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!rb.m_failed)<sp/>{</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;threw<sp/>as<sp/>expected!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;threw<sp/>a<sp/>DIFFERENT<sp/>exception!<sp/>(contents:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rb.m_exception<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;did<sp/>NOT<sp/>throw<sp/>at<sp/>all!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rb.m_at<sp/>&amp;</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertType::is_throws_as)<sp/>{<sp/></highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/>assertString(rb.m_at)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rb.m_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>rb.m_exception_type<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(rb.m_threw<sp/>?<sp/>(rb.m_threw_as<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;threw<sp/>as<sp/>expected!&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;threw<sp/>a<sp/>DIFFERENT<sp/>exception:<sp/>&quot;</highlight><highlight class="normal">)<sp/>:</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;did<sp/>NOT<sp/>throw<sp/>at<sp/>all!&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/>rb.m_exception<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rb.m_at<sp/>&amp;</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertType::is_throws_with)<sp/>{<sp/></highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/>assertString(rb.m_at)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rb.m_expr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>rb.m_exception_string.c_str()</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>)<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(rb.m_threw<sp/>?<sp/>(!rb.m_failed<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;threw<sp/>as<sp/>expected!&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;threw<sp/>a<sp/>DIFFERENT<sp/>exception:<sp/>&quot;</highlight><highlight class="normal">)<sp/>:</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;did<sp/>NOT<sp/>throw<sp/>at<sp/>all!&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/>rb.m_exception<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rb.m_at<sp/>&amp;<sp/>assertType::is_nothrow)<sp/>{<sp/></highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>(rb.m_threw<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;THREW<sp/>exception:<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;didn&apos;t<sp/>throw!&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>Color::Cyan</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>rb.m_exception<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>(rb.m_threw<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;THREW<sp/>exception:<sp/>&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!rb.m_failed<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>correct!\n&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>NOT<sp/>correct!\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rb.m_threw)</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>rb.m_exception<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>values:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>assertString(rb.m_at)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rb.m_decomp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"></highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>log_message()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>respond<sp/>to<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>honor<sp/>remaining<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>more<sp/>attributes<sp/>in<sp/>tags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">JUnitReporter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IReporter</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter<sp/>xml;</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DECLARE_MUTEX(mutex)</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Timer<sp/>timer;</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;String&gt;<sp/>deepestSubcaseStackNames;</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"></highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">JUnitTestCaseData</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>getCurrentTimestamp()<sp/>{</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Beware,<sp/>this<sp/>is<sp/>not<sp/>reentrant<sp/>because<sp/>of<sp/>backward<sp/>compatibility<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also,<sp/>UTC<sp/>only,<sp/>again<sp/>because<sp/>of<sp/>backward<sp/>compatibility<sp/>(%z<sp/>is<sp/>C++11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_t<sp/>rawtime;</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::time(&amp;rawtime);</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>timeStampSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;2017-01-16T17:06:45Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"></highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tm<sp/>timeInfo;</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmtime_s(&amp;timeInfo,<sp/>&amp;rawtime);</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmtime_r(&amp;rawtime,<sp/>&amp;timeInfo);</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"></highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>timeStamp[timeStampSize];</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fmt<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"></highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::strftime(timeStamp,<sp/>timeStampSize,<sp/>fmt,<sp/>&amp;timeInfo);</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(timeStamp);</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"></highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">JUnitTestMessage</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JUnitTestMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_details)</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>message(_message),<sp/>type(_type),<sp/>details(_details)<sp/>{}</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"></highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JUnitTestMessage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_details)</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>message(_message),<sp/>type(),<sp/>details(_details)<sp/>{}</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"></highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>message,<sp/>type,<sp/>details;</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"></highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">JUnitTestCase</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JUnitTestCase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_classname,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_name)</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>classname(_classname),<sp/>name(_name),<sp/>time(0),<sp/>failures()<sp/>{}</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"></highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>classname,<sp/>name;</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time;</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;JUnitTestMessage&gt;<sp/>failures,<sp/>errors;</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"></highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>classname,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testcases.emplace_back(classname,<sp/>name);</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"></highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>appendSubcaseNamesToLastTestcase(std::vector&lt;String&gt;<sp/>nameStack)<sp/>{</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr:<sp/>nameStack)</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(curr.size())</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testcases.back().name<sp/>+=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)<sp/>+<sp/>curr.c_str();</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"></highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addTime(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time)<sp/>{</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(time<sp/>&lt;<sp/>1e-4)</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testcases.back().time<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSeconds<sp/>+=<sp/>time;</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"></highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>details)<sp/>{</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testcases.back().failures.emplace_back(message,<sp/>type,<sp/>details);</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++totalFailures;</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"></highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>details)<sp/>{</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testcases.back().errors.emplace_back(message,<sp/>details);</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++totalErrors;</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"></highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;JUnitTestCase&gt;<sp/>testcases;</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>totalSeconds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalErrors<sp/>=<sp/>0,<sp/>totalFailures<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"></highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JUnitTestCaseData<sp/>testCaseData;</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"></highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>caching<sp/>pointers/references<sp/>to<sp/>objects<sp/>of<sp/>these<sp/>types<sp/>-<sp/>safe<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContextOptions&amp;<sp/>opt;</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData*<sp/><sp/><sp/>tc<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"></highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JUnitReporter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContextOptions&amp;<sp/>co)</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>xml(*co.cout)</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>opt(co)<sp/>{}</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"></highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>line(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>l)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt.no_line_numbers<sp/>?<sp/>0<sp/>:<sp/>l;<sp/>}</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"></highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WHAT<sp/>FOLLOWS<sp/>ARE<sp/>OVERRIDES<sp/>OF<sp/>THE<sp/>VIRTUAL<sp/>METHODS<sp/>OF<sp/>THE<sp/>REPORTER<sp/>INTERFACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5807"><highlight class="normal"></highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_query(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueryData&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeDeclaration();</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"></highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_run_start()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeDeclaration();</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"></highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_run_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestRunStats&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>.exe<sp/>extension<sp/>-<sp/>mainly<sp/>to<sp/>have<sp/>the<sp/>same<sp/>output<sp/>on<sp/>UNIX<sp/>and<sp/>Windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>binary_name<sp/>=<sp/>skipPathFromFilename(opt.binary_name.c_str());</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(binary_name.rfind(</highlight><highlight class="stringliteral">&quot;.exe&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binary_name<sp/>=<sp/>binary_name.substr(0,<sp/>binary_name.length()<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;testsuites&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;testsuite&quot;</highlight><highlight class="normal">).writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>binary_name)</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">,<sp/>testCaseData.totalErrors)</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,<sp/>testCaseData.totalFailures)</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,<sp/>p.numAsserts);</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.no_time_in_output<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>testCaseData.totalSeconds);</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal">,<sp/>JUnitTestCaseData::getCurrentTimestamp());</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.no_version<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;doctest_version&quot;</highlight><highlight class="normal">,<sp/>DOCTEST_VERSION_STR);</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"></highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>:<sp/>testCaseData.testcases)<sp/>{</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(</highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,<sp/>testCase.classname)</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>testCase.name);</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.no_time_in_output<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>testCase.time);</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>not<sp/>ideal,<sp/>but<sp/>it<sp/>should<sp/>be<sp/>enough<sp/>to<sp/>mimic<sp/>gtest&apos;s<sp/>junit<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;status&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;run&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"></highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>failure<sp/>:<sp/>testCase.failures)<sp/>{</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;failure&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">,<sp/>failure.message)</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/>failure.type)</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeText(failure.details,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"></highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>error<sp/>:<sp/>testCase.errors)<sp/>{</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">,<sp/>error.message)</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeText(error.details);</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"></highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"></highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_start(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;<sp/>in)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseData.add(skipPathFromFilename(in.m_file.c_str()),<sp/>in.m_name);</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer.start();</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"></highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_reenter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;<sp/>in)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseData.addTime(timer.getElapsedSeconds());</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deepestSubcaseStackNames.clear();</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"></highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer.start();</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseData.add(skipPathFromFilename(in.m_file.c_str()),<sp/>in.m_name);</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"></highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CurrentTestCaseStats&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseData.addTime(timer.getElapsedSeconds());</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deepestSubcaseStackNames.clear();</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"></highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_exception(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseException&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_LOCK_MUTEX(mutex)</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseData.addError(</highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">,<sp/>e.error_string.c_str());</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"></highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subcase_start(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SubcaseSignature&amp;<sp/>in)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deepestSubcaseStackNames.push_back(in.m_name);</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"></highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subcase_end()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"></highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_assert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertData&amp;<sp/>rb)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!rb.m_failed)<sp/></highlight><highlight class="comment">//<sp/>report<sp/>only<sp/>failures<sp/>&amp;<sp/>ignore<sp/>the<sp/>`success`<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"></highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_LOCK_MUTEX(mutex)</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"></highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>skipPathFromFilename(rb.m_file)<sp/>&lt;&lt;<sp/>(opt.gnu_file_line<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>line(rb.m_line)<sp/>&lt;&lt;<sp/>(opt.gnu_file_line<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;):&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"></highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fulltext_log_assert_to_stream(os,<sp/>rb);</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_contexts(os);</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseData.addFailure(rb.m_decomp.c_str(),<sp/>assertString(rb.m_at),<sp/>os.str());</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"></highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_message(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MessageData&amp;<sp/>mb)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mb.m_severity<sp/>&amp;<sp/>assertType::is_warn)<sp/></highlight><highlight class="comment">//<sp/>report<sp/>only<sp/>failures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"></highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_LOCK_MUTEX(mutex)</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"></highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>skipPathFromFilename(mb.m_file)<sp/>&lt;&lt;<sp/>(opt.gnu_file_line<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>line(mb.m_line)<sp/>&lt;&lt;<sp/>(opt.gnu_file_line<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;):&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"></highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>mb.m_string.c_str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_contexts(os);</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"></highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseData.addFailure(mb.m_string.c_str(),</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb.m_severity<sp/>&amp;<sp/>assertType::is_check<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;FAIL_CHECK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FAIL&quot;</highlight><highlight class="normal">,<sp/>os.str());</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"></highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_skipped(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"></highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_contexts(std::ostringstream&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_contexts<sp/>=<sp/>get_num_active_contexts();</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_contexts)<sp/>{</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>contexts<sp/>=<sp/>get_active_contexts();</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"></highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>logged:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_contexts;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>(i<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contexts[i]-&gt;stringify(&amp;s);</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"></highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_REGISTER_REPORTER(</highlight><highlight class="stringliteral">&quot;junit&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>JUnitReporter);</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"></highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Whitespace</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nrSpaces;</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Whitespace(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nr)</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>nrSpaces(nr)<sp/>{}</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"></highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>operator&lt;&lt;(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Whitespace&amp;<sp/>ws)<sp/>{</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ws.nrSpaces<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::setw(ws.nrSpaces)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"></highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ConsoleReporter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IReporter</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s;</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasLoggedCurrentTestStart;</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SubcaseSignature&gt;<sp/>subcasesStack;</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSubcaseLevel;</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DECLARE_MUTEX(mutex)</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"></highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>caching<sp/>pointers/references<sp/>to<sp/>objects<sp/>of<sp/>these<sp/>types<sp/>-<sp/>safe<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContextOptions&amp;<sp/>opt;</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData*<sp/><sp/><sp/>tc;</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"></highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConsoleReporter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContextOptions&amp;<sp/>co)</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>s(*co.cout)</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>opt(co)<sp/>{}</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"></highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConsoleReporter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContextOptions&amp;<sp/>co,<sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>&amp;<sp/>ostr)</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>s(ostr)</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>opt(co)<sp/>{}</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"></highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WHAT<sp/>FOLLOWS<sp/>ARE<sp/>HELPERS<sp/>USED<sp/>BY<sp/>THE<sp/>OVERRIDES<sp/>OF<sp/>THE<sp/>VIRTUAL<sp/>METHODS<sp/>OF<sp/>THE<sp/>INTERFACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5981"><highlight class="normal"></highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>separator_to_stream()<sp/>{</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Yellow</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;===============================================================================&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"></highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>getSuccessOrFailString(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success,<sp/>assertType::Enum<sp/>at,</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>success_str)<sp/>{</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(success)</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success_str;</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failureString(at);</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"></highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Color::Enum<sp/>getSuccessOrFailColor(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success,<sp/>assertType::Enum<sp/>at)<sp/>{</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success<sp/>?<sp/>Color::BrightGreen<sp/>:</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(at<sp/>&amp;<sp/>assertType::is_warn)<sp/>?<sp/>Color::Yellow<sp/>:<sp/>Color::Red;</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"></highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>successOrFailColoredStringToStream(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success,<sp/>assertType::Enum<sp/>at,</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>success_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SUCCESS&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>getSuccessOrFailColor(success,<sp/>at)</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>getSuccessOrFailString(success,<sp/>at,<sp/>success_str)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"></highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_contexts()<sp/>{</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_contexts<sp/>=<sp/>get_num_active_contexts();</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_contexts)<sp/>{</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>contexts<sp/>=<sp/>get_active_contexts();</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"></highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>logged:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_contexts;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>(i<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contexts[i]-&gt;stringify(&amp;s);</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"></highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"></highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>was<sp/>requested<sp/>to<sp/>be<sp/>made<sp/>virtual<sp/>so<sp/>users<sp/>could<sp/>override<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>file_line_to_stream(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::LightGrey<sp/>&lt;&lt;<sp/>skipPathFromFilename(file)<sp/>&lt;&lt;<sp/>(opt.gnu_file_line<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(opt.no_line_numbers<sp/>?<sp/>0<sp/>:<sp/>line)<sp/></highlight><highlight class="comment">//<sp/>0<sp/>or<sp/>the<sp/>real<sp/>num<sp/>depending<sp/>on<sp/>the<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(opt.gnu_file_line<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;):&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>tail;</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"></highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logTestStart()<sp/>{</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(hasLoggedCurrentTestStart)</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"></highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separator_to_stream();</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_line_to_stream(tc-&gt;m_file.c_str(),<sp/>tc-&gt;m_line,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tc-&gt;m_description)</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Yellow<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DESCRIPTION:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/>tc-&gt;m_description<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tc-&gt;m_test_suite<sp/>&amp;&amp;<sp/>tc-&gt;m_test_suite[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Yellow<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TEST<sp/>SUITE:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/>tc-&gt;m_test_suite<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strncmp(tc-&gt;m_name,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Scenario:&quot;</highlight><highlight class="normal">,<sp/>11)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Yellow<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TEST<sp/>CASE:<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/>tc-&gt;m_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"></highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>currentSubcaseLevel;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcasesStack[i].m_name[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>subcasesStack[i].m_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"></highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentSubcaseLevel<sp/>!=<sp/>subcasesStack.size())<sp/>{</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Yellow<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nDEEPEST<sp/>SUBCASE<sp/>STACK<sp/>REACHED<sp/>(DIFFERENT<sp/>FROM<sp/>THE<sp/>CURRENT<sp/>ONE):\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>subcasesStack.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(subcasesStack[i].m_name[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>subcasesStack[i].m_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"></highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6058"><highlight class="normal"></highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasLoggedCurrentTestStart<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"></highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printVersion()<sp/>{</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.no_version<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doctest<sp/>version<sp/>is<sp/>\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>DOCTEST_VERSION_STR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"></highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printIntro()<sp/>{</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.no_intro<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printVersion();</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;run<sp/>with<sp/>\&quot;--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;help\&quot;<sp/>for<sp/>options\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"></highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printHelp()<sp/>{</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizePrefixDisplay<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(DOCTEST_OPTIONS_PREFIX_DISPLAY));</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printVersion();</highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;boolean<sp/>values:<sp/>\&quot;1/on/yes/true\&quot;<sp/>or<sp/>\&quot;0/off/no/false\&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filter<sp/><sp/>values:<sp/>\&quot;str1,str2,str3\&quot;<sp/>(comma<sp/>separated<sp/>strings)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filters<sp/>use<sp/>wildcards<sp/>for<sp/>matching<sp/>strings\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;something<sp/>passes<sp/>a<sp/>filter<sp/>if<sp/>any<sp/>of<sp/>the<sp/>strings<sp/>in<sp/>a<sp/>filter<sp/>matches\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ALL<sp/>FLAGS,<sp/>OPTIONS<sp/>AND<sp/>FILTERS<sp/>ALSO<sp/>AVAILABLE<sp/>WITH<sp/>A<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>PREFIX!!!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6094"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Query<sp/>flags<sp/>-<sp/>the<sp/>program<sp/>quits<sp/>after<sp/>them.<sp/>Available:\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;?,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;help,<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*0)<sp/>&lt;&lt;<sp/><sp/></highlight><highlight class="stringliteral">&quot;prints<sp/>this<sp/>message\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;v,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;version<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;prints<sp/>the<sp/>version\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;c,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;count<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;prints<sp/>the<sp/>number<sp/>of<sp/>matching<sp/>tests\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;ltc,<sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;list-test-cases<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;lists<sp/>all<sp/>matching<sp/>tests<sp/>by<sp/>name\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;lts,<sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;list-test-suites<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;lists<sp/>all<sp/>matching<sp/>test<sp/>suites\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;lr,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;list-reporters<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;lists<sp/>all<sp/>registered<sp/>reporters\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>==================================================================================<sp/>&lt;&lt;<sp/>79</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>available<sp/>&lt;int&gt;/&lt;string&gt;<sp/>options/filters<sp/>are:\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;tc,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;test-case=&lt;filters&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filters<sp/><sp/><sp/><sp/><sp/>tests<sp/>by<sp/>their<sp/>name\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;tce,<sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;test-case-exclude=&lt;filters&gt;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filters<sp/>OUT<sp/>tests<sp/>by<sp/>their<sp/>name\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;sf,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;source-file=&lt;filters&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filters<sp/><sp/><sp/><sp/><sp/>tests<sp/>by<sp/>their<sp/>file\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;sfe,<sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;source-file-exclude=&lt;filters&gt;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filters<sp/>OUT<sp/>tests<sp/>by<sp/>their<sp/>file\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;ts,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;test-suite=&lt;filters&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filters<sp/><sp/><sp/><sp/><sp/>tests<sp/>by<sp/>their<sp/>test<sp/>suite\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;tse,<sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;test-suite-exclude=&lt;filters&gt;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filters<sp/>OUT<sp/>tests<sp/>by<sp/>their<sp/>test<sp/>suite\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;sc,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;subcase=&lt;filters&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filters<sp/><sp/><sp/><sp/><sp/>subcases<sp/>by<sp/>their<sp/>name\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;sce,<sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;subcase-exclude=&lt;filters&gt;<sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filters<sp/>OUT<sp/>subcases<sp/>by<sp/>their<sp/>name\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;r,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;reporters=&lt;filters&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;reporters<sp/>to<sp/>use<sp/>(console<sp/>is<sp/>default)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;o,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;out=&lt;string&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;output<sp/>filename\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;ob,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;order-by=&lt;string&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;how<sp/>the<sp/>tests<sp/>should<sp/>be<sp/>ordered\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;string&gt;<sp/>-<sp/>[file/suite/name/rand/none]\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;rs,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;rand-seed=&lt;int&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;seed<sp/>for<sp/>random<sp/>ordering\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;f,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;first=&lt;int&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>first<sp/>test<sp/>passing<sp/>the<sp/>filters<sp/>to\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute<sp/>-<sp/>for<sp/>range-based<sp/>execution\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;l,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;last=&lt;int&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>last<sp/>test<sp/>passing<sp/>the<sp/>filters<sp/>to\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute<sp/>-<sp/>for<sp/>range-based<sp/>execution\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;aa,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;abort-after=&lt;int&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;stop<sp/>after<sp/>&lt;int&gt;<sp/>failed<sp/>assertions\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;scfl,--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;subcase-filter-levels=&lt;int&gt;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;apply<sp/>filters<sp/>for<sp/>the<sp/>first<sp/>&lt;int&gt;<sp/>levels\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Bool<sp/>options<sp/>-<sp/>can<sp/>be<sp/>used<sp/>like<sp/>flags<sp/>and<sp/>true<sp/>is<sp/>assumed.<sp/>Available:\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;s,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;success=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;include<sp/>successful<sp/>assertions<sp/>in<sp/>output\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;cs,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;case-sensitive=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;filters<sp/>being<sp/>treated<sp/>as<sp/>case<sp/>sensitive\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;e,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;exit=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;exits<sp/>after<sp/>the<sp/>tests<sp/>finish\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;d,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;duration=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;prints<sp/>the<sp/>time<sp/>duration<sp/>of<sp/>each<sp/>test\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;m,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;minimal=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;minimal<sp/>console<sp/>output<sp/>(only<sp/>failures)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;q,<sp/><sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;quiet=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>console<sp/>output\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;nt,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;no-throw=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;skips<sp/>exceptions-related<sp/>assert<sp/>checks\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;ne,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;no-exitcode=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;returns<sp/>(or<sp/>exits)<sp/>always<sp/>with<sp/>success\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;nr,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;no-run=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;skips<sp/>all<sp/>runtime<sp/>doctest<sp/>operations\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;ni,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;no-intro=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;omit<sp/>the<sp/>framework<sp/>intro<sp/>in<sp/>the<sp/>output\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;nv,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;no-version=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;omit<sp/>the<sp/>framework<sp/>version<sp/>in<sp/>the<sp/>output\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;nc,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;no-colors=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;disables<sp/>colors<sp/>in<sp/>output\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;fc,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;force-colors=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;use<sp/>colors<sp/>even<sp/>when<sp/>not<sp/>in<sp/>a<sp/>tty\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;nb,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;no-breaks=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;disables<sp/>breakpoints<sp/>in<sp/>debuggers\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;ns,<sp/><sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;no-skip=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;don&apos;t<sp/>skip<sp/>test<sp/>cases<sp/>marked<sp/>as<sp/>skip\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;gfl,<sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;gnu-file-line=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:n:<sp/>vs<sp/>(n):<sp/>for<sp/>line<sp/>numbers<sp/>in<sp/>output\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;npf,<sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;no-path-filenames=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;only<sp/>filenames<sp/>and<sp/>no<sp/>paths<sp/>in<sp/>output\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;nln,<sp/>--&quot;</highlight><highlight class="normal"><sp/>DOCTEST_OPTIONS_PREFIX_DISPLAY<sp/></highlight><highlight class="stringliteral">&quot;no-line-numbers=&lt;bool&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Whitespace(sizePrefixDisplay*1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0<sp/>instead<sp/>of<sp/>real<sp/>line<sp/>numbers<sp/>in<sp/>output\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>==================================================================================<sp/>&lt;&lt;<sp/>79</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6188"><highlight class="normal"></highlight></codeline>
<codeline lineno="6189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;for<sp/>more<sp/>information<sp/>visit<sp/>the<sp/>project<sp/>documentation\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"></highlight></codeline>
<codeline lineno="6193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printRegisteredReporters()<sp/>{</highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printVersion();</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>printReporters<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reporterMap&amp;<sp/>reporters,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(reporters.size())<sp/>{</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;listing<sp/>all<sp/>registered<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>reporters)</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;priority:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(5)<sp/>&lt;&lt;<sp/>curr.first.first</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>curr.first.second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printReporters(getListeners(),<sp/></highlight><highlight class="stringliteral">&quot;listeners&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printReporters(getReporters(),<sp/></highlight><highlight class="stringliteral">&quot;reporters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"></highlight></codeline>
<codeline lineno="6207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WHAT<sp/>FOLLOWS<sp/>ARE<sp/>OVERRIDES<sp/>OF<sp/>THE<sp/>VIRTUAL<sp/>METHODS<sp/>OF<sp/>THE<sp/>REPORTER<sp/>INTERFACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=========================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6210"><highlight class="normal"></highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_query(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueryData&amp;<sp/>in)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.version)<sp/>{</highlight></codeline>
<codeline lineno="6213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printVersion();</highlight></codeline>
<codeline lineno="6214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.help)<sp/>{</highlight></codeline>
<codeline lineno="6215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printHelp();</highlight></codeline>
<codeline lineno="6216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.list_reporters)<sp/>{</highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printRegisteredReporters();</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.count<sp/>||<sp/>opt.list_test_cases)<sp/>{</highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.list_test_cases)<sp/>{</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None</highlight></codeline>
<codeline lineno="6221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;listing<sp/>all<sp/>test<sp/>case<sp/>names\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separator_to_stream();</highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"></highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>in.num_data;<sp/>++i)</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/>in.data[i]-&gt;m_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6227"><highlight class="normal"></highlight></codeline>
<codeline lineno="6228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separator_to_stream();</highlight></codeline>
<codeline lineno="6229"><highlight class="normal"></highlight></codeline>
<codeline lineno="6230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None</highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unskipped<sp/>test<sp/>cases<sp/>passing<sp/>the<sp/>current<sp/>filters:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>g_cs-&gt;numTestCasesPassingFilters<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"></highlight></codeline>
<codeline lineno="6234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.list_test_suites)<sp/>{</highlight></codeline>
<codeline lineno="6235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;listing<sp/>all<sp/>test<sp/>suites\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separator_to_stream();</highlight></codeline>
<codeline lineno="6237"><highlight class="normal"></highlight></codeline>
<codeline lineno="6238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>in.num_data;<sp/>++i)</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/>in.data[i]-&gt;m_test_suite<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6240"><highlight class="normal"></highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separator_to_stream();</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"></highlight></codeline>
<codeline lineno="6243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None</highlight></codeline>
<codeline lineno="6244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unskipped<sp/>test<sp/>cases<sp/>passing<sp/>the<sp/>current<sp/>filters:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>g_cs-&gt;numTestCasesPassingFilters<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>suites<sp/>with<sp/>unskipped<sp/>test<sp/>cases<sp/>passing<sp/>the<sp/>current<sp/>filters:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>g_cs-&gt;numTestSuitesPassingFilters<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"></highlight></codeline>
<codeline lineno="6252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_run_start()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!opt.minimal)</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printIntro();</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"></highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_run_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestRunStats&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.minimal<sp/>&amp;&amp;<sp/>p.numTestCasesFailed<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="6259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6260"><highlight class="normal"></highlight></codeline>
<codeline lineno="6261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separator_to_stream();</highlight></codeline>
<codeline lineno="6262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>std::dec;</highlight></codeline>
<codeline lineno="6263"><highlight class="normal"></highlight></codeline>
<codeline lineno="6264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>totwidth<sp/>=<sp/>int(std::ceil(log10(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::max(p.numTestCasesPassingFilters,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p.numAsserts)))<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="6265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>passwidth<sp/>=<sp/>int(std::ceil(log10(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::max(p.numTestCasesPassingFilters<sp/>-<sp/>p.numTestCasesFailed,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p.numAsserts<sp/>-<sp/>p.numAssertsFailed)))<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="6266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>failwidth<sp/>=<sp/>int(std::ceil(log10(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::max(p.numTestCasesFailed,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p.numAssertsFailed)))<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>anythingFailed<sp/>=<sp/>p.numTestCasesFailed<sp/>&gt;<sp/>0<sp/>||<sp/>p.numAssertsFailed<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>cases:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(totwidth)</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>p.numTestCasesPassingFilters<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>((p.numTestCasesPassingFilters<sp/>==<sp/>0<sp/>||<sp/>anythingFailed)<sp/>?<sp/>Color::None<sp/>:</highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Color::Green)</highlight></codeline>
<codeline lineno="6272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(passwidth)<sp/>&lt;&lt;<sp/>p.numTestCasesPassingFilters<sp/>-<sp/>p.numTestCasesFailed<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>passed&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(p.numTestCasesFailed<sp/>&gt;<sp/>0<sp/>?<sp/>Color::Red<sp/>:<sp/>Color::None)</highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(failwidth)<sp/>&lt;&lt;<sp/>p.numTestCasesFailed<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>failed&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.no_skipped_summary<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSkipped<sp/>=<sp/>p.numTestCases<sp/>-<sp/>p.numTestCasesPassingFilters;</highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(numSkipped<sp/>==<sp/>0<sp/>?<sp/>Color::None<sp/>:<sp/>Color::Yellow)<sp/>&lt;&lt;<sp/>numSkipped</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>skipped&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;assertions:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(totwidth)</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>p.numAsserts<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>((p.numAsserts<sp/>==<sp/>0<sp/>||<sp/>anythingFailed)<sp/>?<sp/>Color::None<sp/>:<sp/>Color::Green)</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(passwidth)<sp/>&lt;&lt;<sp/>(p.numAsserts<sp/>-<sp/>p.numAssertsFailed)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>passed&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(p.numAssertsFailed<sp/>&gt;<sp/>0<sp/>?<sp/>Color::Red<sp/>:<sp/>Color::None)<sp/>&lt;&lt;<sp/>std::setw(failwidth)</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>p.numAssertsFailed<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>failed&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[doctest]<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Status:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(p.numTestCasesFailed<sp/>&gt;<sp/>0<sp/>?<sp/>Color::Red<sp/>:<sp/>Color::Green)</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>((p.numTestCasesFailed<sp/>&gt;<sp/>0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;FAILURE!&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;SUCCESS!&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"></highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_start(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;<sp/>in)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasLoggedCurrentTestStart<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;in;</highlight></codeline>
<codeline lineno="6295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcasesStack.clear();</highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentSubcaseLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6298"><highlight class="normal"></highlight></codeline>
<codeline lineno="6299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_reenter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcasesStack.clear();</highlight></codeline>
<codeline lineno="6301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6302"><highlight class="normal"></highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CurrentTestCaseStats&amp;<sp/>st)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tc-&gt;m_no_output)</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6306"><highlight class="normal"></highlight></codeline>
<codeline lineno="6307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>log<sp/>the<sp/>preamble<sp/>of<sp/>the<sp/>test<sp/>case<sp/>only<sp/>if<sp/>there<sp/>is<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>to<sp/>print<sp/>-<sp/>something<sp/>other<sp/>than<sp/>that<sp/>an<sp/>assert<sp/>has<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.duration<sp/>||</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(st.failure_flags<sp/>&amp;&amp;<sp/>st.failure_flags<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TestCaseFailureReason::AssertFailure)))</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logTestStart();</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"></highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(opt.duration)</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/>std::setprecision(6)<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>st.seconds</highlight></codeline>
<codeline lineno="6315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>s:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tc-&gt;m_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"></highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st.failure_flags<sp/>&amp;<sp/>TestCaseFailureReason::Timeout)</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Red<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>case<sp/>exceeded<sp/>time<sp/>limit<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setprecision(6)</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>tc-&gt;m_timeout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6320"><highlight class="normal"></highlight></codeline>
<codeline lineno="6321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st.failure_flags<sp/>&amp;<sp/>TestCaseFailureReason::ShouldHaveFailedButDidnt)<sp/>{</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Red<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>have<sp/>failed<sp/>but<sp/>didn&apos;t!<sp/>Marking<sp/>it<sp/>as<sp/>failed!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st.failure_flags<sp/>&amp;<sp/>TestCaseFailureReason::ShouldHaveFailedAndDid)<sp/>{</highlight></codeline>
<codeline lineno="6324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Yellow<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>as<sp/>expected<sp/>so<sp/>marking<sp/>it<sp/>as<sp/>not<sp/>failed\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st.failure_flags<sp/>&amp;<sp/>TestCaseFailureReason::CouldHaveFailedAndDid)<sp/>{</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Yellow<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Allowed<sp/>to<sp/>fail<sp/>so<sp/>marking<sp/>it<sp/>as<sp/>not<sp/>failed\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st.failure_flags<sp/>&amp;<sp/>TestCaseFailureReason::DidntFailExactlyNumTimes)<sp/>{</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Red<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Didn&apos;t<sp/>fail<sp/>exactly<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tc-&gt;m_expected_failures</highlight></codeline>
<codeline lineno="6329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>times<sp/>so<sp/>marking<sp/>it<sp/>as<sp/>failed!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st.failure_flags<sp/>&amp;<sp/>TestCaseFailureReason::FailedExactlyNumTimes)<sp/>{</highlight></codeline>
<codeline lineno="6331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Yellow<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>exactly<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tc-&gt;m_expected_failures</highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>times<sp/>as<sp/>expected<sp/>so<sp/>marking<sp/>it<sp/>as<sp/>not<sp/>failed!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st.failure_flags<sp/>&amp;<sp/>TestCaseFailureReason::TooManyFailedAsserts)<sp/>{</highlight></codeline>
<codeline lineno="6335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Red<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Aborting<sp/>-<sp/>too<sp/>many<sp/>failed<sp/>asserts!\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::None;<sp/></highlight><highlight class="comment">//<sp/>lgtm<sp/>[cpp/useless-expression]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6339"><highlight class="normal"></highlight></codeline>
<codeline lineno="6340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_exception(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseException&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_LOCK_MUTEX(mutex)</highlight></codeline>
<codeline lineno="6342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tc-&gt;m_no_output)</highlight></codeline>
<codeline lineno="6343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6344"><highlight class="normal"></highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logTestStart();</highlight></codeline>
<codeline lineno="6346"><highlight class="normal"></highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_line_to_stream(tc-&gt;m_file.c_str(),<sp/>tc-&gt;m_line,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>successOrFailColoredStringToStream(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>e.is_crash<sp/>?<sp/>assertType::is_require<sp/>:</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertType::is_check);</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::Red<sp/>&lt;&lt;<sp/>(e.is_crash<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>case<sp/>CRASHED:<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>case<sp/>THREW<sp/>exception:<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Color::Cyan<sp/>&lt;&lt;<sp/>e.error_string<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"></highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_stringified_contexts<sp/>=<sp/>get_num_stringified_contexts();</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_stringified_contexts)<sp/>{</highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stringified_contexts<sp/>=<sp/>get_stringified_contexts();</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>logged:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>num_stringified_contexts;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>(i<sp/>==<sp/>num_stringified_contexts<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>stringified_contexts[i<sp/>-<sp/>1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Color::None;</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6364"><highlight class="normal"></highlight></codeline>
<codeline lineno="6365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subcase_start(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SubcaseSignature&amp;<sp/>subc)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subcasesStack.push_back(subc);</highlight></codeline>
<codeline lineno="6367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++currentSubcaseLevel;</highlight></codeline>
<codeline lineno="6368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasLoggedCurrentTestStart<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"></highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subcase_end()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--currentSubcaseLevel;</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hasLoggedCurrentTestStart<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"></highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_assert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertData&amp;<sp/>rb)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((!rb.m_failed<sp/>&amp;&amp;<sp/>!opt.success)<sp/>||<sp/>tc-&gt;m_no_output)</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"></highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_LOCK_MUTEX(mutex)</highlight></codeline>
<codeline lineno="6381"><highlight class="normal"></highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logTestStart();</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"></highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_line_to_stream(rb.m_file,<sp/>rb.m_line,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>successOrFailColoredStringToStream(!rb.m_failed,<sp/>rb.m_at);</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"></highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fulltext_log_assert_to_stream(s,<sp/>rb);</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"></highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_contexts();</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"></highlight></codeline>
<codeline lineno="6392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>log_message(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MessageData&amp;<sp/>mb)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tc-&gt;m_no_output)</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"></highlight></codeline>
<codeline lineno="6396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_LOCK_MUTEX(mutex)</highlight></codeline>
<codeline lineno="6397"><highlight class="normal"></highlight></codeline>
<codeline lineno="6398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logTestStart();</highlight></codeline>
<codeline lineno="6399"><highlight class="normal"></highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_line_to_stream(mb.m_file,<sp/>mb.m_line,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>getSuccessOrFailColor(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mb.m_severity)</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>getSuccessOrFailString(mb.m_severity<sp/>&amp;<sp/>assertType::is_warn,<sp/>mb.m_severity,</highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MESSAGE&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>Color::None<sp/>&lt;&lt;<sp/>mb.m_string<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_contexts();</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"></highlight></codeline>
<codeline lineno="6408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_case_skipped(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"></highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_REGISTER_REPORTER(</highlight><highlight class="stringliteral">&quot;console&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>ConsoleReporter);</highlight></codeline>
<codeline lineno="6412"><highlight class="normal"></highlight></codeline>
<codeline lineno="6413"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DebugOutputWindowReporter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ConsoleReporter</highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_THREAD_LOCAL<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"></highlight></codeline>
<codeline lineno="6418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DebugOutputWindowReporter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ContextOptions&amp;<sp/>co)</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ConsoleReporter(co,<sp/>oss)<sp/>{}</highlight></codeline>
<codeline lineno="6420"><highlight class="normal"></highlight></codeline>
<codeline lineno="6421"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(func,<sp/>type,<sp/>arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>func(type<sp/>arg)<sp/>override<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>with_col<sp/>=<sp/>g_no_colors;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_no_colors<sp/><sp/><sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConsoleReporter::func(arg);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6426"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(oss.tellp()<sp/>!=<sp/>std::streampos{})<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_OUTPUT_DEBUG_STRING(oss.str().c_str());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss.str(&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_no_colors<sp/>=<sp/>with_col;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6432"><highlight class="normal"></highlight></codeline>
<codeline lineno="6433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_start,<sp/>DOCTEST_EMPTY,<sp/>DOCTEST_EMPTY)</highlight></codeline>
<codeline lineno="6434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestRunStats&amp;,<sp/>in)</highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;,<sp/>in)</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_reenter,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;,<sp/>in)</highlight></codeline>
<codeline lineno="6437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CurrentTestCaseStats&amp;,<sp/>in)</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_exception,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseException&amp;,<sp/>in)</highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SubcaseSignature&amp;,<sp/>in)</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_end,<sp/>DOCTEST_EMPTY,<sp/>DOCTEST_EMPTY)</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_assert,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertData&amp;,<sp/>in)</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MessageData&amp;,<sp/>in)</highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_skipped,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCaseData&amp;,<sp/>in)</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6445"><highlight class="normal"></highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_THREAD_LOCAL<sp/>std::ostringstream<sp/>DebugOutputWindowReporter::oss;</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6448"><highlight class="normal"></highlight></codeline>
<codeline lineno="6449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>implementation<sp/>of<sp/>parseOption()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parseOptionImpl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pattern,<sp/>String*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>going<sp/>from<sp/>the<sp/>end<sp/>to<sp/>the<sp/>beginning<sp/>and<sp/>stopping<sp/>on<sp/>the<sp/>first<sp/>occurrence<sp/>from<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>argc;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>i<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>std::strstr(argv[index],<sp/>pattern);</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(temp<sp/>&amp;&amp;<sp/>(value<sp/>||<sp/>strlen(temp)<sp/>==<sp/>strlen(pattern)))<sp/>{<sp/></highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eliminate<sp/>matches<sp/>in<sp/>which<sp/>the<sp/>chars<sp/>before<sp/>the<sp/>option<sp/>are<sp/>not<sp/>&apos;-&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>noBadCharsFound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>curr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>argv[index];</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(curr<sp/>!=<sp/>temp)<sp/>{</highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*curr++<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noBadCharsFound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(noBadCharsFound<sp/>&amp;&amp;<sp/>argv[index][0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value)<sp/>{</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parsing<sp/>the<sp/>value<sp/>of<sp/>an<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>+=<sp/>strlen(pattern);</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(temp);</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len)<sp/>{</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>a<sp/>flag<sp/>-<sp/>no<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"></highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parses<sp/>an<sp/>option<sp/>and<sp/>returns<sp/>the<sp/>string<sp/>after<sp/>the<sp/>&apos;=&apos;<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parseOption(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pattern,<sp/>String*<sp/>value<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>defaultVal<sp/>=<sp/>String())<sp/>{</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value)</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>defaultVal;</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>(normally<sp/>3<sp/>for<sp/>&quot;dt-&quot;)<sp/>to<sp/>skip<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parseOptionImpl(argc,<sp/>argv,<sp/>pattern<sp/>+<sp/>strlen(DOCTEST_CONFIG_OPTIONS_PREFIX),<sp/>value))</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parseOptionImpl(argc,<sp/>argv,<sp/>pattern,<sp/>value);</highlight></codeline>
<codeline lineno="6495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6496"><highlight class="normal"></highlight></codeline>
<codeline lineno="6497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>locates<sp/>a<sp/>flag<sp/>on<sp/>the<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parseFlag(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pattern)<sp/>{</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parseOption(argc,<sp/>argv,<sp/>pattern);</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"></highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parses<sp/>a<sp/>comma<sp/>separated<sp/>list<sp/>of<sp/>words<sp/>after<sp/>a<sp/>pattern<sp/>in<sp/>one<sp/>of<sp/>the<sp/>arguments<sp/>in<sp/>argv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parseCommaSepArgs(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pattern,</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;String&gt;&amp;<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>filtersString;</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parseOption(argc,<sp/>argv,<sp/>pattern,<sp/>&amp;filtersString))<sp/>{</highlight></codeline>
<codeline lineno="6507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tokenize<sp/>with<sp/>&quot;,&quot;<sp/>as<sp/>a<sp/>separator,<sp/>unless<sp/>escaped<sp/>with<sp/>backslash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>s;</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>flush<sp/>=<sp/>[&amp;s,<sp/>&amp;res]()<sp/>{</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/>s.str();</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.c_str());</highlight></codeline>
<codeline lineno="6513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6516"><highlight class="normal"></highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>seenBackslash<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>current<sp/>=<sp/>filtersString.c_str();</highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>current<sp/>+<sp/>strlen(current);</highlight></codeline>
<codeline lineno="6520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(current<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>character<sp/>=<sp/>*current++;</highlight></codeline>
<codeline lineno="6522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seenBackslash)<sp/>{</highlight></codeline>
<codeline lineno="6523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seenBackslash<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(character<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>||<sp/>character<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.put(character);</highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.put(</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(character<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seenBackslash<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(character<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush();</highlight></codeline>
<codeline lineno="6534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.put(character);</highlight></codeline>
<codeline lineno="6536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6538"><highlight class="normal"></highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(seenBackslash)<sp/>{</highlight></codeline>
<codeline lineno="6540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.put(</highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush();</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6547"><highlight class="normal"></highlight></codeline>
<codeline lineno="6548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>optionType</highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option_bool,</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option_int</highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"></highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parses<sp/>an<sp/>int/bool<sp/>option<sp/>from<sp/>the<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>parseIntOption(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pattern,<sp/>optionType<sp/>type,</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>parsedValue;</highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!parseOption(argc,<sp/>argv,<sp/>pattern,<sp/>&amp;parsedValue))</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"></highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type)<sp/>{</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>change<sp/>this<sp/>to<sp/>use<sp/>std::stoi<sp/>or<sp/>something<sp/>else!<sp/>currently<sp/>it<sp/>uses<sp/>undefined<sp/>behavior<sp/>-<sp/>assumes<sp/>&apos;0&apos;<sp/>on<sp/>failed<sp/>parse...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>theInt<sp/>=<sp/>std::atoi(parsedValue.c_str());</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(theInt<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>theInt;<sp/></highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>positive[][5]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>5<sp/>-<sp/>strlen(&quot;true&quot;)<sp/>+<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>negative[][6]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;off&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal"><sp/>};<sp/></highlight><highlight class="comment">//<sp/>6<sp/>-<sp/>strlen(&quot;false&quot;)<sp/>+<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6573"><highlight class="normal"></highlight></codeline>
<codeline lineno="6574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>value<sp/>matches<sp/>any<sp/>of<sp/>the<sp/>positive/negative<sp/>possibilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parsedValue.compare(positive[i],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>1;<sp/></highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parsedValue.compare(negative[i],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6588"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6589"><highlight class="normal"></highlight></codeline>
<codeline lineno="6590"><highlight class="normal">Context::Context(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv)</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>p(new<sp/>detail::ContextState)<sp/>{</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/><sp/><sp/>parseArgs(argc,<sp/>argv,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(argc)</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;binary_name<sp/>=<sp/>argv[0];</highlight></codeline>
<codeline lineno="6595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"></highlight></codeline>
<codeline lineno="6597"><highlight class="normal">Context::~Context()<sp/>{</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g_cs<sp/>==<sp/>p)</highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="6601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6602"><highlight class="normal"></highlight></codeline>
<codeline lineno="6603"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::applyCommandLine(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/><sp/><sp/>parseArgs(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(argc)</highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;binary_name<sp/>=<sp/>argv[0];</highlight></codeline>
<codeline lineno="6607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6608"><highlight class="normal"></highlight></codeline>
<codeline lineno="6609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parses<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6610"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::parseArgs(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>withDefaults)<sp/>{</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="6612"><highlight class="normal"></highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;source-file=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[0]);</highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;sf=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[0]);</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;source-file-exclude=&quot;</highlight><highlight class="normal">,p-&gt;filters[1]);</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;sfe=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[1]);</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;test-suite=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[2]);</highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;ts=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[2]);</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;test-suite-exclude=&quot;</highlight><highlight class="normal">,<sp/>p-&gt;filters[3]);</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;tse=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[3]);</highlight></codeline>
<codeline lineno="6622"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;test-case=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[4]);</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;tc=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[4]);</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;test-case-exclude=&quot;</highlight><highlight class="normal">,<sp/><sp/>p-&gt;filters[5]);</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;tce=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[5]);</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;subcase=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[6]);</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;sc=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[6]);</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;subcase-exclude=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/>p-&gt;filters[7]);</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;sce=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[7]);</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;reporters=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[8]);</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/><sp/><sp/>parseCommaSepArgs(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;r=&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[8]);</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6633"><highlight class="normal"></highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>intRes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>strRes;</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"></highlight></codeline>
<codeline lineno="6637"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(name,<sp/>sname,<sp/>var,<sp/>default)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6638"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(parseIntOption(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/>name<sp/>&quot;=&quot;</highlight><highlight class="normal">,<sp/>option_bool,<sp/>intRes)<sp/>||<sp/><sp/>\</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseIntOption(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/>sname<sp/>&quot;=&quot;,<sp/>option_bool,<sp/>intRes))<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;var<sp/>=<sp/>static_cast&lt;bool&gt;(intRes);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if(parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/>name)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/>sname))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;var<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if(withDefaults)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6645"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;var<sp/>=<sp/>default</highlight></codeline>
<codeline lineno="6646"><highlight class="normal"></highlight></codeline>
<codeline lineno="6647"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_PARSE_INT_OPTION(name,<sp/>sname,<sp/>var,<sp/>default)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(parseIntOption(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/>name<sp/>&quot;=&quot;</highlight><highlight class="normal">,<sp/>option_int,<sp/>intRes)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseIntOption(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/>sname<sp/>&quot;=&quot;,<sp/>option_int,<sp/>intRes))<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;var<sp/>=<sp/>intRes;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6651"><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if(withDefaults)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;var<sp/>=<sp/>default</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"></highlight></codeline>
<codeline lineno="6654"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOCTEST_PARSE_STR_OPTION(name,<sp/>sname,<sp/>var,<sp/>default)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(parseOption(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/>name<sp/>&quot;=&quot;</highlight><highlight class="normal">,<sp/>&amp;strRes,<sp/>default)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseOption(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/>sname<sp/>&quot;=&quot;,<sp/>&amp;strRes,<sp/>default)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>withDefaults)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;var<sp/>=<sp/>strRes</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"></highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_STR_OPTION(</highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;o&quot;</highlight><highlight class="normal">,<sp/>out,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_STR_OPTION(</highlight><highlight class="stringliteral">&quot;order-by&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ob&quot;</highlight><highlight class="normal">,<sp/>order_by,<sp/></highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_INT_OPTION(</highlight><highlight class="stringliteral">&quot;rand-seed&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rs&quot;</highlight><highlight class="normal">,<sp/>rand_seed,<sp/>0);</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"></highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_INT_OPTION(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">,<sp/>first,<sp/>0);</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_INT_OPTION(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;l&quot;</highlight><highlight class="normal">,<sp/>last,<sp/>UINT_MAX);</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"></highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_INT_OPTION(</highlight><highlight class="stringliteral">&quot;abort-after&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;aa&quot;</highlight><highlight class="normal">,<sp/>abort_after,<sp/>0);</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_INT_OPTION(</highlight><highlight class="stringliteral">&quot;subcase-filter-levels&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;scfl&quot;</highlight><highlight class="normal">,<sp/>subcase_filter_levels,<sp/>INT_MAX);</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"></highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;success&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/>success,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6672"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;case-sensitive&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cs&quot;</highlight><highlight class="normal">,<sp/>case_sensitive,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;exit&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/>exit,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6674"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;duration&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/>duration,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6675"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;minimal&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">,<sp/>minimal,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;quiet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;q&quot;</highlight><highlight class="normal">,<sp/>quiet,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-throw&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;nt&quot;</highlight><highlight class="normal">,<sp/>no_throw,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6678"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-exitcode&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ne&quot;</highlight><highlight class="normal">,<sp/>no_exitcode,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-run&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;nr&quot;</highlight><highlight class="normal">,<sp/>no_run,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-intro&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ni&quot;</highlight><highlight class="normal">,<sp/>no_intro,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6681"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-version&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;nv&quot;</highlight><highlight class="normal">,<sp/>no_version,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6682"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-colors&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;nc&quot;</highlight><highlight class="normal">,<sp/>no_colors,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6683"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;force-colors&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;fc&quot;</highlight><highlight class="normal">,<sp/>force_colors,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6684"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-breaks&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;nb&quot;</highlight><highlight class="normal">,<sp/>no_breaks,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6685"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-skip&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ns&quot;</highlight><highlight class="normal">,<sp/>no_skip,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;gnu-file-line&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gfl&quot;</highlight><highlight class="normal">,<sp/>gnu_file_line,<sp/>!</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(DOCTEST_MSVC));</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-path-filenames&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;npf&quot;</highlight><highlight class="normal">,<sp/>no_path_in_filenames,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-line-numbers&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;nln&quot;</highlight><highlight class="normal">,<sp/>no_line_numbers,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-debug-output&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ndo&quot;</highlight><highlight class="normal">,<sp/>no_debug_output,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-skipped-summary&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;nss&quot;</highlight><highlight class="normal">,<sp/>no_skipped_summary,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCTEST_PARSE_AS_BOOL_OR_FLAG(</highlight><highlight class="stringliteral">&quot;no-time-in-output&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ntio&quot;</highlight><highlight class="normal">,<sp/>no_time_in_output,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6693"><highlight class="normal"></highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(withDefaults)<sp/>{</highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;help<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;version<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;count<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;list_test_cases<sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;list_test_suites<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;list_reporters<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;help<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;exit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;version<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;exit<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;count<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;exit<sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;list-test-cases&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;ltc&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;list_test_cases<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;exit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;list-test-suites&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="6724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;lts&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;list_test_suites<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;exit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;list-reporters&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseFlag(argc,<sp/>argv,<sp/>DOCTEST_CONFIG_OPTIONS_PREFIX<sp/></highlight><highlight class="stringliteral">&quot;lr&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="6730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;list_reporters<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;exit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"></highlight></codeline>
<codeline lineno="6735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>add<sp/>procedurally<sp/>to<sp/>the<sp/>filters<sp/>from<sp/>the<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6736"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::addFilter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filter,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value)<sp/>{<sp/>setOption(filter,<sp/>value);<sp/>}</highlight></codeline>
<codeline lineno="6737"><highlight class="normal"></highlight></codeline>
<codeline lineno="6738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>clear<sp/>all<sp/>filters<sp/>from<sp/>the<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6739"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::clearFilters()<sp/>{</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>p-&gt;filters)</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr.clear();</highlight></codeline>
<codeline lineno="6742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"></highlight></codeline>
<codeline lineno="6744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>override<sp/>procedurally<sp/>the<sp/>bool<sp/>options<sp/>from<sp/>the<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6745"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setOption(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>option,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/>setOption(option,<sp/>value<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"></highlight></codeline>
<codeline lineno="6749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>override<sp/>procedurally<sp/>the<sp/>int<sp/>options<sp/>from<sp/>the<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6750"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setOption(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>option,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/>setOption(option,<sp/>toString(value).c_str());</highlight></codeline>
<codeline lineno="6752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6753"><highlight class="normal"></highlight></codeline>
<codeline lineno="6754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>override<sp/>procedurally<sp/>the<sp/>string<sp/>options<sp/>from<sp/>the<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6755"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setOption(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>option,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>argv<sp/><sp/><sp/>=<sp/>String(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">)<sp/>+<sp/>option<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>+<sp/>value;</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lvalue<sp/>=<sp/>argv.c_str();</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/>parseArgs(1,<sp/>&amp;lvalue);</highlight></codeline>
<codeline lineno="6759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"></highlight></codeline>
<codeline lineno="6761"><highlight class="normal"></highlight><highlight class="comment">//<sp/>users<sp/>should<sp/>query<sp/>this<sp/>in<sp/>their<sp/>main()<sp/>and<sp/>exit<sp/>the<sp/>program<sp/>if<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6762"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Context::shouldExit()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;exit;<sp/>}</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"></highlight></codeline>
<codeline lineno="6764"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setAsDefaultForAssertsOutOfTestCases()<sp/>{<sp/>g_cs<sp/>=<sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="6765"><highlight class="normal"></highlight></codeline>
<codeline lineno="6766"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setAssertHandler(detail::assert_handler<sp/>ah)<sp/>{<sp/>p-&gt;ah<sp/>=<sp/>ah;<sp/>}</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"></highlight></codeline>
<codeline lineno="6768"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Context::setCout(<ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref>*<sp/>out)<sp/>{<sp/>p-&gt;cout<sp/>=<sp/>out;<sp/>}</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"></highlight></codeline>
<codeline lineno="6770"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DiscardOStream<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classstd_1_1basic__ostream" kindref="compound">std::ostream</ref></highlight></codeline>
<codeline lineno="6771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6772"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::streambuf</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allowing<sp/>some<sp/>buffering<sp/>decreases<sp/>the<sp/>amount<sp/>of<sp/>calls<sp/>to<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[1024];</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"></highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::streamsize<sp/>xsputn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>char_type*,<sp/>std::streamsize<sp/>count)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;<sp/>}</highlight></codeline>
<codeline lineno="6781"><highlight class="normal"></highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_type<sp/>overflow(int_type<sp/>ch)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setp(std::begin(buf),<sp/>std::end(buf));</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traits_type::not_eof(ch);</highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>discardBuf;</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"></highlight></codeline>
<codeline lineno="6788"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/><sp/><sp/>DiscardOStream()</highlight></codeline>
<codeline lineno="6790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::<ref refid="classstd_1_1basic__ostream" kindref="compound">ostream</ref>(&amp;discardBuf)<sp/>{}</highlight></codeline>
<codeline lineno="6791"><highlight class="normal">}<sp/>discardOut;</highlight></codeline>
<codeline lineno="6792"><highlight class="normal"></highlight></codeline>
<codeline lineno="6793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>main<sp/>function<sp/>that<sp/>does<sp/>all<sp/>the<sp/>filtering<sp/>and<sp/>test<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6794"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Context::run()<sp/>{</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">detail;</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"></highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>the<sp/>old<sp/>context<sp/>state<sp/>in<sp/>case<sp/>such<sp/>was<sp/>setup<sp/>-<sp/>for<sp/>using<sp/>asserts<sp/>out<sp/>of<sp/>a<sp/>testing<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old_cs<sp/>=<sp/>g_cs;</highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>current<sp/>contest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/><sp/><sp/>g_cs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/><sp/><sp/>is_running_in_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"></highlight></codeline>
<codeline lineno="6803"><highlight class="normal"><sp/><sp/><sp/><sp/>g_no_colors<sp/>=<sp/>p-&gt;no_colors;</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;resetRunData();</highlight></codeline>
<codeline lineno="6805"><highlight class="normal"></highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fstream<sp/>fstr;</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;cout<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;quiet)<sp/>{</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;cout<sp/>=<sp/>&amp;discardOut;</highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;out.size())<sp/>{</highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>file<sp/>if<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fstr.open(p-&gt;out.c_str(),<sp/>std::fstream::out);</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;cout<sp/>=<sp/>&amp;fstr;</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stdout<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;cout<sp/>=<sp/>&amp;std::cout;</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"></highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/>FatalConditionHandler::allocateAltStackMem();</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"></highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cleanup_and_return<sp/>=<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler::freeAltStackMem();</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"></highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fstr.is_open())</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fstr.close();</highlight></codeline>
<codeline lineno="6831"><highlight class="normal"></highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_cs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>old_cs;</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_running_in_test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"></highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>to<sp/>free<sp/>the<sp/>reporters<sp/>which<sp/>were<sp/>allocated<sp/>when<sp/>the<sp/>run<sp/>started</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>p-&gt;reporters_currently_used)</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>curr;</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;reporters_currently_used.clear();</highlight></codeline>
<codeline lineno="6840"><highlight class="normal"></highlight></codeline>
<codeline lineno="6841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;numTestCasesFailed<sp/>&amp;&amp;<sp/>!p-&gt;no_exitcode)</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6845"><highlight class="normal"></highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>default<sp/>reporter<sp/>if<sp/>none<sp/>is<sp/>given<sp/>through<sp/>the<sp/>command<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;filters[8].empty())</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;filters[8].push_back(</highlight><highlight class="stringliteral">&quot;console&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6849"><highlight class="normal"></highlight></codeline>
<codeline lineno="6850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>to<sp/>see<sp/>if<sp/>any<sp/>of<sp/>the<sp/>registered<sp/>reporters<sp/>has<sp/>been<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>getReporters())<sp/>{</highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matchesAny(curr.first.second.c_str(),<sp/>p-&gt;filters[8],<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>p-&gt;case_sensitive))</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;reporters_currently_used.push_back(curr.second(*g_cs));</highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"></highlight></codeline>
<codeline lineno="6856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>check<sp/>if<sp/>there<sp/>is<sp/>nothing<sp/>in<sp/>reporters_currently_used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6857"><highlight class="normal"></highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prepend<sp/>all<sp/>listeners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>getListeners())</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;reporters_currently_used.insert(p-&gt;reporters_currently_used.begin(),<sp/>curr.second(*g_cs));</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"></highlight></codeline>
<codeline lineno="6862"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isDebuggerActive()<sp/>&amp;&amp;<sp/>p-&gt;no_debug_output<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;reporters_currently_used.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DebugOutputWindowReporter(*g_cs));</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6866"><highlight class="normal"></highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>version,<sp/>help<sp/>and<sp/>no_run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;no_run<sp/>||<sp/>p-&gt;version<sp/>||<sp/>p-&gt;help<sp/>||<sp/>p-&gt;list_reporters)<sp/>{</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(report_query,<sp/>QueryData());</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"></highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cleanup_and_return();</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"></highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>TestCase*&gt;<sp/>testArray;</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>getRegisteredTests())</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testArray.push_back(&amp;curr);</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;numTestCases<sp/>=<sp/>testArray.size();</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"></highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>the<sp/>collected<sp/>records</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!testArray.empty())<sp/>{</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;order_by.compare(</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(testArray.begin(),<sp/>testArray.end(),<sp/>fileOrderComparator);</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;order_by.compare(</highlight><highlight class="stringliteral">&quot;suite&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(testArray.begin(),<sp/>testArray.end(),<sp/>suiteOrderComparator);</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;order_by.compare(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(testArray.begin(),<sp/>testArray.end(),<sp/>nameOrderComparator);</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;order_by.compare(</highlight><highlight class="stringliteral">&quot;rand&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::srand(p-&gt;rand_seed);</highlight></codeline>
<codeline lineno="6889"><highlight class="normal"></highlight></codeline>
<codeline lineno="6890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>random_shuffle<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first<sp/>=<sp/>&amp;testArray[0];</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>testArray.size()<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idxToSwap<sp/>=<sp/>std::rand()<sp/>%<sp/>(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"></highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>first[i];</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"></highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first[i]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>first[idxToSwap];</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first[idxToSwap]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;order_by.compare(</highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>means<sp/>no<sp/>sorting<sp/>-<sp/>beneficial<sp/>for<sp/>death<sp/>tests<sp/>which<sp/>call<sp/>into<sp/>the<sp/>executable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>a<sp/>specific<sp/>test<sp/>case<sp/>in<sp/>mind<sp/>-<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>slow<sp/>down<sp/>the<sp/>startup<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"></highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;String&gt;<sp/>testSuitesPassingFilt;</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"></highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_mode<sp/>=<sp/>p-&gt;count<sp/>||<sp/>p-&gt;list_test_cases<sp/>||<sp/>p-&gt;list_test_suites;</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>TestCaseData*&gt;<sp/>queryResults;</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"></highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!query_mode)</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_start,<sp/>DOCTEST_EMPTY);</highlight></codeline>
<codeline lineno="6913"><highlight class="normal"></highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invoke<sp/>the<sp/>registered<sp/>functions<sp/>if<sp/>they<sp/>match<sp/>the<sp/>filter<sp/>criteria<sp/>(or<sp/>just<sp/>count<sp/>them)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>:<sp/>testArray)<sp/>{</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tc<sp/>=<sp/>*curr;</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"></highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>skip_me<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tc.m_skip<sp/>&amp;&amp;<sp/>!p-&gt;no_skip)</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_me<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"></highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!matchesAny(tc.m_file.c_str(),<sp/>p-&gt;filters[0],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>p-&gt;case_sensitive))</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_me<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matchesAny(tc.m_file.c_str(),<sp/>p-&gt;filters[1],<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>p-&gt;case_sensitive))</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_me<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!matchesAny(tc.m_test_suite,<sp/>p-&gt;filters[2],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>p-&gt;case_sensitive))</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_me<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matchesAny(tc.m_test_suite,<sp/>p-&gt;filters[3],<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>p-&gt;case_sensitive))</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_me<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!matchesAny(tc.m_name,<sp/>p-&gt;filters[4],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>p-&gt;case_sensitive))</highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_me<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(matchesAny(tc.m_name,<sp/>p-&gt;filters[5],<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>p-&gt;case_sensitive))</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_me<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"></highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!skip_me)</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;numTestCasesPassingFilters++;</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"></highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>the<sp/>test<sp/>if<sp/>it<sp/>is<sp/>not<sp/>in<sp/>the<sp/>execution<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((p-&gt;last<sp/>&lt;<sp/>p-&gt;numTestCasesPassingFilters<sp/>&amp;&amp;<sp/>p-&gt;first<sp/>&lt;=<sp/>p-&gt;last)<sp/>||</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p-&gt;first<sp/>&gt;<sp/>p-&gt;numTestCasesPassingFilters))</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_me<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6942"><highlight class="normal"></highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(skip_me)<sp/>{</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!query_mode)</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_skipped,<sp/>tc);</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"></highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>execute<sp/>the<sp/>test<sp/>if<sp/>we<sp/>are<sp/>to<sp/>only<sp/>count<sp/>the<sp/>number<sp/>of<sp/>filter<sp/>passing<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;count)</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6952"><highlight class="normal"></highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>and<sp/>don&apos;t<sp/>execute<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;list_test_cases)<sp/>{</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queryResults.push_back(&amp;tc);</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"></highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>suite<sp/>if<sp/>not<sp/>done<sp/>already<sp/>and<sp/>don&apos;t<sp/>execute<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;list_test_suites)<sp/>{</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((testSuitesPassingFilt.count(tc.m_test_suite)<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>tc.m_test_suite[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queryResults.push_back(&amp;tc);</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testSuitesPassingFilt.insert(tc.m_test_suite);</highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;numTestSuitesPassingFilters++;</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"></highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>the<sp/>test<sp/>if<sp/>it<sp/>passes<sp/>all<sp/>the<sp/>filtering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;currentTest<sp/>=<sp/>&amp;tc;</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"></highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;failure_flags<sp/>=<sp/>TestCaseFailureReason::None;</highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;seconds<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"></highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>atomic<sp/>counters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;numAssertsFailedCurrentTest_atomic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;numAssertsCurrentTest_atomic<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"></highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;fullyTraversedSubcases.clear();</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"></highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_start,<sp/>tc);</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"></highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;timer.start();</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"></highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>run_test<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"></highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>some<sp/>of<sp/>the<sp/>fields<sp/>for<sp/>subcases<sp/>(except<sp/>for<sp/>the<sp/>set<sp/>of<sp/>fully<sp/>passed<sp/>ones)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;reachedLeaf<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>not<sp/>be<sp/>empty<sp/>if<sp/>previous<sp/>subcase<sp/>exited<sp/>via<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;subcaseStack.clear();</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;currentSubcaseDepth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"></highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;shouldLogCurrentException<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6996"><highlight class="normal"></highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>stuff<sp/>for<sp/>logging<sp/>with<sp/>INFO()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;stringifiedContexts.clear();</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"></highlight></codeline>
<codeline lineno="7000"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>2015<sp/>diagnoses<sp/>fatalConditionHandler<sp/>as<sp/>unused<sp/>(because<sp/>reset()<sp/>is<sp/>a<sp/>static<sp/>method)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7004"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4101)<sp/></highlight><highlight class="comment">//<sp/>unreferenced<sp/>local<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler<sp/>fatalConditionHandler;<sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tc.m_test();</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fatalConditionHandler.reset();</highlight></codeline>
<codeline lineno="7009"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestFailureException&amp;)<sp/>{</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;failure_flags<sp/>|=<sp/>TestCaseFailureReason::AssertFailure;</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)<sp/>{</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception,</highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{translateActiveException(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;failure_flags<sp/>|=<sp/>TestCaseFailureReason::Exception;</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7019"><highlight class="normal"></highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exit<sp/>this<sp/>loop<sp/>if<sp/>enough<sp/>assertions<sp/>have<sp/>failed<sp/>-<sp/>even<sp/>if<sp/>there<sp/>are<sp/>more<sp/>subcases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;abort_after<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;numAssertsFailed<sp/>+<sp/>p-&gt;numAssertsFailedCurrentTest_atomic<sp/>&gt;=<sp/>p-&gt;abort_after)<sp/>{</highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;failure_flags<sp/>|=<sp/>TestCaseFailureReason::TooManyFailedAsserts;</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7026"><highlight class="normal"></highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!p-&gt;nextSubcaseStack.empty()<sp/>&amp;&amp;<sp/>run_test)</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_reenter,<sp/>tc);</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;nextSubcaseStack.empty())</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run_test<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(run_test);</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"></highlight></codeline>
<codeline lineno="7033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;finalizeTestCaseData();</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"></highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end,<sp/>*g_cs);</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"></highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;currentTest<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"></highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>executing<sp/>tests<sp/>if<sp/>enough<sp/>assertions<sp/>have<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p-&gt;abort_after<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>p-&gt;numAssertsFailed<sp/>&gt;=<sp/>p-&gt;abort_after)</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"></highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!query_mode)<sp/>{</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end,<sp/>*g_cs);</highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QueryData<sp/>qdata;</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qdata.run_stats<sp/>=<sp/>g_cs;</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qdata.data<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>queryResults.data();</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qdata.num_data<sp/><sp/>=<sp/>unsigned(queryResults.size());</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DOCTEST_ITERATE_THROUGH_REPORTERS(report_query,<sp/>qdata);</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"></highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cleanup_and_return();</highlight></codeline>
<codeline lineno="7056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7057"><highlight class="normal"></highlight></codeline>
<codeline lineno="7058"><highlight class="normal">DOCTEST_DEFINE_INTERFACE(IReporter)</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"></highlight></codeline>
<codeline lineno="7060"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IReporter::get_num_active_contexts()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::g_infoContexts.size();<sp/>}</highlight></codeline>
<codeline lineno="7061"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IContextScope*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>IReporter::get_active_contexts()<sp/>{</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_num_active_contexts()<sp/>?<sp/>&amp;detail::g_infoContexts[0]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"></highlight></codeline>
<codeline lineno="7065"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IReporter::get_num_stringified_contexts()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::g_cs-&gt;stringifiedContexts.size();<sp/>}</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String*<sp/>IReporter::get_stringified_contexts()<sp/>{</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_num_stringified_contexts()<sp/>?<sp/>&amp;detail::g_cs-&gt;stringifiedContexts[0]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"></highlight></codeline>
<codeline lineno="7070"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerReporterImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>priority,<sp/>reporterCreatorFunc<sp/>c,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isReporter)<sp/>{</highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isReporter)</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getReporters().insert(reporterMap::value_type(reporterMap::key_type(priority,<sp/>name),<sp/>c));</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getListeners().insert(reporterMap::value_type(reporterMap::key_type(priority,<sp/>name),<sp/>c));</highlight></codeline>
<codeline lineno="7076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7077"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7078"><highlight class="normal"></highlight></codeline>
<codeline lineno="7079"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>doctest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7080"><highlight class="normal"></highlight></codeline>
<codeline lineno="7081"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7082"><highlight class="normal"></highlight></codeline>
<codeline lineno="7083"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7084"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4007)<sp/></highlight><highlight class="comment">//<sp/>&apos;function&apos;<sp/>:<sp/>must<sp/>be<sp/>&apos;attribute&apos;<sp/>-<sp/>see<sp/>issue<sp/>#182</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7085"><highlight class="normal">int<sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdoctest_1_1Context" kindref="compound">doctest::Context</ref>(argc,<sp/>argv).run();<sp/>}</highlight></codeline>
<codeline lineno="7086"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="7087"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7088"><highlight class="normal"></highlight></codeline>
<codeline lineno="7089"><highlight class="normal">DOCTEST_CLANG_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="7090"><highlight class="normal">DOCTEST_MSVC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="7091"><highlight class="normal">DOCTEST_GCC_SUPPRESS_WARNING_POP</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"></highlight></codeline>
<codeline lineno="7093"><highlight class="normal">DOCTEST_SUPPRESS_COMMON_WARNINGS_POP</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"></highlight></codeline>
<codeline lineno="7095"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_LIBRARY_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7096"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_CONFIG_IMPLEMENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7097"><highlight class="normal"></highlight></codeline>
<codeline lineno="7098"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7099"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7100"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7102"><highlight class="normal"></highlight></codeline>
<codeline lineno="7103"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DOCTEST_UNDEF_NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7104"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7105"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DOCTEST_UNDEF_NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>DOCTEST_UNDEF_NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/nev/cos214/Project/finalpush/Team-8-Design-Wits/System/doctest.h"/>
  </compounddef>
</doxygen>
