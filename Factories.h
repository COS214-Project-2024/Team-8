#include "IndustrialBuilding.h"
#include <string>

using namespace std;

#ifndef FACTORIES_H
#define FACTORIES_H

/**
 * @class Factories
 * @brief Represents an industrial building that functions as a factory, inheriting from IndustrialBuilding.
 */
class Factories : public IndustrialBuilding {

protected:
    string buildingName;          /**< Name of the factory. */
    string buildingType;          /**< Type of the factory. */
    Citizen* listOfCitizens;      /**< List of citizens associated with the factory. */

    double maintenanceCost;       /**< Maintenance cost for the factory. */
    int powerReq;                 /**< Power requirement of the factory. */
    int waterReq;                 /**< Water requirement of the factory. */
    int waste;                    /**< Waste generated by the factory. */
    int sewageCost;               /**< Sewage cost for the factory. */
    Utility* resources;  /**< Mediator for managing resources. */

    float sales;                  /**< Sales generated by the factory. */
    float profit;                 /**< Profit generated by the factory. */
    int employment;               /**< Employment count in the factory. */

    State* state;                 /**< Current state of the factory. */

public:
    /**
     * @brief Constructs a Factories object with the specified attributes.
     * @param bName Name of the building.
     * @param pReq Power requirement.
     * @param wReq Water requirement.
     * @param mCost Maintenance cost.
     * @param sCost Sewage cost.
     * @param waste Waste generated by the factory.
     * @param employment Employment provided by the factory.
     */
    Factories(string bName, int pReq, int wReq, double mCost, int sCost, int waste, int employment);


    /**
     * @brief Gets the type of the factory.
     * @return The type of the building as a string.
     */
    virtual string getBuildingType();

    /**
     * @brief Gets the number of jobs created by the factory.
     * @return The number of jobs as an integer.
     */
    virtual int getJobsCreated();

    /**
     * @brief Gets the maintenance cost of the factory.
     * @return The maintenance cost as a double.
     */
    virtual double getMaintenanceCost();

    /**
     * @brief Gets the name of the factory.
     * @return The name of the building as a string.
     */
    virtual string getName();

    /**
     * @brief Gets the power requirement of the factory.
     * @return The power requirement as an integer.
     */
    virtual int getPowerReq();

    /**
     * @brief Gets the sewage cost of the factory.
     * @return The sewage cost as an integer.
     */
    virtual int getSewageCost();

    /**
     * @brief Gets the water requirement of the factory.
     * @return The water requirement as an integer.
     */
    virtual int getWaterReq();

    /**
     * @brief Requests the current state of the factory.
     */
    virtual void requestState();

    /**
     * @brief Gets the waste cost for the factory.
     * @return The waste cost as an integer.
     */
    int getWasteCost();

    /**
     * @brief sets the state of the building
     */
    void setState(State* newState);

    /**
     * @brief Gets the sales generated by the factory.
     * @return Sales amount as a float.
     */
    float getSales();

    /**
     * @brief Gets the profit generated by the factory.
     * @return Profit amount as a float.
     */
    float getProfit();

    /**
     * @brief Pays a citizen employed in the factory.
     * @return The payment amount as an integer.
     */
    int payCitizen();
};

#endif
